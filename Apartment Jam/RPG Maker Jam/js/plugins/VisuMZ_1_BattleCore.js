//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.82;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.82] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x5c342f=_0x3110;(function(_0x21d803,_0x5c1812){const _0x4fb670=_0x3110,_0x5d7f81=_0x21d803();while(!![]){try{const _0x5046c3=parseInt(_0x4fb670(0x25c))/0x1+-parseInt(_0x4fb670(0x501))/0x2*(parseInt(_0x4fb670(0x706))/0x3)+-parseInt(_0x4fb670(0xc3d))/0x4+parseInt(_0x4fb670(0xc38))/0x5+-parseInt(_0x4fb670(0x749))/0x6+-parseInt(_0x4fb670(0x665))/0x7*(-parseInt(_0x4fb670(0xd0c))/0x8)+-parseInt(_0x4fb670(0x422))/0x9;if(_0x5046c3===_0x5c1812)break;else _0x5d7f81['push'](_0x5d7f81['shift']());}catch(_0x1db43e){_0x5d7f81['push'](_0x5d7f81['shift']());}}}(_0x21ac,0x1d938));function _0x21ac(){const _0xa16ad3=['ShowWeapon','AnchorY','displayRemovedStates','isAttack','PreApplyAsTargetJS','multiTargetWindowRect','updateBorderSprite','wLZzR','yxUnI','isGuardLifeSteal','isBattleTest','evalDamageFormulaBattleCore','createMainSprite','onBattleStartOnceParallels','setupBattleCoreData','VisuMZ_2_BattleSystemOTB','hitType','ActionAnimation','unshift','ludIe','jAQel','ActSeq_Cutin_WaitForExit','ActSeq_Animation_WaitForAnimation','ScaleX','gainStoredBoostPoints','_skewX','Name','RLFHT','helpAreaHeight','disperseDamage','PAcXm','kgGRe','Settings','startFloat','getItemDamageAmountLabelBattleCore','XfLvM','performSTBExploiter','updateCommandNameWindow','CmdIconOptions','Game_Enemy_transform','guard','Sprite_Battleback_adjustPosition','changeAtbChargeTime','_commonEventKey','UDuQB','ceil','isActing','Formula','hpAffected','ActSeq_Movement_MoveToTarget','BattleCore','SDSoZ','prototype','_battler','isBorderPortraitSpriteVisible','edUco','regionId','pXwCF','Sprite_Enemy_initVisibility','selectAllActors','filters','twmXC','_lastActor','string','isCommandEnabled','ARRAYNUM','result','BattleManager_abort','AUTO\x20BATTLE','ShowMissEvasion','OLzte','isForOneBattleCore','effects','_onceParallelInterpreters','textColor','evknO','updateBorderStyle','match','updateMain','IAtJC','action','bSNSU','ExtraSettings','Scene_Options_maxCommands','gpSDk','performShakeFlinch','_ptbActionCost','Window_BattleActor_hide','ZmgBR','BattleManager_startBattle','ActSeq_Horror_GlitchCreate','create','actions','uXnMF','NdEEU','MchdX','Window_BattleLog_performAction','_targetOffsetX','deathStateId','JS\x20%1REGENERATE','SfcWg','Game_BattlerBase_canGuard','ActSeq_Target_PrevTarget','_waitMode','_pattern','cameraDuration','initBattleCore','KbTzM','drawItemImageXPStyle','Opacity','removeStatesAuto','iconHeight','commandNameWindowDrawBackground','isQueueOptionsMenu','onAngleEnd','battleFloat','repeatTargets','mpDamage','Game_Interpreter_command283','createSeparateDamagePopups','ActSeq_Mechanics_Collapse','ConfigManager_applyData','displayItemMessage','isTickBased','BLlOy','vertCells','alive\x20actors\x20not\x20user','QpTIU','qVOZy','battleLayoutStyle','loadWindowskin','actionBattleCoreJS','motionSpeed','iupRL','LqEWt','showPortraits','FocusY','USER-DEFINED\x201','setTargetBattlerKey','gradientFillRect','updateAttachmentSprites','removedStateObjects','float','Shadow','ZJdqJ','isEscapeCommandEnabled','AAxpX','initMembersBattleCore','resetFontSettings','special','endVisualCutin','battleAngle','map','smooth','rmQaQ','updateJump','8DnIpDP','getEnemyIdWithName','gqmIk','getBattlePortraitOffsetY','physical','%1StartActionJS','close','maxTp','GroupDigits','nnXwv','jejRR','_mainSprite','_statusType','movement','onFloatEnd','current\x20target','parallaxScrollX','Slot','getInputButtonString','_updateCursorFilterArea','rbRQd','clearRect','animationBaseDelay','disarmMpLifeSteal','BattleManager_processDefeat','ActSeq_Element_NullElements','HelpEscape','waitForMovement','flashDuration','currentExt','_canLose','ActSeq_Mechanics_HpMpTp','iconText','ShakeFlinchPower','_windowLayer','NameOffsetX','VNGeU','clearActiveWeaponSlot','drawItemImage','pagedown','Game_Action_setItem','alive\x20friends\x20not\x20user','resizeWindowXPStyle','cameraOffsetDuration','WeaponTypeID','getDefeatedEnemies','GQPes','stateMotionIndex','startVisualCutin','_floatDuration','measureTextWidth','terminate','sIyQS','CmdTextAutoBattle','optDisplayTp','IMkYM','BazIb','AbBWe','WaitForSkew','gENeB','_enemyNameContainer','jsScaleDown','sThkk','SJmkF','DfDXX','cancelActorInput','inputting','checkSceneBattleTransitionable','AMxHb','partyCommandWindowRect','GiDij','alive\x20actors','isClicked','AddOption','fnordRemovedStates','forceAction','PostRegenerateJS','CriticalDmgRate','initialize','isCertainHit','evade','_itemWindow','logActionList','TTCNr','partyCommandWindowRectDefaultStyle','updateFlip','ActSeq_Movement_FaceTarget','traitObjects','ConfigManager_makeData','ReflectPlayback','ABjiO','UxDQG','all\x20targets','SvMotionIdleMass-%1-%2','ActSeq_Mechanics_Multipliers','EuWKW','startSkew','ekxLn','isForDeadFriend','setLastPluginCommandInterpreter','EasingType','yOMZg','_svBattlerData','putActiveBattlerOnTop','ActSeq_Element_Clear','displayChangedBuffs','battleOpacity','suafg','Scene_Battle_update','battleCorePreBattleCommonEvent','JumpToLabel','ActSeq_Mechanics_CustomDmgFormula','%1RegenerateJS','battleGrow','rec','skillTypes','_flinched','abs','jump','CommandAddOptions','processRandomizedData','Scene_Map_launchBattle','onAllActionsEnd','gaugeLineHeight','createCancelButton','children','lrsNt','battleback1Name','_battleBalloonSprites','kKEBL','visualHpGauge','JS\x20%1END\x20TURN','battleMembers','Sprite_Actor_updateBitmap','getBattlePortrait','NChHc','createDamageSprite','playEnemyDamage','mRRXl','isNextSceneBattleTransitionable','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','actorId','ActSeq_Camera_Clamp','GZYgB','setCommonEvent','enemyId','drawIcon','EeXEw','toLowerCase','gainHp','_baseX','opacityStart','VoiceLine','ActionEndUpdate','parse','clearBattleRefreshRequest','WaitForEntrance','version','animationId','_createClientArea','setupFont','Game_Battler_regenerateAll','ActSeq_Grid_PullToTargetNode','pointX','OffsetY','TFYNR','logWindowRect','vjfHW','commandOptions','collapse','LjMgI','jsScaleUp','yuzRF','Onwsi','Window_BattleLog_displayCritical','GdXxj','commandNameWindowCenter','isBattleCoreTargetScope','icons','OdhTB','xjJEK','CastCertain','_handlers','isMeleeMultiTargetAction','Window_BattleLog_performActionStart','DUHvg','battleMove','refreshBattlerMotions','NextTurn','hieYk','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','forceSelect','inBattle','createAnimationSprite','eXPUK','ZtUTk','EmergeText','createKeyJS','_customDamageFormula','smoothness','battleSpriteSkew','syRQd','VisuMZ_2_BattleSystemSTB','onRegeneratePlayStateAnimation','JS\x20%1END\x20BATTLE','All\x20Allies','subject','statusText','ActSeq_Mechanics_StbRemoveExcessActions','_jumpDuration','showEnemyAttackAnimation','BoostPoints','_battleCoreAddedElements','_commandNameWindow','TiSWm','makeTargetSprites','ANTI_TINT_UI','_offsetY','useDigitGrouping','JVLRk','PostEndBattleJS','padding','sLSTR','AutoBattle','getBattlerKeyTargetReplacement','call','HpGaugeOffsetY','esRRA','VisuMZ_3_ActiveChainSkills','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','yYfOC','weaponTypes','_immortal','CheckVisibleBattleNotetags','_tempEquipCheck','isOTB','bgHcy','%1StartTurnJS','endBattle','BattleManager_selectNextCommand','HZAFr','_targetGrowY','evaded','Game_Action_itemHit','pause','_duration','PZYJa','XWYII','adjustPosition','createBattleUIOffsetX','members','dxtax','lBvYq','battleCommandName','isBattleSys','damageOffsetX','WLuja','description','TQKqB','gtbLQ','jTIdf','_angleWholeDuration','BgType','attackTimesAdd','VisualCutinEffect','_enemySprites','ActSeq_Animation_GuardAnimation','VariableID','critical','Game_Battler_makeSpeed','jFmfB','Scene_Battle_onActorCancel','AllowCollapse','_actions','executeDamage','DbibW','_linkedSprite','playEnemyAttack','filterArea','performAttack','PopupOffsetY','zbkQM','PostEndActionJS','Game_Map_battleback1Name','ActSeq_Target_RandTarget','Actor','uNGoP','GhkyR','battleback2Name','RNbWT','eaNSg','createEnemyNameContainer','Window_BattleLog_update','ElementStatusCore','pSoWd','addItemCommand','pjGAp','updateShadowBattleCore','aZTZW','Bohnv','addFightCommand','performLifeSteal','svBattlerShadowVisible','weapons','sortDamageSprites','getSpecificBattlerKeyTarget','forceWeaponAnimation','isEffecting','isAnyoneSkewing','alterCost','yHwBD','isATB','%1-%2','left','IlBCM','wWfpK','NcIdf','apaZZ','createAttachedSprites','alive\x20friends\x20not\x20target','NLhDS','criticalDmgFlat','attackAnimationIdSlot','addChildToUiContainer','displayBuffs','innerWidth','isActionSelectionValid','fillRect','iHgck','Sprite_Battler_damageOffsetX','_flipScaleX','adjustWeaponSpriteOffset','addWeaponSwapCommand','loadBattleback1','ActSeq_Animation_CastAnimation','kmLKw','_targets','createDistortionSprite','BUpyy','centerFrontViewSprite','MUSICNOTE','battleDisplayText','setSvBattlerSprite','PLrdQ','applyArmorModifiers','ActSeq_Movement_WaitForSkew','OxcUs','_lineHeight','makeTargetsBattleCoreJS','gainBravePoints','NUdtZ','ActSeq_Movement_Opacity','_showWeapon','partyCommandWindowRectBorderStyle','find','isGrowing','isAnimationPlaying','makeSpeed','unchanged','setupBattlebackBattleCore','epMtz','ActSeq_ChangeSkew','iFxZE','SEGcu','ShowActorGauge','nkPjj','HITTYPE_MAGICAL','iconIndex','EXCLAMATION','isFrameVisible','wQtAF','ParseWeaponNotetags','chantStyle','DEF','cancel','_borderPortraitSprite','hasSvBattler','createEnemies','isDeathStateAffected','iCtqL','targetsForFriends','Sprite_Actor_updateShadow','LIGHT-BULB','requestMotionRefresh','CRWxl','isPlaytest','Scene_Battle_partyCommandWindowRect','_uiContainer','makeData','clearFreezeMotion','removeImmortal','HP_Flat','_drawTextBody','szPcb','_battleLayoutStyle','floatBattler','JS\x20%1END\x20ACTION','BattleManager_setup','KMffy','kDvBF','Window_BattleLog_performCollapse','log','OVRGp','itemEffectAddNormalState','ACTOR_OFFSET_X','addedBuffs','displayAddedStates','MlLIt','chant','isAutoBattleCommandEnabled','performWeaponAnimation','virtualClick','cancelMpLifeSteal','getNextDamagePopup','startEnemySelection','ActSeq_Cutin_AddVisualCutinEffect','updateHelp','getAttackMotion','pLdba','BattleManager_initMembers','right','Window_BattleLog_performReflection','AMUPQ','Window_BattleLog_pushBaseLine','canBattlerMove','_tpbSceneChangeCacheActor','DefaultDamageStyle','BattleManager_onEscapeFailure','svBattlerName','jCzlz','_cancelButton','sOiwJ','GSPjC','Scene_Battle_onEnemyOk','portraitIndex','linkSprite','placeActorName','processTouch','_skewWholeDuration','requestBalloon','ActSeq_Cutin_EndVisualCutinEffectType','clone','PostDamage%1JS','Scene_Battle_updateBattleProcess','lAZpS','ZNLIV','createEnemyWindow','reverse','ActSeq_BattleLog_AddText','mrGbM','setActorHome','%1EndBattleJS','PostApplyAsTargetJS','MDF','CopyCombatLog','Game_BattlerBase_die','getNextSubjectFromPool','process_VisuMZ_BattleCore_jsFunctions','isAutoBattle','ForceExploiter','criticalDmgRate','WEAPON\x20SWAP','_scene','CheckMapBattleEventValid','isBusy','wovbd','Game_Battler_forceAction','GuardFormulaJS','cRaNY','nXYtV','DigitGroupingDamageSprites','makeEscapeRatio','WaitForSpin','SceneManager_isSceneChanging','LTAyU','dcTWP','qfqFD','aHYEU','checkBattleEnd','Direction','asjUD','isBattleRefreshRequested','ArRedRate','_stateIconSprite','startMove','contentsOpacity','regenerateAll','lifeSteaItem','isStateAffected','BattleDefeatJS','setupRgbSplitImpactFilter','DQZle','battlerSprites','playOnceParallelInterpreter','HelpAutoBattle','Window_BattleEnemy_initialize','PAPKB','_flashColor','_iconIndex','_regionBattleback2','resize','EnableSoftCap','command339','showAnimation','ResetOffset','performEvasion','angle','aneKX','createBattleFieldBattleCore','DpaRD','negativeMpLifeSteal','Sprite_Battler_updatePosition','lXDsN','processOk','CmdIconEscape','pushBaseLine','forActor','PreDamageAsUserJS','CvTDC','moveToStartPosition','uKPFi','MAXHP','Reveal','getBattlePortraitFilename','placeTimeGauge','itemTargetCandidates','context','Game_Action_executeMpDamage','WtypeId','targetObjects','statusWindowRectBorderStyle','isMVAnimation','nVcnJ','updateBattlerContainer','extraPositionY','callNextMethod','_growX','COBWEB','processEscape','Exploiter','JHCpT','blt','showNormalAnimation','isMeleeSingleTargetAction','setVisibleUI','ActSeq_Impact_MotionBlurScreen','vrqwL','_baseY','param','ShowAddedDebuff','createActorCommandWindowBattleCore','ezUOb','JPpVD','131084uPnOLS','attackSkillId','name','Scene_Battle_skillWindowRect','Elements','Game_Temp_initialize','PreApplyAsUserJS','_createCursorSprite','displayAction','ActSeq_Impact_MotionTrailRemove','format','UfTAe','ActSeq_Impact_Desaturate','_battleCoreBattleStartEvent','MotionType','WLsLW','battleInjectAni','MessageWait','IJdbN','setHorrorEffectSettings','TpGaugeOffsetX','getDamageStyle','_tpbNeedsPartyCommand','placeGauge','BCTaH','setBattleImpactTimeScale','_opacityEasing','StatusWindowAttachmentBackOffsetX','visualCutinPortraitIndex','edhdL','qohDe','loadSvActor','OffsetAdjust','stateRate','createActorCommandWindow','statusTextAutoBattleStyle','CbVJD','AArkn','battlerShadowScaleX','process_VisuMZ_BattleCore_PreBattleCommonEvent','BTbll','ActSeq_Impact_Oversaturate','setHandler','deselect','IuKND','WaitForCamera','processTurn','nupDT','AllowRandomSpeed','Scene_Battle_start','Game_BattlerBase_initMembers','moveBattlerToPoint','Armor-%1-%2','toString','checkTpbInputOpen','sort','isCancelled','_growDuration','ActSeq_Skew_Reset','rbuiY','playReflection','requestAnimation','battleSkew','portraitFlipHorz','Phfoy','_playTestFastMode','Sprite_Enemy_setBattler','kGkrb','setHome','BattleManager_cancelActorInput','uTtOl','_cursorSprite','textWidth','update','_injectAnimationSprite','ActSeq_Horror_TVRemove','sortEnemies','Scene_Battle_selectPreviousCommand','ZPMOy','setBattleCameraPoint','invokeMagicReflection','DualWield','ActSeq_Movement_Scale','1:1','showHelpWindow','STRUCT','_animation','CXyAZ','NameFontSize','Game_Enemy_setup','isDamagePopupRequested','_callSceneOptions','EscapeFailureJS','setBattleZoom','setItem','NMjrk','performDamage','mYVBu','motionIdle','setBlendColor','updateShadowPosition','spinBattler','yDnLy','DQqkU','addAutoBattleCommand','Game_Action_setSubject','ActSeq_Mechanics_CtbOrder','ParseEnemyNotetags','checkSubstitute','portraitFlipVert','_namesCount','EmFZR','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','ActSeq_Grid_PushFromTargetNode','iPVVi','uNnXy','hsQyc','setBattleCameraTargets','innerHeight','ActSeq_Mechanics_DamagePopup','CastPhysical','_damageContainer','attackStatesRate','StateID','isForOpponentBattleCore','createHpGaugeSprite','MSFys','EscapeSuccess','Sprite_Gauge_smoothness','VisuMZ_2_HorrorEffects','process_VisuMZ_BattleCore_PluginParams','ActSeq_Movement_HomeReset','startAttackWeaponAnimation','startIcon','DefaultHardCap','sfIQJ','isSpriteVS8dir','HP_Rate','_growWholeDuration','kRyho','playBattleVoice','moveBattlerHomeDistance','ForceDeath','spell','_branch','drawItemStyleIconText','ConvertParams','_back2Sprite','hasBeenDefeatedBefore','StepDistanceX','_borderPortraitTargetX','_angleEasing','NZDpf','alive\x20enemies\x20not\x20target','_enemyID','MoLgf','_escapeRatio','boxHeight','updateKeyboardKeys','process_VisuMZ_BattleCore_DamageStyles','ajKJl','FlinchDuration','onEnemyCancel','PreDamage%1JS','YQACX','_homeX','_battlerKeyCache','lastCommandSymbol','etGVZ','PreStartActionJS','ParseClassNotetags','EqgMj','BattleManager_updatePhase','ARRAYJSON','getStypeIdWithName','makeActionOrders','hxoOi','BFDAL','displayMpDamage','startHomeMove','concat','ActSeq_Angle_WaitForAngle','BdIxR','DistanceY','Game_Action_apply','slices','Game_Battler_clearDamagePopup','setupDesaturateImpactFilter','_jumpHeight','start','pTFuM','pageup','wklab','extraPositionScaledY','zyzGm','TOWrM','Defeat','_battleBalloonQueue','gainFullActionsPTB','VhEmt','Window_BattleActor_show','XPActorCommandLines','Game_Action_isForAliveFriend','dMMXM','hlidh','isJumping','rvnlF','FRkiz','zBZiF','BLeVz','ShowHide','Scene_Battle_initialize','performSubstitute','command301','all\x20enemies','updateCollapse','isSkill','onEncounterBattleCore','rMqwT','DefaultStyle','_statusWindow','scale','XAPSz','updateBattleProcess','message2','actionSplicePoint','isCTB','WfWMl','note','AntiTintUiElements','gainCurrentActionsETB','updateStaticSvBattlerFrames','active','ActSeq_BattleLog_WaitForBattleLog','ActSeq_Motion_PerformAction','_padding','VisuMZ_3_VisualCutinEffect','DestinationJS','VisuMZ_3_ActSeqProjectiles','isPTB','power','Game_Map_encounterList','setupCriticalEffect','drawSkillCost','updateGrow','Mute','kZIDI','makeActionList','updateLink','ChargeRate','isStateResist','Game_Action_setSkill','checkShowHideSkillNotetags','textAlign','Sprite_AnimationMV_updatePosition','duration','ActorOffsetY','WaitForZoom','isAutoBattleCommandAdded','createStateIconSprite','JS\x20%1DAMAGE\x20%2','isAnyoneChangingOpacity','Actions','EnableDamageCap','Game_System_initialize','ActSeq_Mechanics_BreakShieldReset','AttackAnimation','applyItem','startPartyCommandSelection','lSDmE','createEnemyNames','KgQiq','currentSymbol','svShadow','useItem','_actorSprites','ActSeq_Horror_GlitchRemove','isSceneBattle','nupAv','QPezc','BindCommonEventKeysForObj','isDisarmLifeSteal','clearHorrorEffects','KFJiw','autoBattleUseSkills','Parse_Notetags_Targets','drawBackgroundRect','Sprite_Enemy_createStateIconSprite','ActSeq_Inject_AnimationPauseResume','fnordAddedStates','VaFiB','Window_BattleStatus_initialize','performMiss','_colorType','isDrain','EscapeSuccessJS','setSTBExploited','WIrud','wWQKY','BattleCmdList','makeDeepCopy','XPPvd','Parse_Notetags_TraitObjects','rwTqQ','addShowHpGaugeCommand','displaySubstitute','ActiveTpbOptionsMessage','requestDragonbonesAnimation','addAutoBattleCommands','XaKMX','mhp','addChild','LZfBQ','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','removeCurrentAction','BreakShields','MdKOw','dQxPg','Game_Battler_onTurnEnd','drawItemStatusXPStyle','QqsSG','maxBattleMembers','pow','dead\x20enemies','clearBattlerMotionTrailData','meetsUsableItemConditions','ActSeq_Animation_ActionAnimation','checkCacheKey','RtebJ','attachSpritesToDistortionSprite','FBRCU','Orxem','ActSeq_Movement_MoveToJsPoint','_lastEnemy','DefeatEvent','_fauxAnimationSprites','_baseLineStack','Scene_Battle_startActorSelection','States','YaVdd','clearBattleCoreData','PapIB','WaitForProjectile','sdiPI','processEnemyModeTouchBattleCore','createJS','command301_PreBattleEvent','KZeYw','_angleDuration','UFmIi','ActSeq_Movement_HomeMoveToPoint','_animationContainer','ActionItemMsg','open','canUseItemCommand','brcoe','updateStatusWindowPosition','Scene_Battle_updateStatusWindowPosition','popBaseLine','AXBko','actorCommandCancelTPB','jxGAR','ActSeqImpact','_enemyId','BattleEndEvent','uGSFs','startBattle','bitmapHeight','PopupShiftX','filter','SHzja','freezeTime','battleCameraData','getLastPluginCommandInterpreter','UQkXE','_performDamageMotion','drawItemBackground','ActSeq_Mechanics_DeathBreak','applyData','VariableDmg','sWdsQ','HEART','bJqvq','removeHorrorEffect','ActSeq_Movement_HomeMoveToJsPoint','updateSelectionEffect','ievoy','getSkillIdWithName','VisuMZ_1_SkillsStatesCore','IMJBE','rjreJ','createCommandNameWindow','ActSeq_BattleLog_PushBaseLine','bitmapWidth','balloonId','SwitchCritical','processBattleBalloonRequests','_baseTexture','MCBoi','ActSeq_Movement_FaceJsPoint','eRZeF','_spriteset','dragonbonesData','_displayBattleCoreTransitionErrorMsg','ActSeq_Animation_SkillAnimation','_homeY','aquRt','revealNewWeaknesses','HitFlat','_tpbChargeTime','qTwFN','tRANk','clamp','Game_Action_testApply','RJrNV','CUCwC','_updateFilterArea','apply','isForNotUser','addText','makeAutoBattleActions','ARRAYSTRUCT','_opacityWholeDuration','MxKPI','isPreviousSceneBattleTransitionable','updateFloat','expRate','Window_BattleLog_popBaseLine','FLVxp','Shadow2','startMotion','isBattlerFlipped','ActSeq_Motion_RefreshMotion','WaitForEffect','isDisplayEmergedEnemies','_actionBattlers','rqYYv','ShowHpDmg','rSFae','Window_BattleLog_clear','gUENO','PostStartBattleJS','noSimilarSTypes','PopupShiftY','ajWmg','addOnceParallelInterpreter','zOhWJ','Scene_Boot_onDatabaseLoaded','ParseArmorNotetags','PreStartBattleJS','applyVariance','applyImmortal','FollowTurn','SPEva','751392yEBYHG','fkgxQ','updateBattlebackBitmap','CriticalDuration','_targetOpacity','index','waitForOpacity','loadPicture','executeHpDamage','maAnk','onSelectAction','DxfVK','Spriteset_Battle_createLowerLayer','tBuhx','setWaitMode','clearResult','CreateActionSequenceTargets','%1EndTurnJS','requestFauxAnimation','CreateCommonEventKeys','setBattlerMotionTrailData','WoMTx','Game_Actor_makeActionList','updateBattlebackBitmap1','BattleManager_processVictory','_methods','Scene_Battle_itemWindowRect','helpAreaBottom','constructor','OuQQq','_battlerContainer','code','_deathStateApplied','AutoMeleeSolo','addNewState','pmRpH','State-%1-%2','CheckVisibleSkillNotetags','onEncounter','offsetY','ActSeq_Mechanics_ActiveChainInputDisable','pointY','TEqfb','applySoftDamageCap','front\x20center','bcWKA','Weapon-%1-%2','ArPenFlat','wholeActionSet','McdYu','gQKQq','enemy','Sprite_Battler_update','itemWindowRect','TzCuJ','_homeDuration','isSpinning','Window_ActorCommand_setup','StatusWindowAttachmentBackOffsetY','loadBitmap','zEPts','TAumD','vfENj','StepDuration','McdMK','qbtjJ','ShakeFlinchDuration','_actor','_floatHeight','HelpFight','ilyhH','FlinchDistanceY','createBattleFieldContainer','XtFYk','process_VisuMZ_BattleCore_BaseTroops','prepareBorderActor','FCvOE','checkShowHideBattleNotetags','nameY','JLFtI','battleEffect','callUpdateHelp','Debuffs','_svBattlerSprite','ButtonAssist','ActionSkillMsg1','ShakeFlinch','gPAXU','dead\x20friends','isActor','CriticalColor','globalAlpha','waitForEffect','allowCollapse','ShowEnemyGauge','BattlebackScale','splice','portrait','LTmaQ','FaceAway','StatusWindowAttachmentFrontOffsetY','endAnimation','mmyvC','battleUIOffsetX','isForAnyone','OBMhv','battleZoom','isForAliveFriendBattleCore','canUse','offsetX','_forceAction','Text','_action','refreshActorPortrait','%1EndActionJS','zsuLa','checkTpbInputClose','POST-','loadSystem','_freezeMotionData','noise','shouldHideBattleEndPopups','makeTargetSelectionMoreVisible','IqcFg','changeInputWindow','Game_Action_clear','setAttack','createPartyCommandWindowBattleCore','PreApply%1JS','uqybi','_skillIDs','GyQPD','ActSeq_Movement_FaceDirection','EscapeFail','ouPEk','STR','isAlwaysHidden','ActSeq_Zoom_Scale','uEClw','okTargetSelectionVisibility','ActSeq_Impact_ShockwaveCenterTargets','refresh','BTB','evalDamageFormula','updateWaitMode','isVisualHpGaugeDisplayed','arPenFlat','ActSeq_Mechanics_EmulateGuardEffect','ShowReflect','onActorCancel','fight','OverallFormulaJS','DefaultSoftScaler','selectNextCommandTpb','addLoadListener','grqFT','svActor','targetObject','mfOMk','isOptionsCommandEnabled','compatibilityVisible','rlazJ','sliceMin','XPSpriteYLocation','isCancelLifeSteal','_cache','createShadowSprite','JS\x20%1START\x20TURN','Sprite_SvEnemy','VisuMZ_2_BattleSystemFTB','_performActionEnd','weatherType','updateSpin','ActSeq_Camera_Reset','KZXAP','displayCurrentState','Game_Action_makeDamageValueDisperse','isFlipped','usBBO','endAction','Window_BattleLog_performSubstitute','ActSeq_Weapon_NextActiveWeapon','portraitHue','ActSeq_Camera_FocusTarget','createWeather','Scene_Battle_onActorOk','ShowRemovedBuff','SkewY','PikAX','partyCommandWindowRectXPStyle','MwgYE','drawSingleSkillCost','wMrYB','hardDamageCap','default','updateEventMain','sXBHY','LIGHT\x20BULB','itemEffectRecoverHp','aliveMembers','getHardDamageCap','needsActorInputCancel','canAddSkillCommand','compareBattlerSprites','Sprite_Actor_update','hasSkill','_appeared','Enemy','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','isNegativeLifeSteal','Scene_Map_updateCallMenu','_currentActor','Class-%1-%2','AlphaFilter','Game_Action_executeDamage','SLEEP','ActSeq_Mechanics_EmulateAttackEffect','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','battleCoreTpbMainPhase','createMiss','ActSeq_Weapon_SetActiveWeapon','yACJi','initVisibility','2WGcbbg','ArRedFlat','testApply','EugJk','_item','BEnsr','_shadowScaleX','SWEAT','zcOxh','ActSeq_Mechanics_RemoveState','_tempActor','WaitCount','updatePadding','Scene_Battle_windowAreaHeight','Scene_ItemBase_applyItem','WHDWF','Window_Options_statusText','addedStateObjects','ZlBNG','SvBattlerSolo-%1-%2','zTOEG','magicReflection','isBreakStunned','VisuMZ_1_ElementStatusCore','flashColor','WvjBX','jUDeE','tFEfI','PRE-','battlerKey','LIkTd','alive\x20enemies','createAttachmentSprites','Window_BattleLog_displayActionResults','turn','drawText','_forActor','moveBattlerHomeToPoint','ATK','Game_Action_evalDamageFormula','ehbzu','Porfk','_subject','maxCols','_shakeFlinchDuration','updateVisibility','IconStypeNorm','onEscapeSuccess','counterAttack','xRGOY','onOpacityEnd','ParseSkillNotetags','Mechanics','ZVGEQ','_active','iterateBattler','allowRandomSpeed','weatherPower','Ritqu','BattleSystemBTB','KhCkc','getAttackWeaponAnimationId','_makeCursorAlpha','AIIws','isDead','JS\x20ESCAPE\x20SUCCESS','onHomeMoveEnd','ShowTpDmg','jumpBattler','_damages','Baosu','motionType','exit','BattleManager_isTpbMainPhase','ARRAYSTR','Actor-%1-%2','Xygtc','target','Mpqfv','_borderPortraitDuration','performActionStart','updateActors','svBattlerAnchorY','isShownOnBattlePortrait','getSkillTypes','targetsForOpponents','PreRegenerateJS','custom','battleJump','visualCutinPortraitFilename','aGSrn','AttachStateOffsetX','mpHealingFmt','textSizeEx','isCustomBattleScope','position','wZCsA','setupDamagePopup','AS\x20USER','softDamageCapRate','CommonEventID','changeWeather','orMbb','Game_Troop_setup','mainSpriteScaleY','mainSpriteWidth','Window_BattleLog_displayEvasion','CommandVisible','VisuMZ_2_BattleGridSystem','updateAngleCalculations','_logWindow','indexOf','Width','Game_Battler_performEvasion','CombatLogIcon','FmZLp','Victory','waitForNewLine','updateRefresh','ActSeq_Inject_AnimationEnd','move','isTpbReady','RdKYZ','TimeScale','updateStyleOpacity','BARE\x20HANDS','VjQpZ','reserveCommonEvent','<CUSTOM\x20ACTION\x20SEQUENCE>','PgEYO','CriticalDmgFlat','TJpqD','deadMembers','EuKoW','ScaleY','LIGHT','clearTargetBattlerKey','damageStyle','ActSeq_Impact_ShockwavePoint','updatePhase','isMagicSkill','basicGaugesY','Game_Interpreter_PluginCommand','skillItemWindowRectBorderStyle','playOnceParallelTroopPage','setBattleCameraOffset','ShowAddedBuff','list','VariableHeal','stepBack','ShuffleArray','worldTransform','Game_Battler_performActionStart','damageRate','ActSeq_Movement_WaitForMovement','waitForJump','_eventId','dead','Spriteset_Battle_updateActors','cJBDZ','battleEnd','hhkgt','iUxJI','XDPdC','hRGZZ','wGNbo','helpWindowRect','changeBattlerOpacity','EVAL','updateBattleBalloons','expTotal','ActSeq_Target_NextTarget','drain','Game_Map_setupBattleback','ActSeq_Impact_ShockwaveEachTargets','iOzTl','BattleStartEvent','setValue','RlrhT','SULYs','Wrnud','performCollapse','commandStyle','GhFsk','yyWlT','BattleManager_onEscapeSuccess','ArPenRate','asKqD','setup','getItemDamageAmountTextOriginal','setBalloonPose','FlashColor','round','ActSeq_Impact_BlueRedInvert','Game_Action_itemEffectAddAttackState','updateShadow','gJMGv','setSkill','parameters','TXOAi','bind','swapEnemyIDs','createBorderStylePortraitSprite','gainHalfActionsPTB','eTpEm','onTurnEnd','CheckSkillCommandShowSwitches','yVqnA','wwIBW','setActiveWeaponSet','ActSeq_Animation_ItemAnimation','jbjCc','svBattlerData','Kkgzz','mainSpriteHeight','YIaXC','NCHgV','HomePosJS','performJump','troop','ANGLE','jtbMQ','lFPsu','ActSeq_Motion_ClearFreezeFrame','remove','Scene_Map_initialize','xbBOW','VisuMZ_2_WeaponSwapSystem','battleProjectiles','isAlwaysVisible','addWindow','wtLSp','OzSKZ','CriticalHitFlat','activate','wMMtt','cancelTargetSelectionVisibility','tPeHQ','drawItemImageListStyle','bCutv','ActorOffsetX','parallaxScrollY','WTYOl','Window_BattleLog_performMiss','_buttonKey','MOTIONS','Targets1','updateFrame','isPhysical','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','KtXRf','UBmXS','isBypassDamageCap','nfMiq','createBattleField','EEVFV','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','parallaxScrollYinvertEnemy','Damage','_stateSprite','startGrow','Targets2','pattern','onGrowEnd','KWmqv','_reflectionTarget','oDvdX','hCYmM','ActSeq_Camera_Offset','selJt','resizeWindowBorderStyle','guardSkillId','sliceMax','ActSeq_BattleLog_PopBaseLine','battleCamera','ENEMY_OFFSET_Y','ActSeq_Animation_BalloonIcon','SkillID','oZMvI','cKcfr','addChildAt','Game_Battler_onBattleEnd','addChildToBack','BattleManager_startAction','faceWidth','ATAHL','ActSeq_BattleLog_UI','FaceDirection','fCNOU','Window_BattleLog_performEvasion','setBackgroundType','adjustPosition_1for1','_growY','tpbActorSwitchConditionsMet','startOpacity','jZRQB','VisuMZ_4_CombatLog','llsgq','_skillWindow','shadow','PopupPosition','_backAttachmentSprite','retreat','wait','processRefresh','stepForward','XUnWC','HpGaugeOffsetX','extraPositionX','StatusWindowSelectableBackHide','Window_BattleActor_processTouch','WaitForMovement','ActSeq_Motion_MotionType','value1','checkExtendTroopCompatibility','clearForcedGameTroopSettingsBattleCore','Targets','jsScaleToFit','Scene_Battle_commandFight','qvKve','lastBattleSkill','NameOffsetY','isFTB','ActSeq_Animation_PlayAtCoordinate','slice','ParseItemNotetags','lukEffectRate','CastAnimation','PostEndTurnJS','pages','TPB','updateStateSpriteBattleCore','_flashDuration','command3011','head','aJvon','alzRb','_enemyMultiTargetWindow','_weather','VisuMZ_3_ActSeqImpact','KnMzU','IAuVE','createBattleUIOffsetY','isCurrentItemEnabled','autoBattle','HelpOptions','startActorCommandSelection','xNEcN','mmp','ActSeq_Projectile_Picture','VisuMZ_3_BattleVoices','ArqNA','_forcing','drawItemStatus','AsTarget','UmlLg','1277325MUWEtY','Window_BattleLog_performCounter','updateHomeMove','Exploited','_targetFloatHeight','battlelog','canEscape','UNTITLED','selectAllEnemies','makeActionListAutoAttack','onDisabledPartyCommandSelection','Index','LvWye','Window_SkillList_maxCols','PrRFn','WFqOf','displayType','Window_PartyCommand_initialize','priority','die','xWeVR','AutoBattleRect','isForRandomBattleCore','JS\x20BATTLE\x20VICTORY','Scene_Battle_terminate','evHuU','return\x200','CmdIconFight','actorCommandSingleSkill','createBattleBalloon','Spriteset_Battle_createBattleField','SkewX','createStateSprite','drawItem','isItem','cutinExit','ShowFacesListStyle','forceMotion','TpGaugeOffsetY','removeBuff','AmGUh','split','updateCustomActionSequence','parent','isOpen','createAnimationContainer','AllEnemiesText','HMwrP','buffRemove','_animationSprites','_activeWeaponSlot','GymTl','updateShadowScale','TargetLocation','yfKNv','yaSkD','updateStateSprite','addSkillTypeCommand','startWeaponAnimation','selectLast','IbPss','kTmQO','sleep','EnemyOffsetY','jNIsU','ZqMtl','_hpGaugeSprite','switchToWeaponType','drawTextTopAligned','Parse_Notetags_Action','dBxzg','DGeUm','shouldPopupDamage','textBaseline','SmoothImage','ActSeq_Grid_AnimationIDAtNode','StyleOFF','canAttackBattleCore','damfx','XzTrG','parallaxHueEnemyModifier','EmVmj','%1Event','formula','Mirror','CphMz','ActSeq_Zoom_WaitForZoom','_target','growBattler','applyHardDamageCap','redraw','ActSeq_Mechanics_BoostPointsChange','CuVFZ','ActSeq_Mechanics_TextPopup','XqssT','ActSeq_Grid_AddPassiveStatesToNode','endIcon','Sprite_Weapon_loadBitmap','Window_Options_addGeneralOptions','DamageDisplay','ActSeq_Impact_MotionBlurTarget','clearMotion','vVhNk','registerDefeatedEnemy','_cursorArea','xKZLG','currentAction','svAnchorX','processBattleCoreJS','forceEscapeSprite','BULB','UBqen','GkpFV','bMdQs','BBBnF','xRGqL','_battleField','ShowCurrentState','nOOPt','getMenuImage','Sprite_Animation_targetSpritePosition','MAXMP','onEnemyOk','command236','BattleManager_checkSubstitute','_targetAngle','icon','width','nELRQ','isActiveTpbReady','DCGLr','top','addSingleSkillCommand','addMeleeReturnActionSet','PopupDuration','statusWindowRectDefaultStyle','freezeMotion','Game_Battler_onBattleStart','_targetHomeY','OffsetX','IconIndex','addEscapeCommand','usePremadeActionSequence','onBattleEndBattleCore','GfhpZ','contains','Game_Action_itemTargetCandidates','iconWidth','addGuardCommand','damageOffsetY','DamageFlat','time','Game_Action_isForFriend','performCounter','targetDistortionSpritePosition','onSkewEnd','ISqAd','arRedFlat','_buttonText','refreshCursor','dimColor2','112683cyzgYs','jsOneForOne','AvmPV','getBattlerFromKey','isSubjectValidForAnyoneSelect','isETB','uiInputPosition','ActSeq_Grid_AddTriggerToNode','UUaJO','maxItems','YsUiK','MANUAL','Vuwia','ActSeq_Horror_Clear','Filename','RBIrZ','Window_BattleLog_displayFailure','OzIAB','isForAnyoneFocusFriends','isForFriend','isTurnBased','performActionEnd','PerformAction','_jumpWholeDuration','eByQS','_totalValue','performMoveToTargets','canAlterActionCostPTB','Wave','Bkjxa','addSkillCommands','LTxnq','gsBVo','Users','shift','jFrRc','addExtendedTroopMembers','prepareCustomActionSequence','BluRu','removeChild','createInnerPortrait','uhqnq','CalcEscapeRaiseJS','cutinEnter','lineRect','adjustFlippedBattlefield','Sprite_Battler_initMembers','XlaPg','onJumpEnd','ICIko','spriteId','hpDamageFmt','Sprite_StateIcon_updateFrame','setupIconTextPopup','AnimationID','ActSeq_Grid_TraverseToNode','_skewY','Skill-%1-%2','isChanting','isDuringNonLoopingMotion','lotXI','windowskin','Game_BattlerBase_eraseState','alive\x20opponents\x20not\x20target','createActionSequenceProjectile','visible','UwZTt','327444LvKYis','doesPageHaveOnceParallelStart','_enemyWindowMode','reduce','YRVIT','%1Damage%2JS','mpDamageFmt','Game_Battler_clearMotion','_lastRegenFrameCount','lzVUX','selectNextActor','isForRandom','_forcedHomeX','rZuDV','Game_BattlerBase_addNewState','CurrentTurn','_distortionSprite','actorCommandEscape','itemEffectGainTp','_dragonbonesSpriteContainer','paySkillCost','awnhS','JIWxB','changePaintOpacity','actor','AwaPF','Window_BattleLog_performDamage','_actorMultiTargetWindow','gainCurrentActionsFTB','battleStatusSprite','isSkewing','ActSeq_Motion_WaitMotionFrame','itemEffectRecoverMp','silentHomeMove','NUM','getBattlePortraitOffsetX','_homeWholeDuration','finishActorInput','getCommonEventIdWithName','itemTextAlign','Interrupt','WaitCount2','YlPiq','swing','changeBattlebacks','extendTroopMembers','%1Apply%2JS','ALL\x20SKILLS','displayCounter','BattleManager_onEncounter','vTZEL','repositionEnemiesByResolution','CmdStyle','MaxLines','applyTargetFilters','targetBattlerContainerOpacity','transform','battleBalloon','hiuzV','thrust','SwitchMissEvade','_effectType','ERdVH','_targetIndex','yEKSc','updateEffectsContainer','setHelpWindowItem','setupShockwaveImpactFilter','_cacheTextWidth','WqHVN','Game_BattlerBase_refresh','ZXDTc','isFightCommandEnabled','GoeUA','waitForAnimation','createTroopNote','commandStyleCheck','isEnemy','Game_Action_isForRandom','invokeAction','isTriggered','NFBJq','setFrame','dying','_commonEventQueue','_phase','createAutoBattleWindow','loadEnemy','mEfpU','commandName','getChildIndex','JS\x20BATTLE\x20DEFEAT','_createEffectsContainer','isActiveTpb','createEffectActionSet','applyFreezeMotionFrames','Window_ActorCommand_initialize','SmjCh','WmySw','ActSeq_Movement_WaitForOpacity','_commonEventIDs','lJkwc','_updateCursorArea','setBattlePortrait','PrioritySortActors','cXMpP','setHue','ShowMpDmg','Duration','ActSeq_Mechanics_WaitForEffect','isTpbCharged','VarianceFormulaJS','min','isBattleMember','%1StartBattleJS','Linear','ejuQP','updateOnceParallelInterpreters','extraHeight','itemRect','setEnemyWindowMode','startInput','ScaleUp','HyRne','_weaponSprite','STSUE','utGDF','dNZsm','adjustPosition_ScaleDown','ActionStart','Strength','findIndex','onStaticEnemyBitmapLoad','Sprite_Damage_createChildSprite','updateHpGaugePosition','resetTextColor','performAction','WaitForAnimation','XPActorDefaultHeight','commandNameWindowDrawText','battleCoreResumeLaunchBattle','ActSeq_Horror_TVCreate','ecXKB','_character','Radius','_attackAnimationId','tDEDv','onBattleStart','status','ActSeq_Grid_MoveTargetsInDirection','isCommonEventReserved','_autoBattle','setBattlerBattleCore','Game_Interpreter_command301','tpbCommandFight','PartyCmd','NrebP','KKkzQ','command357','shouldDisperseDamage','ActSeq_Movement_HomeMoveToTarget','_enemyIDs','hpRate','startSpin','front\x20base','performAttackSlot','setSubject','TextFmt','PreApplyJS','bIKRq','setupNegativeImpactFilter','SkillItemMiddleLayout','message1','getFullActionsPTB','glitch','isAnyoneGrowing','BattleManager_endBattle','setActionState','StyleName','join','ActSeq_BattleLog_WaitForNewLine','emulateAction','CHLnn','isNonSubmenuCancel','eraseState','skill','performMoveToPoint','Sprite_Battler_setBattler','Scene_Battle_logWindowRect','applyAngleChange','QEtDE','displayChangedStates','\x20to\x20%1\x20midbattle.','DisplayAction','addCustomCommands','ConvertCount','isDebuffAffected','_tpbState','ActSeq_Mechanics_AddState','TextAlign','_shadowSprite','bitmap','all\x20actors','autoBattleStyle','nbMFa','ActSeq_Impact_TimeScale','_regionBattleback1','MUSIC-NOTE','veFWr','hpDamage','restore','collapseType','aQAXi','IrfEi','ejlxy','updateSkew','SceneManager_push','hewRc','zEjgM','addOptionsCommand','createActors','NOTE','addState','show','processExtendTroopMembers','FWsDW','UadQx','HpGauge','JkchY','VisuMZ_2_BattleSystemCTB','processDefeat','addBattleCoreAutoBattleStartupCommand','BattleLog','initElementStatusCore','Window_BattleLog_refresh','createDamageContainer','parallaxHue','Window_BattleLog_displayMpDamage','qojPd','ksDhf','QSCWs','center','ZvvGC','animation','TextColor','bTsvw','fODAe','pha','_dimmerSprite','AddHpGaugeOption','push','_angleRevertOnFinish','missed','windowPadding','makeUniqueNames','UXBfQ','ActSeq_Grid_RemoveTriggerFromNode','isPartyCommandWindowDisabled','setupTextPopup','DistanceX','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','createHelpWindowBattleCore','isTpb','SHOW_BUTTON','ITAkg','clearActiveWeaponSet','_surprise','initBattlePortrait','_growEasing','canAttack','occasion','PflSs','WapZx','StatusWindowAttachmentFront','DoiDP','moveToStartPositionBattleCore','Scene_Battle_startPartyCommandSelection','negativeLifeSteal','BattleManager_inputtingAction','KdVyV','_homeEasing','JaBff','addAttackCommand','autoSelectPriority','Scene_Battle_commandEscape','RvNWv','isSpriteVisible','WJvFN','UlumO','yfzhR','processAnimationRequests','getDualWieldTimes','CmdIconAutoBattle','Game_Temp_requestAnimation','aGscF','isAnimationShownOnBattlePortrait','getHalfActionsPTB','ActSeq_Mechanics_RemoveBuffDebuff','actor%1-portrait','aCYfe','jWRYq','StateIconOffsetY','lAnjl','ntzhd','TVBpE','nELhr','Game_Battler_performDamage','HelpSkillType','LzXnp','_floatWholeDuration','kJqoZ','height','setImmortal','_isBattlerFlipped','startTurn','Game_Actor_equips','TJtNx','opponentsUnit','cancelButtonText','Game_Temp_requestBalloon','displayEvasion','ZfydN','applyForcedGameTroopSettingsBattleCore','ActSeq_Grid_AnimationJsAtNode','Game_Action_applyGlobal','ActSeq_Horror_NoiseRemove','ZjxSo','ActorCmd','alignBattleCoreDamageSprite','VisuMZ_2_AggroControlSystem','commandFight','SkillItemBorderCols','moveBattlerDistance','sraNp','onEscapeFailure','Sprite_Enemy_updateBossCollapse','findSymbolExt','turnCount','updateStateIconSprite','isSelected','visibilityState','visualCutinPortraitHue','createUIContainer','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','Game_Action_needsSelection','_motionCount','ActSeq_Movement_Float','itemEffectAddAttackState','USER-DEFINED\x204','_effectsContainer','AniDuration','isOnCurrentMap','Game_Interpreter_updateWaitMode','stypeId','IIVnj','Sprite_Enemy_updateCollapse','auto','resetBreakShield','WaitForJump','Scene_Battle_createEnemyWindow','createChildSprite','isOptionsCommandAdded','isFloating','_battlerName','snapForBackground','ActSeq_Movement_FacePoint','addDebuff','battlerShadowScaleY','alterType','inHomePosition','Game_BattlerBase_isStateResist','setMoveEasingType','_lastAction','fEowK','CmdTextAlign','isStatusAffected','_actorCommandWindow','_damagePopupArray','process_VisuMZ_BattleCore_Action_Notetags','FlinchDistanceX','updateInterpreter','ActSeq_Projectile_Icon','USER-DEFINED\x205','Window_BattleEnemy_hide','MjPZA','messageSpeed','BaseTroopIDs','Skills','MaLjY','ConvertActionSequenceTarget','Rate','Game_Action_makeTargets','targetActionSet','Vbozs','RegExp','Scene_Battle_startActorCommandSelection','performReflection','makeHpDamageText','missle','skillId','BattleManager_endAction','isBTB','okButtonText','ActSeq_Element_ForceElements','ActSeq_Impact_ColorBreak','Sprite_Actor_initMembers','alive\x20battlers\x20not\x20target','ActSeq_Mechanics_PtbConvert','isForFriendBattleCore','tone','FUNC','EJWdB','alive\x20actors\x20not\x20target','TpbGaugeOffsetY','customDamageFormula','compareEnemySprite','parseLocalizedText','ITEM','trueRandomTarget','vSpBW','+%1','waitCount','ZBaNw','_actorWindow','cameraClamp','updateBossCollapse','startJump','lineHeight','damage','MpGaugeOffsetX','iTiyO','criticalHitFlat','not\x20focus','ActSeq_DB_DragonbonesMotionAni','encounterList','VDdaS','attackAnimationId1','recoverAll','sRXsB','makeBattleCommand','GyLRC','isBattlerGrounded','eoRvn','Sprite_Actor_createStateSprite','ACDEu','QUESTION','zYROJ','select','isSkipPartyCommandWindow','fdLDp','addedDebuffs','mUgdj','Variable','chyAC','AnchorX','JSON','text','CoreEngine','VisuMZ_3_BoostAction','createDigits','getColor','isTpbMainPhase','base','applyDamageCaps','joMMb','isSceneChanging','VisuMZ_4_IconBalloons','MultiTarget','BattleManager_startInput','Angle','GuBSQ','isAlive','gbyxI','isAffectedByBreakShield','ptUyC','addImmortal','MAT','isBuffAffected','vphLC','PostApplyJS','isPreviousScene','isSkillItemWindowsMiddle','requestMotion','fbwVv','gainTp','missile','HHOCm','ActSeq_Camera_WaitForCamera','...','isForOpponent','setBattlerFlip','VKOqe','random','kjlSO','Scene_Battle_onEnemyCancel','setText','TDPQf','rVwgW','performActionMotions','WxCZk','_updateClientArea','AutoBattleOK','WaitCount1','DigitGrouping','Scene_Options','applyCritical','isAnyoneMoving','allBattleMembers','ActSeq_Animation_ShowAnimation','Game_Battler_performMiss','rowSpacing','loadBattleback2','nxKdJ','ActSeq_Movement_WaitForJump','_endBattle','STB','ActSeq_Movement_Skew','Enable','updateForceAction','applyGlobalCommonEventNotetags','COTJO','DTB','_forcedHomeY','CalcEscapeRatioJS','addBattleCoreAutoBattleStyleCommand','updatePositionBattleCore','commandSymbol','lByzo','RiywJ','ActionCenteredName','revertTpbCachedActor','CqrsM','applyEasing','addSingleSkillCommands','performTpbActiveCheckSwitch','muHrq','_shake','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','Sprite_Battler_damageOffsetY','preemptive','StatusWindowSkinHide','border','some','removeChildFromUiContainer','isFriendly','_enemies','Window_BattleLog_popupDamage','origin','MotionSpeed','performCastAnimation','VisuMZ_3_FrontviewBattleUI','ShowCounter','refreshStatusWindow','RtSCJ','\x5cI[%1]%2','USER-DEFINED\x202','mYDTb','timeScale','makeTargetsBattleCore','ActSeq_Mechanics_StbExtraAction','vfoMK','attack','FlashDuration','createMultiTargetWindows','_animationCount','IOkbn','rHgay','ActSeq_Mechanics_EmulateSkillEffect','loop','bossCollapse','damageFlat','SdPpy','_battlePortrait','autoSelect','_doubleTouch','isValid','wtypeId','_frontAttachmentSprite','itemHeight','clearFreezeMotionForWeapons','addActor','isCharging','_partyCommandWindow','ActSeq_Mechanics_CtbSpeed','removeBuffsAuto','ActSeq_Skew_WaitForSkew','FBszK','commandRemember','_enemyWindow','ActSeq_Mechanics_OtbOrder','AllActorsText','updateMotionCount','ActSeq_Movement_MoveToPoint','EvIdt','_lastHpDamage','Post','fibHr','Game_Interpreter_terminate','setupChild','ActSeq_Mechanics_ActionEffect','emulateActionEffect','itemCri','isSideView','canGuardBattleCore','tLeTp','nhEfu','STYPES','LlJRs','getBattlerKeyTargets','updateEffectContainers','_actionInputIndex','setHelpWindow','zJhiH','QWwst','_stypeIDs','skew','qVPjh','hasStaticSvBattler','floor','mHJmv','WIDTH','Game_Battler_startTpbTurn','finalizeScale','ZQQYD','options','bKsyM','ActionEnd','_targetBattlerKey','ActSeq_Impact_TimeStop','isBattleFlipped','nyHGZ','equipSlots','Bcnok','JS\x20%1START\x20ACTION','numRepeats','arPenRate','Game_Action_isForOne','statusWindowRect','ENEMY_OFFSET_X','BattleManager_checkBattleEnd','UiCev','callOkHandler','applyGlobal','BattleVictoryJS','ZsXwq','_inputting','emerge','isGuard','YSptp','Height','battler','ActSeq_Grid_RemovePassiveStatesFromNode','ktsno','ALL_ACTORS','createString','WaitForScale','eygjQ','BattleAI','_shakeFlinchPower','ACTOR_OFFSET_Y','isAnyoneJumping','QVOGe','applyBattleCoreJS','ActSeq_Movement_MoveBy','PARTY','startAction','setBattlerFacePoint','portraitType','isImmortal','FRUSTRATION','isNextScene','helpWindowRectBorderStyle','_battleCoreNoElement','NewPopupBottom','itemLineRect','Window_BattleLog_displayTpDamage','RzkpZ','MUSIC\x20NOTE','lbuDz','traitSet','Setting','XjnVY','process_VisuMZ_BattleCore_Notetags','updateEvent','clearOnceParallelInterpreters','validTargets','_multipliers','CwLmm','addDamageSprite','Game_Action_setGuard','finishActionSet','selectPreviousCommand','ActSeq_Grid_TeleportToNode','isForAll','Window_BattleStatus_drawItemImage','ActSeq_ChangeAngle','addCombatLogCommand','VisuMZ_3_SideviewBattleUI','PChNr','battleSpin','onBattleEnd','PostApply%1JS','_opacityDuration','battleSys','LUK','vIeRI','svBattlerAnchorX','ActSeq_Grid_ActionAnimationAtNode','TpbActiveChangeEnabled','addTextToCombatLog','AIRGA','CriticalHitRateJS','_weaponImageId','oxvgb','alterPriority','Game_Action_numRepeats','alterChange','MCXNZ','AIAJx','_visualHpGauge_JustDied','VisuMZ_2_PartySystem','_makeFontNameText','HITTYPE_PHYSICAL','xLYAy','fJkXG','gainMp','CriticalHitMultiplier','launchBattle','zuoKk','refreshRequest','ResetFocus','_skewDuration','PreEndTurnJS','GRID\x20MOVE','COMBATLOG','svAnchorY','hide','ugtyR','actorCommandAutoBattle','Item-%1-%2','setHalfActionsPTB','_motionType','removeDamageSprite','DamageStyles','DistanceAdjust','updateBitmap','CastMagical','displayActionResults','TP_Rate','NameAlwaysVisible','abort','QRmHg','isDTB','updateAction','applyResultSwitches','waitForFloat','_targetSkewX','_forcedBattlers','_executedValue','stbGainInstant','initMembers','Game_Actor_setup','Zqjhz','qSWyf','ActSeq_Mechanics_EmulateSkillCost','xzgxE','blockWidth','ShowAddedState','upLaI','Sprite_Actor_moveToStartPosition','tevlE','resetResultSwitches','cJGtA','_enemy','SkipPartyCmd','LhxhZ','_preemptive','clear','ShowCosts','BPpfc','itemHit','ActSeq_Animation_BalloonIconSpecific','freezeFrame','Frame','Window_BattleLog_performMagicEvasion','escape','setStateTurns','isMagical','NameAlwaysHidden','trim','_targetHomeX','PointJS','MpGaugeOffsetY','itemLifeStealRate','registerCommand','Scene_Battle_createActorCommandWindow','_autoBattleWindow','AutoAddState','removeAnimation','FxszN','Scale','NfBOe','_floatEasing','autoSelectLastSelected','qrSxs','displayMiss','walk','kKucX','pauseInjectAnimation','_executeHpDamage','parseForcedGameTroopSettingsBattleCore','PostDamageAsUserJS','updateCancel','clearWeaponAnimation','_emptyBitmap','destroy','_requestRefresh','charged','_selectionEffectCount','GRBKa','pMLMv','CounterPlayback','PostDamageAsTargetJS','process_VisuMZ_BattleCore_CreateRegExp','Sprite_Enemy_update','statusWindowRectXPStyle','isInputting','visualCutinPortraitType','gWHWd','isMoving','item','CmdIconItem','rOhJN','ActSeq_Mechanics_BtbGain','znsua','delay','surprise','SydGN','battleStatusWindowAnimationContainer','BG_TYPE','fontSize','LIGHTBULB','BattleGridSystem','enemyNames','isRightInputMode','charging','ActSeq_BattleLog_Refresh','BattleManager_startTurn','ActSeq_Grid_AnimationTypeAtNode','isSTB','message4','VoiceLineType','ApplyImmortal','gXyRc','process_VisuMZ_BattleCore_Failsafes','gaugeX','FjMms','frontview_ui','dVWyN','_motionSpeed','BattleLayout','ddXpW','rYrYa','Sprite_Enemy_setHue','ActSeq_Mechanics_BoostPointsStoreData','requestPointAnimation','anchor','_createDamageContainer','nGWBx','Turns','removedBuffs','Destination','VsECH','pBWMp','hue','Sprite_Battler_updateMain','friendsUnit','updateShadowVisibility','BattleManager_makeActionOrders','text\x20target','AutoNotetag','ActSeq_Movement_HomeMoveBy','BattleManager_processAbort','GUARD','NyWZN','numTargets','substitute','ALL_ENEMIES','startShakeFlinch','ActSeq_Mechanics_ArmorPenetration','displayBattleCoreTransitionErrorMsg','isForAliveFriend','Letter','softDamageCap','buffAdd','All\x20Enemies','addBattleGridMoveCommand','ZSbRY','VnkTY','UrTPD','isForAnyoneFocusOpponents','portraitFilename','Amp','_allTargets','Sprite_Actor_setActorHome','WaitForNewLine','displayCritical','QNEvs','Scene_Battle_createHelpWindow','YQRIC','ActSeq_Movement_Jump','lnQym','VisuMZ_0_CoreEngine','requestBattleBalloon','placeStateIcon','isHidden','UEADI','needsSelection','SvWeaponMass-%1-%2','drawEnemyName','setLastBattleSkill','getItemDamageAmountTextBattleCore','_drawTextOutline','StatusWindowSkinFilename','mJCQK','contents','EndBattlePopups','removeOnceParallelInterpreter','PreEndActionJS','Scene_Battle_createPartyCommandWindow','dQoWn','includes','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','max','updatePointAnimations','tNpOP','commandEscape','Epxlk','isAnyoneInjectAniPrepping','XaaCS','ActSeq_Mechanics_AtbGauge','LOVE','mxqMN','AsUser','isConfused','process_VisuMZ_BattleCore_CommonEventKeys','alterActionCostPTB','INvLG','isUndecided','PostApplyAsUserJS','_battleCoreBattleResumeAfter','changeCtbChargeTime','ReflectAnimation','VisuMZ_3_ActSeqCamera','mSegn','IconStypeMagic','updateAttachedSprites','ActSeq_Mechanics_StbExploit','Enemy-%1-%2','XtIGz','wTVrk','getWtypeIdWithName','ActSeq_Mechanics_PtbAlterCost','ItemID','angleDuration','XwsJf','windowAreaHeight','skewBattler','applyGuard','NameAlwaysSelectOnly','MotionIdle','processPostBattleCommonEvents','kZZYJ','wzxCO','openBattleActorWindow','performActionEndMembers','Intensity','battleInjectPrep','needsSelectionBattleCore','SILENCE','updateBattlebackBitmap2','BVUvQ','dataId','Sprite_Battler_isMoving','#%1','setupBattleCore','processVictory','isCustomActionSequence','autoMeleeMultiTargetActionSet','HitRate','_frame','isDying','_forcedBattleLayout','VisuMZ_1_MainMenuCore','QFhck','processAbort','svActorHorzCells','lifeStealRate','SideviewSelect','drawTextEx','FDJyA','htEVR','CommandWidth','toUpperCase','performFlinch','atbInterrupt','kwkuZ','_shadowScaleY','OwRuS','ActSeq_BattleLog_DisplayAction','mainSprite','clearDamagePopup','PostStartActionJS','selectNextCommand','setActiveWeaponSlot','updatePosition','pVfXg','equips','+%1\x20MP','updateUiContainerPosition','COMBAT\x20LOG','CheckActSeqProjectileVersion','randomInt','type','bUEgf','faceRect','Window_BattleEnemy_show','font','displayReflection','addStateTurns','weaponImageId','clearElementChanges','Game_Action_setAttack','removeAnimationFromContainer','_back1Sprite','ActSeq_Mechanics_AddBuffDebuff','ActionSequence','_motion','_jumpMaxHeight','mOeVE','qvPGc','abLJh','ZOxjv','attackMotions','displayHpDamage','skillItemWindowRectMiddle','updateStart','closeBattleActorWindow','adjustPosition_ScaleToFit','NMpmH','ANNOYED','gwMzv','PZOXV','Override','drawActorFace','xOWck','WaitForExit','OlBtg','commandAutoBattle','lqBGj','ActSeq_Mechanics_Immortal','dvACs','Scene_Battle_selectNextCommand','onMoveEnd','Sprite_Battler_setHome','StateIconOffsetX','drawItemImagePortraitStyle','oMfdG','addCommand','BindCommonEventKeysForGroup','_list','createPartyCommandWindow','WaitComplete','hitRate','VisuMZ_2_BattleSystemATB','value2','autoBattleAtStart','_interpreter','cFnBU','_endingBattle','_currentAngle','alphabetic','eKJrQ','Window_BattleLog_performRecovery','requestRefresh','FullActions','ext','effect','setBattler','createAllWindows','NameAttachStateIcon','onDatabaseLoaded','callOptions','GetActionSequenceSpecialTargetWithFlags','_text','getConfigValue','XZLsB','_defeatedEnemies','XfKyE','autoBattleWindowRect','setupZoomBlurImpactFilter','casting','_armorPenetration','isItemCommandEnabled','KPsIM','lastFilename','VisuMZ_2_DragonbonesUnion','ActSeq_Set_WholeActionSet','MIN_SAFE_INTEGER','PreStartTurnJS','rkolG','disarmHpLifeSteal','_targetSkewY','calcWindowHeight','boxWidth','_targetGrowX','undecided','ActSeq_Animation_ShowAnimationJS','frameCount','ESCAPE','isAppeared','turnOrderChangeOTB','isHiddenSkill','_wtypeIDs','soudC','_preBattleCommonEvent','dead\x20actors','_lines','UGPds','pop','anchorX','animationShouldMirror','NbxPm','AutoBattleCancel','isFastForward','speed','setTroopPage','Sprite_Actor_setBattler','ujsSh','flipVisualCutinVert','performMagicEvasion','Game_Action_isForOpponent','ParseActorNotetags','value','wfHwn','hJxGs','StartTurnWait','maxLines','sideview_ui','BTestBypass','bottom','replace','jePxO','isForOne','IconSet','SkillsStatesCore','autoBattleStart','canGuard','ActSeq_Grid_ClearPassiveStatesFromNode','Scene_Battle_startEnemySelection','ActSeq_Element_AddElements','CreateCutinSettings','Game_Troop_expTotal','process_VisuMZ_BattleCore_TraitObject_Notetags','canMove','getItemDamageAmountLabelOriginal','battleVoices','_index','magicSkills','changeAtbCastTime','SwGMR','xOLbs','findTargetSprite','ToPmV','isAnyoneFloating','battleCommands','anchorY','PBLcS','onBattleStartBattleCore','CommandAddAutoBattle','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','QimrU','updateOpacity','createCommandVisibleJS','createMultiTargetWindow','TpbGaugeOffsetX','stop','_helpWindow','removeBattleBalloon','frontviewSpriteY','updateWeather','repositionCancelButtonBorderStyle','checkAutoCustomActionSequenceNotetagEffect','skillWindowRect','Buffs','removeState','BattleLogRectJS','performRecovery','Game_Action_isForAll','ParseStateNotetags','battleCommandIcon','ActSeqProjectiles','battleAnimation','debuffAdd','stopInjectAnimation','_createCursorArea','nJejd','displayAffectedStatus','setGuard','makeCommandList','WaitForAngle','bFtqt','canSingleOrMultipleSelect','MMqcl','qqCJW','_skewEasing','isPlaying','PreEndBattleJS','Window_BattleLog_displayCurrentState','opacity','maxCommands','Scene_Map_initializeAfter','ActSeq_Mechanics_PtbFullHalfAction','actionEffect','getLastHpDamage','Spriteset_Battle_update','ActSeq_Animation_AttackAnimation2','UHDwI','guardMpLifeSteal','ePrnZ','command119','WcJVp','dowyZ','SlotID','cancelHpLifeSteal','scope','currentValue','removeActor','Sprite_Actor_updateFrame','Sprite_Battler_startMove','makeDamageValue','rYjmX','makeSuccess','canInput','startInjectAnimation','VisuMZ_2_BattleSystemPTB','setupActionSet','ChangeOrderBy','Sprite_Enemy_updateStateSprite','RFEiL','Game_Action_isForDeadFriend','<CENTER>%1','clearAllVisualCutins','updateShakeFlinch','animationNextDelay','SvMotionIdleSolo-%1-%2','qVidQ','battleUIOffsetY','jVjhh','ActSeq_BattleVoice_PlaySpecialLine','zoomDuration','PoqFu','WpPWG','1049505iKNvbi','jWtkC','startTpbTurn','damageContainer','mainSpriteScaleX','906772hIsfrG','BackColor','inputtingAction','hitIndex','_indent','SkillItemStandardCols','LastSelected','Game_Party_addActor','drawItemStyleIcon','battlerSmoothImage','guardLifeSteal','vKJPT','SyncBuffExpire','VisuMZ_2_BattleSystemBTB','Scene_Battle_helpWindowRect','processBorderActor','nLxGH','OhEfU','singleSkill','isChangingOpacity','SKPWp','Scene_Battle_stop','targetSpritePosition','WindowWidth','Game_Map_battleback2Name','_tempBattler','Game_Action_executeHpDamage','executeMpDamage','refreshMotion','LifeStealRegExp','meetsSelectFrontviewActorConditions','length','createContents','MUSIC','PrioritySortActive','EnemyOffsetX','startDamagePopup','ActSeq_Mechanics_StateTurnsChangeBy','setupWeaponAnimation','CalcActionSpeedJS','ActSeq_Movement_WaitForScale','PNPkP','Game_Party_removeActor','prepare','avYKX','command283','EXLiy','isBorderStylePortraitShown','PostStartTurnJS','ULaVC','#ffffff'];_0x21ac=function(){return _0xa16ad3;};return _0x21ac();}var label=_0x5c342f(0xca2),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x5c342f(0x3cd)](function(_0x57aea9){const _0x481dfb=_0x5c342f;return _0x57aea9[_0x481dfb(0x7dd)]&&_0x57aea9['description'][_0x481dfb(0xaec)]('['+label+']');})[0x0];VisuMZ[label][_0x5c342f(0xc90)]=VisuMZ[label][_0x5c342f(0xc90)]||{},VisuMZ[_0x5c342f(0x2ee)]=function(_0x54c3b7,_0x1a04f9){const _0x3f24e1=_0x5c342f;for(const _0x491238 in _0x1a04f9){if(_0x491238[_0x3f24e1(0xcbd)](/(.*):(.*)/i)){if('InLyl'==='InLyl'){const _0x28ebcc=String(RegExp['$1']),_0x23d1e4=String(RegExp['$2'])['toUpperCase']()[_0x3f24e1(0xa5e)]();let _0x19b2b5,_0x19d2ce,_0x20585c;switch(_0x23d1e4){case _0x3f24e1(0x76b):_0x19b2b5=_0x1a04f9[_0x491238]!==''?Number(_0x1a04f9[_0x491238]):0x0;break;case _0x3f24e1(0xcb1):_0x19d2ce=_0x1a04f9[_0x491238]!==''?JSON[_0x3f24e1(0xda6)](_0x1a04f9[_0x491238]):[],_0x19b2b5=_0x19d2ce[_0x3f24e1(0xd08)](_0x82e74e=>Number(_0x82e74e));break;case _0x3f24e1(0x5a9):_0x19b2b5=_0x1a04f9[_0x491238]!==''?eval(_0x1a04f9[_0x491238]):null;break;case'ARRAYEVAL':_0x19d2ce=_0x1a04f9[_0x491238]!==''?JSON['parse'](_0x1a04f9[_0x491238]):[],_0x19b2b5=_0x19d2ce[_0x3f24e1(0xd08)](_0x1916be=>eval(_0x1916be));break;case _0x3f24e1(0x910):_0x19b2b5=_0x1a04f9[_0x491238]!==''?JSON[_0x3f24e1(0xda6)](_0x1a04f9[_0x491238]):'';break;case _0x3f24e1(0x309):_0x19d2ce=_0x1a04f9[_0x491238]!==''?JSON[_0x3f24e1(0xda6)](_0x1a04f9[_0x491238]):[],_0x19b2b5=_0x19d2ce[_0x3f24e1(0xd08)](_0xa643ab=>JSON['parse'](_0xa643ab));break;case _0x3f24e1(0x8e3):_0x19b2b5=_0x1a04f9[_0x491238]!==''?new Function(JSON[_0x3f24e1(0xda6)](_0x1a04f9[_0x491238])):new Function(_0x3f24e1(0x67f));break;case'ARRAYFUNC':_0x19d2ce=_0x1a04f9[_0x491238]!==''?JSON[_0x3f24e1(0xda6)](_0x1a04f9[_0x491238]):[],_0x19b2b5=_0x19d2ce[_0x3f24e1(0xd08)](_0xcc9ab6=>new Function(JSON[_0x3f24e1(0xda6)](_0xcc9ab6)));break;case _0x3f24e1(0x4a9):_0x19b2b5=_0x1a04f9[_0x491238]!==''?String(_0x1a04f9[_0x491238]):'';break;case _0x3f24e1(0x54b):_0x19d2ce=_0x1a04f9[_0x491238]!==''?JSON['parse'](_0x1a04f9[_0x491238]):[],_0x19b2b5=_0x19d2ce[_0x3f24e1(0xd08)](_0x5c28a7=>String(_0x5c28a7));break;case _0x3f24e1(0x2b1):_0x20585c=_0x1a04f9[_0x491238]!==''?JSON[_0x3f24e1(0xda6)](_0x1a04f9[_0x491238]):{},_0x54c3b7[_0x28ebcc]={},VisuMZ[_0x3f24e1(0x2ee)](_0x54c3b7[_0x28ebcc],_0x20585c);continue;case _0x3f24e1(0x401):_0x19d2ce=_0x1a04f9[_0x491238]!==''?JSON[_0x3f24e1(0xda6)](_0x1a04f9[_0x491238]):[],_0x19b2b5=_0x19d2ce['map'](_0x4922ad=>VisuMZ['ConvertParams']({},JSON[_0x3f24e1(0xda6)](_0x4922ad)));break;default:continue;}_0x54c3b7[_0x28ebcc]=_0x19b2b5;}else this['_mainSprite'][_0x3f24e1(0x812)]=_0x59bb29,this['bitmap']=new _0x1aa4cb(_0x38508d[_0x3f24e1(0x6e4)],_0x236b6a[_0x3f24e1(0x880)]);}}return _0x54c3b7;},(_0x54dadf=>{const _0x312235=_0x5c342f,_0x34e68b=_0x54dadf['name'];for(const _0x411b3a of dependencies){if(!Imported[_0x411b3a]){if(_0x312235(0xcbb)===_0x312235(0x9ae)){_0x1d96c6=_0x287a33[_0x312235(0xca2)]['JS'][_0x283394][_0x312235(0xded)](this,this[_0x312235(0xdda)](),_0x2a160a,this[_0x312235(0xa87)](),_0x29a84d);if(_0x23e313)_0x262492=_0x20784d;}else{alert(_0x312235(0xbe5)[_0x312235(0x266)](_0x34e68b,_0x411b3a)),SceneManager['exit']();break;}}}const _0x34dbc9=_0x54dadf[_0x312235(0xe0d)];if(_0x34dbc9[_0x312235(0xcbd)](/\[Version[ ](.*?)\]/i)){const _0x23da21=Number(RegExp['$1']);_0x23da21!==VisuMZ[label]['version']&&(alert(_0x312235(0xdca)[_0x312235(0x266)](_0x34e68b,_0x23da21)),SceneManager['exit']());}if(_0x34dbc9[_0x312235(0xcbd)](/\[Tier[ ](\d+)\]/i)){const _0x348f7a=Number(RegExp['$1']);if(_0x348f7a<tier){if(_0x312235(0x7c7)!==_0x312235(0xd8d))alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'['format'](_0x34e68b,_0x348f7a,tier)),SceneManager['exit']();else{if(!this[_0x312235(0xca5)]['isSpriteVisible']())return;if(_0x37d9fd[_0x312235(0x49b)]())return;const _0x323b93=_0x85da30[_0x312235(0xca2)][_0x312235(0xc90)][_0x312235(0x603)],_0x3332e5=new _0x15790e();_0x3332e5[_0x312235(0xe01)]=_0x323b93[_0x312235(0x6eb)],this[_0x312235(0xe3c)](_0x3332e5),_0x3332e5[_0x312235(0x84b)](_0x375648,_0x41722f),this[_0x312235(0x9f9)](_0x3332e5);}}else tier=Math['max'](_0x348f7a,tier);}VisuMZ[_0x312235(0x2ee)](VisuMZ[label][_0x312235(0xc90)],_0x54dadf['parameters']);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x3c31b1){const _0x5a203a=_0x5c342f;let _0x1c47ab=[];for(const _0x19024d of _0x3c31b1){if('ZlBNG'!==_0x5a203a(0x513))return this[_0x5a203a(0x179)]();else _0x1c47ab=_0x1c47ab[_0x5a203a(0x310)](VisuMZ[_0x5a203a(0x8ce)](_0x19024d));}return _0x1c47ab['filter'](_0x254c70=>_0x254c70);},VisuMZ['ConvertActionSequenceTarget']=function(_0x21028e){const _0x44abb7=_0x5c342f,_0x572459=BattleManager[_0x44abb7(0x944)]()['filter'](_0xef428b=>_0xef428b&&_0xef428b[_0x44abb7(0xba9)]()),_0x4d3327=BattleManager[_0x44abb7(0x52b)],_0x97f33a=BattleManager[_0x44abb7(0x6bc)],_0x44a8d8=BattleManager[_0x44abb7(0xad0)]?BattleManager['_allTargets']['slice'](0x0):_0x572459;_0x21028e=_0x21028e[_0x44abb7(0xda0)]()[_0x44abb7(0xa5e)]();if(_0x21028e==='user')return[_0x4d3327];else{if(_0x21028e===_0x44abb7(0xd1b)){if(_0x44abb7(0xb2b)!==_0x44abb7(0xb2b)){const _0x5d41d9=_0x302ccc[_0x44abb7(0x570)](_0x5cb504);return _0x5d41d9>=0x0?[_0x46066d[_0x5d41d9-0x1]||_0x2a67c8]:[_0x33ac89];}else return[_0x97f33a];}else{if(_0x21028e==='prev\x20target'){if(_0x44abb7(0xc36)===_0x44abb7(0xc36)){if(_0x97f33a){const _0x539ba6=_0x44a8d8[_0x44abb7(0x570)](_0x97f33a);return _0x539ba6>=0x0?[_0x44a8d8[_0x539ba6-0x1]||_0x97f33a]:[_0x97f33a];}}else this['visible']=this[_0x44abb7(0x89d)]();}else{if(_0x21028e===_0x44abb7(0xab8)){if('brcoe'===_0x44abb7(0x3bf)){if(_0x97f33a){const _0x5834a8=_0x44a8d8[_0x44abb7(0x570)](_0x97f33a);return _0x5834a8>=0x0?[_0x44a8d8[_0x5834a8+0x1]||_0x97f33a]:[_0x97f33a];}}else{const _0x3b0fee=_0x5e1d6a[_0x44abb7(0xca2)]['Settings'][_0x44abb7(0xaa5)],_0x5e7e51=this[_0x44abb7(0x761)](_0x23dfaf),_0x2c6287=this[_0x44abb7(0x7c0)](_0x13caa8),_0x17929c=_0x31638e['round'](_0x2c6287['x']+(_0x2c6287[_0x44abb7(0x6e4)]-0x80)/0x2),_0x5ee53b=this[_0x44abb7(0x470)](_0x2c6287);let _0x65cbc4=_0x17929c-_0x4840b8['iconWidth']/0x2-0x4,_0x1ccdb7=_0x5ee53b+_0x4afc2c[_0x44abb7(0xcdf)]/0x2;_0x65cbc4-_0x548dc5['iconWidth']/0x2<_0x2c6287['x']&&(_0x65cbc4=_0x17929c+_0x424939[_0x44abb7(0x6f8)]/0x2-0x4,_0x1ccdb7=_0x5ee53b-_0x1993fc['iconHeight']/0x2);const _0x4d1a54=_0x17929c,_0x184cb7=this['basicGaugesY'](_0x2c6287);this['placeTimeGauge'](_0x5e7e51,_0x17929c+(_0x3b0fee[_0x44abb7(0xbea)]||0x0),_0x5ee53b+(_0x3b0fee[_0x44abb7(0x8e6)]||0x0)),this[_0x44abb7(0x1e7)](_0x5e7e51,_0x17929c+(_0x3b0fee['NameOffsetX']||0x0),_0x5ee53b+(_0x3b0fee[_0x44abb7(0x642)]||0x0)),this[_0x44abb7(0xadb)](_0x5e7e51,_0x65cbc4+(_0x3b0fee[_0x44abb7(0xb72)]||0x0),_0x1ccdb7+(_0x3b0fee['StateIconOffsetY']||0x0)),this[_0x44abb7(0x273)](_0x5e7e51,'hp',_0x4d1a54+(_0x3b0fee['HpGaugeOffsetX']||0x0),_0x184cb7+(_0x3b0fee[_0x44abb7(0xdee)]||0x0)),this[_0x44abb7(0x273)](_0x5e7e51,'mp',_0x4d1a54+(_0x3b0fee[_0x44abb7(0x8f6)]||0x0),_0x184cb7+this[_0x44abb7(0xd87)]()+(_0x3b0fee[_0x44abb7(0xa61)]||0x0)),_0x5dcb65[_0x44abb7(0xd42)]&&this['placeGauge'](_0x5e7e51,'tp',_0x4d1a54+(_0x3b0fee[_0x44abb7(0x270)]||0x0),_0x184cb7+this[_0x44abb7(0xd87)]()*0x2+(_0x3b0fee[_0x44abb7(0x68b)]||0x0));}}else{if(_0x21028e===_0x44abb7(0xd68))return _0x44a8d8;else{if(_0x21028e==='focus')return[_0x4d3327][_0x44abb7(0x310)](_0x44a8d8);else{if(_0x21028e===_0x44abb7(0x8f9))return _0x572459[_0x44abb7(0x3cd)](_0x50899d=>_0x50899d!==_0x4d3327&&!_0x44a8d8[_0x44abb7(0xaec)](_0x50899d)&&_0x50899d['notFocusValid']());else{if(_0x21028e===_0x44abb7(0xd05)){if('sOiwJ'!==_0x44abb7(0x1e2)){if(this['_cache'][_0x44abb7(0x4e3)]!==_0x2ad8d0)return this[_0x44abb7(0x4c7)][_0x44abb7(0x4e3)];const _0x19ae6c=/<DAMAGE CAP:[ ](\d+)>/i,_0x5c7a18=this[_0x44abb7(0xd63)]()[_0x44abb7(0xd08)](_0x5deaa0=>_0x5deaa0&&_0x5deaa0[_0x44abb7(0x340)][_0x44abb7(0xcbd)](_0x19ae6c)?_0x268581(_0x1bc5bf['$1']):0x0);let _0x236e82=_0x5c7a18[_0x44abb7(0xc5c)]>0x0?_0x198136['max'](..._0x5c7a18):0x0;if(_0x236e82<=0x0)_0x236e82=_0x1cf22c[_0x44abb7(0xca2)][_0x44abb7(0xc90)][_0x44abb7(0x603)][_0x44abb7(0x2e2)];return this['_cache'][_0x44abb7(0x4e3)]=_0x236e82,this[_0x44abb7(0x4c7)]['hardDamageCap'];}else return[VisuMZ['GetActionSequenceSpecialTarget']()];}else{if(_0x21028e[_0x44abb7(0xcbd)](/SPECIAL (.*)>/i)){if(_0x44abb7(0x468)!==_0x44abb7(0x468))this[_0x44abb7(0x286)](_0x44abb7(0x31b),this[_0x44abb7(0x66d)][_0x44abb7(0x5c9)](this));else{const _0x17b39d=String(RegExp['$1'])[_0x44abb7(0x68e)](',')[_0x44abb7(0xd08)](_0x2b5a31=>_0x2b5a31[_0x44abb7(0xa5e)]());return[VisuMZ[_0x44abb7(0xb8e)](_0x17b39d)];}}}}}}}}}}if(_0x4d3327){if(_0x44abb7(0x26b)!==_0x44abb7(0x26b))_0x266077['_scene'][_0x44abb7(0x3ed)][_0x44abb7(0xaef)](),_0x3212b2['setWaitMode'](_0x44abb7(0xbfb));else{if(_0x21028e==='alive\x20friends')return _0x4d3327[_0x44abb7(0xab5)]()[_0x44abb7(0x4e9)]();else{if(_0x21028e===_0x44abb7(0xd35))return _0x4d3327['friendsUnit']()[_0x44abb7(0x4e9)]()['filter'](_0x5254f8=>_0x5254f8!==_0x4d3327);else{if(_0x21028e===_0x44abb7(0x172))return _0x4d3327['friendsUnit']()[_0x44abb7(0x4e9)]()[_0x44abb7(0x3cd)](_0x376cd8=>_0x376cd8!==_0x97f33a);else{if(_0x21028e===_0x44abb7(0x47a)){if('wTVrk'!==_0x44abb7(0xb09))_0x6f6776[_0x44abb7(0xca2)]['JS'][_0x3b9cb7]['call'](this,this[_0x44abb7(0xdda)](),this[_0x44abb7(0xdda)](),this[_0x44abb7(0xa87)](),_0x729e7);else return _0x4d3327[_0x44abb7(0xab5)]()[_0x44abb7(0x585)]();}else{if(_0x21028e[_0x44abb7(0xcbd)](/FRIEND INDEX (\d+)/i)){const _0x5a7591=Number(RegExp['$1']);return[_0x4d3327['friendsUnit']()[_0x44abb7(0xe06)]()[_0x5a7591]];}}}}}if(_0x21028e==='alive\x20opponents'){if('HhFNh'!==_0x44abb7(0x81f))return _0x4d3327['opponentsUnit']()['aliveMembers']();else this[_0x44abb7(0x6d1)](_0x44abb7(0xb9e)),_0x28c831[_0x44abb7(0xca2)][_0x44abb7(0x9b6)][_0x44abb7(0xded)](this),this['processBattleCoreJS']('PostStartTurnJS');}else{if(_0x21028e===_0x44abb7(0x745)){if('FmZLp'===_0x44abb7(0x574))return _0x4d3327[_0x44abb7(0x886)]()[_0x44abb7(0x4e9)]()[_0x44abb7(0x3cd)](_0x1e74c1=>_0x1e74c1!==_0x97f33a);else{const _0x31db32=this['isOnCurrentMap']()?this[_0x44abb7(0x59d)]:0x0,_0x86d12b=_0xf18bf2[_0x44abb7(0x594)];this[_0x44abb7(0x99f)](_0x86d12b,_0x31db32),this[_0x44abb7(0xb77)]=_0x5385e6[_0x44abb7(0x388)](this[_0x44abb7(0xb77)]);const _0x54f9f4={'code':0xbc3,'indent':this[_0x44abb7(0xc41)],'parameters':_0x59eee1[_0x44abb7(0x388)](_0x27cce9)};return this[_0x44abb7(0xb77)][_0x44abb7(0x482)](this[_0x44abb7(0xbd8)]+0x1,0x0,_0x54f9f4),!![];}}else{if(_0x21028e==='dead\x20opponents')return _0x4d3327[_0x44abb7(0x886)]()['deadMembers']();else{if(_0x21028e[_0x44abb7(0xcbd)](/OPPONENT INDEX (\d+)/i)){const _0x310a20=Number(RegExp['$1']);return[_0x4d3327[_0x44abb7(0x886)]()['members']()[_0x310a20]];}}}}}}if(_0x21028e===_0x44abb7(0xd53)){if('tFEfI'===_0x44abb7(0x51c))return $gameParty['aliveMembers']();else _0x1fa7c5[_0x44abb7(0xca2)][_0x44abb7(0xb51)][_0x44abb7(0xded)](this);}else{if(_0x21028e===_0x44abb7(0xcee)){if(_0x44abb7(0xa17)===_0x44abb7(0xa17))return $gameParty['aliveMembers']()['filter'](_0x2e23e9=>_0x2e23e9!==_0x4d3327);else{_0x28d0c8=_0x381198[_0x44abb7(0xca2)]['JS'][_0x4c188b][_0x44abb7(0xded)](this,this[_0x44abb7(0xdda)](),_0x3a0ce2,_0x1f298d,_0x55edbc);if(_0x218278)_0x5c735a=_0x15119a;}}else{if(_0x21028e===_0x44abb7(0x8e5))return $gameParty[_0x44abb7(0x4e9)]()['filter'](_0x2373bf=>_0x2373bf!==_0x97f33a);else{if(_0x21028e===_0x44abb7(0xbaf))return $gameParty[_0x44abb7(0x585)]();else{if(_0x21028e['match'](/ACTOR INDEX (\d+)/i)){const _0x41f1eb=Number(RegExp['$1']);return[$gameParty[_0x44abb7(0xe06)]()[_0x41f1eb]];}else{if(_0x21028e['match'](/ACTOR ID (\d+)/i)){const _0x29ab3f=Number(RegExp['$1']);return[$gameActors[_0x44abb7(0x761)](_0x29ab3f)];}}}}}}if(_0x21028e===_0x44abb7(0x520))return $gameTroop[_0x44abb7(0x4e9)]();else{if(_0x21028e==='alive\x20enemies\x20not\x20user'){if('LtKOn'!=='LtKOn')this['opacity']-=0x10;else return $gameTroop['aliveMembers']()[_0x44abb7(0x3cd)](_0x3d60b8=>_0x3d60b8!==_0x4d3327);}else{if(_0x21028e===_0x44abb7(0x2f5)){if(_0x44abb7(0x748)!==_0x44abb7(0x748))!_0x44df1f[_0x44abb7(0x1ad)]()&&(_0x11ee8a[_0x44abb7(0xd57)](_0x1bed93[0x2],_0x365568[0x3]),_0x30a664[_0x44abb7(0xd57)](_0x1d80df));else return $gameTroop[_0x44abb7(0x4e9)]()[_0x44abb7(0x3cd)](_0x1ce0bb=>_0x1ce0bb!==_0x97f33a);}else{if(_0x21028e===_0x44abb7(0x39f))return $gameTroop['deadMembers']();else{if(_0x21028e[_0x44abb7(0xcbd)](/ENEMY INDEX (\d+)/i)){const _0x2253a4=Number(RegExp['$1']);return[$gameTroop[_0x44abb7(0xe06)]()[_0x2253a4]];}else{if(_0x21028e['match'](/ENEMY ID (\d+)/i)){if(_0x44abb7(0x20e)!==_0x44abb7(0x20e))_0x522951(_0x27624a[_0x44abb7(0x266)]('STB')),_0x54259f['exit']();else{const _0xeb7631=Number(RegExp['$1']);return $gameTroop[_0x44abb7(0x4e9)]()[_0x44abb7(0x3cd)](_0x50caa6=>_0x50caa6[_0x44abb7(0xd9d)]()===_0xeb7631);}}}}}}}if(_0x21028e==='alive\x20battlers')return _0x572459[_0x44abb7(0x3cd)](_0x5d1ab7=>_0x5d1ab7[_0x44abb7(0x920)]());else{if(_0x21028e==='alive\x20battlers\x20not\x20user')return _0x572459[_0x44abb7(0x3cd)](_0x5a4ba5=>_0x5a4ba5[_0x44abb7(0x920)]()&&_0x5a4ba5!==_0x4d3327);else{if(_0x21028e===_0x44abb7(0x8df)){if(_0x44abb7(0x33a)==='LHzMJ')_0x4b0a78+=_0x1f4135,_0x15d82f+=_0x2ad98c['isActor']()?-_0x116e6d:_0x441cba;else return _0x572459[_0x44abb7(0x3cd)](_0x305a10=>_0x305a10[_0x44abb7(0x920)]()&&_0x305a10!==_0x97f33a);}else{if(_0x21028e==='dead\x20battlers'){if('MBXOR'===_0x44abb7(0x509)){if(!_0x527163[_0x44abb7(0x371)]())return;const _0x35ac1f=_0x221c2f[_0x44abb7(0x3d1)](),_0x567382=_0xa53374[_0x44abb7(0x56f)];_0x567382[_0x44abb7(0x576)](),_0x35ac1f[_0x44abb7(0x430)](_0x44abb7(0x66a));}else return _0x572459[_0x44abb7(0x3cd)](_0x48456a=>_0x48456a[_0x44abb7(0x541)]());}}}}return[];},VisuMZ['GetActionSequenceSpecialTarget']=function(){const _0x5a6e3d=_0x5c342f;return BattleManager[_0x5a6e3d(0x6bc)];},VisuMZ[_0x5c342f(0xb8e)]=function(_0x229a2d){const _0x153ec7=_0x5c342f;return BattleManager[_0x153ec7(0x6bc)];},PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Set_SetupAction',_0x337277=>{const _0x23eb31=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x23eb31(0x2ee)](_0x337277,_0x337277);const _0x1361fd=$gameTemp['getLastPluginCommandInterpreter'](),_0x1ca046=BattleManager[_0x23eb31(0x492)],_0x1dbd5c=BattleManager['_subject'],_0x4705be=BattleManager[_0x23eb31(0xad0)]?BattleManager['_allTargets'][_0x23eb31(0x645)](0x0):[],_0x185d94=BattleManager['_logWindow'];if(!_0x1361fd||!_0x1ca046||!_0x1dbd5c)return;if(!_0x1ca046['item']())return;if(_0x337277[_0x23eb31(0x80a)])_0x185d94[_0x23eb31(0x264)](_0x1dbd5c,_0x1ca046['item']());_0x337277[_0x23eb31(0xa9d)]&&_0x185d94['push'](_0x23eb31(0x41f),_0x1dbd5c,_0x4705be,!![]);if(_0x337277[_0x23eb31(0x7ca)])_0x185d94[_0x23eb31(0x843)](_0x23eb31(0x551),_0x1dbd5c,_0x1ca046);if(_0x337277[_0x23eb31(0x638)])_0x185d94[_0x23eb31(0x843)]('waitForMovement');if(_0x337277[_0x23eb31(0x648)])_0x185d94[_0x23eb31(0x843)](_0x23eb31(0x96e),_0x1dbd5c,_0x1ca046);if(_0x337277['WaitForAnimation'])_0x185d94[_0x23eb31(0x843)](_0x23eb31(0x793));_0x1361fd[_0x23eb31(0x430)](_0x23eb31(0x66a));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xb9c),_0x3719ee=>{const _0x353581=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x353581(0x2ee)](_0x3719ee,_0x3719ee);const _0x2d984b=$gameTemp[_0x353581(0x3d1)](),_0x4cee87=BattleManager[_0x353581(0x492)],_0x211cbc=BattleManager['_subject'],_0x1901e9=BattleManager[_0x353581(0xad0)]?BattleManager[_0x353581(0xad0)][_0x353581(0x645)](0x0):[],_0x3462f5=BattleManager[_0x353581(0x56f)],_0x204c9e=_0x3719ee['DualWield']??![];if(!_0x2d984b||!_0x4cee87||!_0x211cbc)return;if(!_0x4cee87[_0x353581(0xa87)]())return;let _0x3a46fc=_0x204c9e?_0x3462f5['getDualWieldTimes'](_0x211cbc):0x1;for(let _0x55d93c=0x0;_0x55d93c<_0x3a46fc;_0x55d93c++){if(_0x353581(0x3af)!=='UBhpK'){if(_0x204c9e&&_0x211cbc[_0x353581(0x47b)]()){if(_0x353581(0xc51)!==_0x353581(0xc51)){this[_0x353581(0xb8f)]=this[_0x353581(0x455)]()[_0x353581(0x25e)]();const _0x224055=this[_0x353581(0x55e)](this[_0x353581(0xb8f)])['width'],_0x4f4f8b=_0x1ecac6['round']((this[_0x353581(0x178)]-_0x224055)/0x2);this[_0x353581(0xb30)](this[_0x353581(0xb8f)],_0x4f4f8b,0x0,_0x224055+0x8);}else _0x3462f5[_0x353581(0x843)]('setActiveWeaponSet',_0x211cbc,_0x55d93c);}if(_0x3719ee[_0x353581(0x71c)])_0x3462f5[_0x353581(0x843)](_0x353581(0x7d1),_0x211cbc,_0x4cee87);if(_0x3719ee[_0x353581(0x50c)]>0x0)_0x3462f5[_0x353581(0x843)](_0x353581(0x8ee),_0x3719ee[_0x353581(0x50c)]);if(_0x3719ee[_0x353581(0xc81)])_0x3462f5[_0x353581(0x843)]('showAnimation',_0x211cbc,_0x1901e9,_0x4cee87[_0x353581(0xa87)]()[_0x353581(0xdaa)]);if(_0x3719ee[_0x353581(0x7d2)])_0x3462f5[_0x353581(0x843)](_0x353581(0x793));for(const _0x56c76e of _0x1901e9){if(!_0x56c76e)continue;if(_0x3719ee['ActionEffect'])_0x3462f5[_0x353581(0x843)]('actionEffect',_0x211cbc,_0x56c76e);}}else{const _0x369ea9=_0x5c4b6e[_0x353581(0x3df)](_0x53b243['$1']);this[_0x353581(0x6e9)](_0x1d1294[_0x369ea9]);}}_0x204c9e&&_0x211cbc[_0x353581(0x47b)]()&&_0x3462f5[_0x353581(0x843)](_0x353581(0x852),_0x211cbc);if(_0x3719ee[_0x353581(0xa9d)])_0x3462f5[_0x353581(0x843)]('applyImmortal',_0x211cbc,_0x1901e9,![]);_0x2d984b[_0x353581(0x430)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],'ActSeq_Set_TargetActionSet',_0x2ddc4a=>{const _0x56acf0=_0x5c342f;if(!SceneManager[_0x56acf0(0x371)]())return;VisuMZ[_0x56acf0(0x2ee)](_0x2ddc4a,_0x2ddc4a);const _0x4475a4=$gameTemp[_0x56acf0(0x3d1)](),_0x2d9ba9=BattleManager[_0x56acf0(0x492)],_0x4a4b2f=BattleManager['_subject'],_0x1cb304=BattleManager[_0x56acf0(0xad0)]?BattleManager[_0x56acf0(0xad0)][_0x56acf0(0x645)](0x0):[],_0x1cf63c=BattleManager[_0x56acf0(0x56f)],_0x3d131b=_0x2ddc4a[_0x56acf0(0x2ad)]??![];if(!_0x4475a4||!_0x2d9ba9||!_0x4a4b2f)return;if(!_0x2d9ba9[_0x56acf0(0xa87)]())return;let _0xbc1f9b=_0x3d131b?_0x1cf63c['getDualWieldTimes'](_0x4a4b2f):0x1;for(let _0x33ced8=0x0;_0x33ced8<_0xbc1f9b;_0x33ced8++){for(const _0x3fd352 of _0x1cb304){if(_0x56acf0(0x55b)!=='jeico'){if(!_0x3fd352)continue;if(_0x3d131b&&_0x4a4b2f['isActor']()){if(_0x56acf0(0x5df)===_0x56acf0(0x5df))_0x1cf63c[_0x56acf0(0x843)](_0x56acf0(0x5d2),_0x4a4b2f,_0x33ced8);else return _0x2b2c5d['BattleCore']['Settings'][_0x56acf0(0x603)][_0x56acf0(0x206)][_0x56acf0(0xded)](this,_0x3cacff,_0x384b9a);}if(_0x2ddc4a[_0x56acf0(0x71c)])_0x1cf63c[_0x56acf0(0x843)](_0x56acf0(0x7d1),_0x4a4b2f,_0x2d9ba9);if(_0x2ddc4a['WaitCount1']>0x0)_0x1cf63c[_0x56acf0(0x843)](_0x56acf0(0x8ee),_0x2ddc4a[_0x56acf0(0x93f)]);if(_0x2ddc4a['ActionAnimation'])_0x1cf63c[_0x56acf0(0x843)](_0x56acf0(0x22a),_0x4a4b2f,[_0x3fd352],_0x2d9ba9[_0x56acf0(0xa87)]()[_0x56acf0(0xdaa)]);if(_0x2ddc4a[_0x56acf0(0x772)]>0x0)_0x1cf63c[_0x56acf0(0x843)]('waitCount',_0x2ddc4a[_0x56acf0(0x772)]);if(_0x2ddc4a['ActionEffect'])_0x1cf63c[_0x56acf0(0x843)]('actionEffect',_0x4a4b2f,_0x3fd352);}else this[_0x56acf0(0xd17)]['bitmap']['smooth']=this[_0x56acf0(0xca5)][_0x56acf0(0xc46)]();}}_0x3d131b&&_0x4a4b2f[_0x56acf0(0x47b)]()&&_0x1cf63c[_0x56acf0(0x843)]('clearActiveWeaponSet',_0x4a4b2f);if(_0x2ddc4a[_0x56acf0(0xa9d)])_0x1cf63c['push'](_0x56acf0(0x41f),_0x4a4b2f,_0x1cb304,![]);_0x4475a4['setWaitMode'](_0x56acf0(0x66a));}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],'ActSeq_Set_FinishAction',_0x339844=>{const _0x359576=_0x5c342f;if(!SceneManager[_0x359576(0x371)]())return;VisuMZ['ConvertParams'](_0x339844,_0x339844);const _0x50dbe6=$gameTemp[_0x359576(0x3d1)](),_0x3c2760=BattleManager[_0x359576(0x492)],_0x25a88d=BattleManager[_0x359576(0x52b)],_0x44eda2=BattleManager[_0x359576(0xad0)]?BattleManager[_0x359576(0xad0)][_0x359576(0x645)](0x0):[],_0x2d1770=BattleManager[_0x359576(0x56f)];if(!_0x50dbe6||!_0x3c2760||!_0x25a88d)return;if(!_0x3c2760[_0x359576(0xa87)]())return;if(_0x339844[_0x359576(0xa9d)])_0x2d1770[_0x359576(0x843)](_0x359576(0x41f),_0x25a88d,_0x44eda2,![]);if(_0x339844['WaitForNewLine'])_0x2d1770[_0x359576(0x843)](_0x359576(0x576));if(_0x339844[_0x359576(0x40d)])_0x2d1770[_0x359576(0x843)](_0x359576(0x47e));if(_0x339844['ClearBattleLog'])_0x2d1770[_0x359576(0x843)](_0x359576(0xa52));if(_0x339844[_0x359576(0x9bb)])_0x2d1770['push'](_0x359576(0x71b),_0x25a88d);if(_0x339844['WaitForMovement'])_0x2d1770[_0x359576(0x843)](_0x359576(0xd27));_0x50dbe6['setWaitMode'](_0x359576(0x66a));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xa00),_0x4522e3=>{const _0x7375db=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x7375db(0xb02)])return;VisuMZ[_0x7375db(0x2ee)](_0x4522e3,_0x4522e3);const _0x4e7cb7=$gameTemp[_0x7375db(0x3d1)](),_0x46a21e=_0x4522e3[_0x7375db(0xc03)];if(!_0x4e7cb7)return;$gameScreen['setBattleAngle'](_0x4522e3[_0x7375db(0x91e)],_0x4522e3[_0x7375db(0x7b5)],_0x4522e3[_0x7375db(0xd70)]);if(_0x46a21e)_0x4e7cb7[_0x7375db(0x430)](_0x7375db(0xd07));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Angle_Reset',_0x56f6ad=>{const _0x2dafcd=_0x5c342f;if(!SceneManager[_0x2dafcd(0x371)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2dafcd(0x2ee)](_0x56f6ad,_0x56f6ad);const _0x476c66=$gameTemp['getLastPluginCommandInterpreter'](),_0x322941=_0x56f6ad['WaitForAngle'];if(!_0x476c66)return;$gameScreen['setBattleAngle'](0x0,_0x56f6ad['Duration'],_0x56f6ad[_0x2dafcd(0xd70)]);if(_0x322941)_0x476c66[_0x2dafcd(0x430)]('battleAngle');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x311),_0x36182c=>{const _0x5dad05=_0x5c342f;if(!SceneManager[_0x5dad05(0x371)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x154640=$gameTemp[_0x5dad05(0x3d1)]();if(!_0x154640)return;_0x154640[_0x5dad05(0x430)]('battleAngle');}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x3a2),_0x3d39b6=>{const _0x9b7457=_0x5c342f;if(!SceneManager[_0x9b7457(0x371)]())return;VisuMZ[_0x9b7457(0x2ee)](_0x3d39b6,_0x3d39b6);const _0x4933c0=$gameTemp[_0x9b7457(0x3d1)](),_0x5bb70b=BattleManager[_0x9b7457(0x492)],_0x5e329c=BattleManager['_subject'],_0x55fd1f=VisuMZ[_0x9b7457(0x432)](_0x3d39b6[_0x9b7457(0x63d)]),_0x3b4f08=_0x3d39b6['Mirror'],_0x681bee=BattleManager[_0x9b7457(0x56f)];if(!_0x4933c0||!_0x5bb70b||!_0x5e329c)return;if(!_0x5bb70b[_0x9b7457(0xa87)]())return;let _0x56654e=_0x5bb70b[_0x9b7457(0xa87)]()[_0x9b7457(0xdaa)];if(_0x56654e<0x0)_0x56654e=_0x5e329c[_0x9b7457(0x8fd)]();$gameTemp[_0x9b7457(0x299)](_0x55fd1f,_0x56654e,_0x3b4f08),_0x3d39b6[_0x9b7457(0x7d2)]&&_0x4933c0[_0x9b7457(0x430)](_0x9b7457(0xbfb));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Animation_AttackAnimation',_0x470c16=>{const _0x129e1d=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x129e1d(0x2ee)](_0x470c16,_0x470c16);const _0x55e89c=$gameTemp[_0x129e1d(0x3d1)](),_0x4377a7=BattleManager[_0x129e1d(0x52b)],_0x51ffc8=VisuMZ['CreateActionSequenceTargets'](_0x470c16[_0x129e1d(0x63d)]),_0x162b23=_0x470c16[_0x129e1d(0x6b9)],_0x498dfe=BattleManager[_0x129e1d(0x56f)];if(!_0x55e89c||!_0x4377a7)return;const _0xe0cf3d=_0x4377a7[_0x129e1d(0x8fd)]();$gameTemp[_0x129e1d(0x299)](_0x51ffc8,_0xe0cf3d,_0x162b23),_0x470c16[_0x129e1d(0x7d2)]&&_0x55e89c[_0x129e1d(0x430)](_0x129e1d(0xbfb));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xc13),_0x384fc7=>{const _0x471b33=_0x5c342f;if(!SceneManager[_0x471b33(0x371)]())return;VisuMZ[_0x471b33(0x2ee)](_0x384fc7,_0x384fc7);const _0x51ca10=_0x53ebfa[_0x471b33(0x175)](_0x384fc7[_0x471b33(0xd1d)]);if(_0x51ca10<=0x0)return;const _0x4a3ef8=$gameTemp[_0x471b33(0x3d1)](),_0x53ebfa=BattleManager['_subject'],_0x596875=VisuMZ['CreateActionSequenceTargets'](_0x384fc7[_0x471b33(0x63d)]),_0x93726a=_0x384fc7['Mirror'],_0x4a78c9=BattleManager[_0x471b33(0x56f)];if(!_0x4a3ef8||!_0x53ebfa)return;$gameTemp['requestAnimation'](_0x596875,_0x51ca10,_0x93726a),_0x384fc7[_0x471b33(0x7d2)]&&_0x4a3ef8[_0x471b33(0x430)](_0x471b33(0xbfb));}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_Animation_BalloonAnimation',_0x2c0f7=>{const _0x527ec3=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2c0f7,_0x2c0f7);const _0x4aad7d=$gameTemp[_0x527ec3(0x3d1)](),_0x4f9d18=VisuMZ[_0x527ec3(0x432)](_0x2c0f7[_0x527ec3(0x63d)]),_0x459141=_0x2c0f7['Balloon'];let _0x397049=0x0;switch(_0x459141[_0x527ec3(0xb34)]()[_0x527ec3(0xa5e)]()){case'!':case _0x527ec3(0x1a3):_0x397049=0x1;break;case'?':case _0x527ec3(0x906):_0x397049=0x2;break;case _0x527ec3(0xc5e):case _0x527ec3(0x826):case _0x527ec3(0x9ee):case _0x527ec3(0x818):case _0x527ec3(0x187):_0x397049=0x3;break;case _0x527ec3(0x3d9):case _0x527ec3(0xaf6):_0x397049=0x4;break;case _0x527ec3(0x5dd):case'ANGER':_0x397049=0x5;break;case _0x527ec3(0x508):_0x397049=0x6;break;case _0x527ec3(0x24c):case _0x527ec3(0xb63):case _0x527ec3(0x9e6):_0x397049=0x7;break;case _0x527ec3(0xb1c):case _0x527ec3(0x931):_0x397049=0x8;break;case _0x527ec3(0x588):case _0x527ec3(0x6d3):case _0x527ec3(0x4e7):case _0x527ec3(0x1b1):case _0x527ec3(0xa92):_0x397049=0x9;break;case'Z':case'ZZ':case'ZZZ':case _0x527ec3(0x4f9):_0x397049=0xa;break;case _0x527ec3(0xcf9):_0x397049=0xb;break;case _0x527ec3(0x974):_0x397049=0xc;break;case'USER-DEFINED\x203':_0x397049=0xd;break;case _0x527ec3(0x8a5):_0x397049=0xe;break;case _0x527ec3(0x8c7):_0x397049=0xf;break;}for(const _0x37523e of _0x4f9d18){if(!_0x37523e)continue;$gameTemp[_0x527ec3(0xada)](_0x37523e,_0x397049);}_0x2c0f7[_0x527ec3(0xb79)]&&_0x4aad7d&&(_0x4aad7d[_0x527ec3(0x630)](0x1),_0x4aad7d['setWaitMode'](_0x527ec3(0x782)));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x615),_0x1e5965=>{const _0x56b5f1=_0x5c342f;if(!SceneManager[_0x56b5f1(0x371)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ['ConvertParams'](_0x1e5965,_0x1e5965);const _0x50fd21=$gameTemp[_0x56b5f1(0x3d1)](),_0x250464=VisuMZ[_0x56b5f1(0x432)](_0x1e5965[_0x56b5f1(0x63d)]),_0x455207=_0x1e5965[_0x56b5f1(0x6f1)];for(const _0x14c799 of _0x250464){if(_0x56b5f1(0x3e2)==='WwxCZ')this['_jumpHeight']=0x0;else{if(!_0x14c799)continue;$gameTemp[_0x56b5f1(0xada)](_0x14c799,[_0x455207]);}}_0x1e5965[_0x56b5f1(0xb79)]&&_0x50fd21&&(_0x50fd21[_0x56b5f1(0x630)](0x1),_0x50fd21['setWaitMode'](_0x56b5f1(0x782)));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Animation_BalloonIconRange',_0x20f241=>{const _0x7d3b9c=_0x5c342f;if(!SceneManager[_0x7d3b9c(0x371)]())return;if(!Imported[_0x7d3b9c(0x91b)])return;VisuMZ[_0x7d3b9c(0x2ee)](_0x20f241,_0x20f241);const _0x8aa9b1=$gameTemp[_0x7d3b9c(0x3d1)](),_0x384c66=VisuMZ[_0x7d3b9c(0x432)](_0x20f241['Targets']),_0x5e2ffc=Math[_0x7d3b9c(0x7b9)](Number(_0x20f241[_0x7d3b9c(0x2e1)]||0x0),Number(_0x20f241[_0x7d3b9c(0x6c5)]||0x0)),_0x1c2378=Math[_0x7d3b9c(0xaee)](Number(_0x20f241[_0x7d3b9c(0x2e1)]||0x0),Number(_0x20f241['endIcon']||0x0)),_0x55d9d7=[];for(let _0x1b319a=_0x5e2ffc;_0x1b319a<=_0x1c2378;_0x1b319a++){if('eqLnL'!=='eqLnL'){const _0x5c4745=_0x21c84a[_0x17112];if(_0x5c4745){if(_0x5c4745['note']['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x451a75=_0x34b055(_0x1f0c4d['$1'])['split'](/[\r\n]+/)[_0x7d3b9c(0x5e1)](''),_0x494a09=this[_0x7d3b9c(0xd84)](_0x451a75);_0x4285d6=this[_0x7d3b9c(0xd0d)](_0x494a09)||_0x21ed7e,_0xdeee1d=_0x166778[_0x7d3b9c(0x5ca)](_0xea6637);}}return _0x3a9d69;}else _0x55d9d7[_0x7d3b9c(0x843)](_0x1b319a);}for(const _0x490592 of _0x384c66){if(_0x7d3b9c(0x838)!==_0x7d3b9c(0xbe2)){if(!_0x490592)continue;$gameTemp[_0x7d3b9c(0xada)](_0x490592,_0x55d9d7);}else{if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x7d3b9c(0x1bd)]=_0x5b40c5['_scene'][_0x7d3b9c(0xcf1)](),this[_0x7d3b9c(0x1bd)];}}_0x20f241[_0x7d3b9c(0xb79)]&&_0x8aa9b1&&(_0x8aa9b1[_0x7d3b9c(0x630)](0x1),_0x8aa9b1['setWaitMode'](_0x7d3b9c(0x782)));}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xa56),_0x2d5d1b=>{const _0x9c28a6=_0x5c342f;if(!SceneManager[_0x9c28a6(0x371)]())return;if(!Imported[_0x9c28a6(0x91b)])return;VisuMZ[_0x9c28a6(0x2ee)](_0x2d5d1b,_0x2d5d1b);const _0x3a0ff8=$gameTemp[_0x9c28a6(0x3d1)](),_0x166d7b=VisuMZ[_0x9c28a6(0x432)](_0x2d5d1b[_0x9c28a6(0x63d)]),_0x1cccb3=_0x2d5d1b[_0x9c28a6(0xdbe)];for(const _0x22e82a of _0x166d7b){if(!_0x22e82a)continue;$gameTemp[_0x9c28a6(0xada)](_0x22e82a,_0x1cccb3);}_0x2d5d1b[_0x9c28a6(0xb79)]&&_0x3a0ff8&&('jnSJh'!==_0x9c28a6(0x185)?(_0x3a0ff8['wait'](0x1),_0x3a0ff8[_0x9c28a6(0x430)](_0x9c28a6(0x782))):_0x47248b['actionBattleCoreJS'](_0x9c28a6(0xb3d)));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x181),_0x2d5a0f=>{const _0x11e33e=_0x5c342f;if(!SceneManager[_0x11e33e(0x371)]())return;VisuMZ[_0x11e33e(0x2ee)](_0x2d5a0f,_0x2d5a0f);const _0x418b37=$gameTemp[_0x11e33e(0x3d1)](),_0x25e15b=BattleManager['_action'],_0x3b4d48=_0x2d5a0f[_0x11e33e(0x6b9)],_0x329b90=VisuMZ['CreateActionSequenceTargets'](_0x2d5a0f[_0x11e33e(0x63d)]);if(!_0x418b37||!_0x25e15b)return;if(!_0x25e15b[_0x11e33e(0xa87)]())return;for(const _0x5497e1 of _0x329b90){if(!_0x5497e1)continue;_0x5497e1[_0x11e33e(0x96e)](_0x25e15b,_0x3b4d48);}if(_0x2d5a0f['WaitForAnimation'])_0x418b37[_0x11e33e(0x430)](_0x11e33e(0xbfb));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Animation_ChangeBattlePortrait',_0x404843=>{const _0x12c677=_0x5c342f;VisuMZ[_0x12c677(0x2ee)](_0x404843,_0x404843);const _0x25fdcd=$gameTemp[_0x12c677(0x3d1)](),_0x3eda60=VisuMZ[_0x12c677(0x432)](_0x404843[_0x12c677(0x63d)]),_0x365cc2=_0x404843['Filename'];if(!_0x365cc2)return;for(const _0xf07dc6 of _0x3eda60){if(!_0xf07dc6)continue;if(!_0xf07dc6[_0x12c677(0x47b)]())continue;_0xf07dc6[_0x12c677(0x7b0)](_0x365cc2);}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xe16),_0x281beb=>{const _0x5d2b87=_0x5c342f;if(!SceneManager[_0x5d2b87(0x371)]())return;VisuMZ['ConvertParams'](_0x281beb,_0x281beb);const _0x1744ef=$gameTemp[_0x5d2b87(0x3d1)](),_0x10bd36=BattleManager['_subject'],_0x4af2a5=VisuMZ[_0x5d2b87(0x432)](_0x281beb[_0x5d2b87(0x63d)]),_0x371b68=_0x281beb['Mirror'];if(!_0x1744ef||!_0x10bd36)return;const _0x37f9d2=$dataSkilles[_0x10bd36[_0x5d2b87(0x610)]()],_0x40542c=_0x37f9d2[_0x5d2b87(0xdaa)];$gameTemp[_0x5d2b87(0x299)](_0x4af2a5,_0x40542c,_0x371b68);if(_0x281beb[_0x5d2b87(0x7d2)]){if(_0x5d2b87(0x2cf)===_0x5d2b87(0x2cf))_0x1744ef[_0x5d2b87(0x430)](_0x5d2b87(0xbfb));else{_0x3e96b7(_0x5d2b87(0x5fa)),_0x4341c0['exit']();return;}}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x5d3),_0x51451c=>{const _0x37d0c8=_0x5c342f;if(!SceneManager[_0x37d0c8(0x371)]())return;VisuMZ[_0x37d0c8(0x2ee)](_0x51451c,_0x51451c);const _0xa0c933=$gameTemp['getLastPluginCommandInterpreter'](),_0x2a024d=VisuMZ[_0x37d0c8(0x432)](_0x51451c[_0x37d0c8(0x63d)]),_0x46855e=Number(_0x51451c[_0x37d0c8(0xb0c)]||0x1),_0x2ea11b=$dataItems[_0x46855e],_0x50626f=_0x51451c[_0x37d0c8(0x6b9)];if(!_0xa0c933)return;if(!_0x2ea11b)return;let _0x14df58=_0x2ea11b[_0x37d0c8(0xdaa)];$gameTemp[_0x37d0c8(0x299)](_0x2a024d,_0x14df58,_0x50626f),_0x51451c[_0x37d0c8(0x7d2)]&&_0xa0c933[_0x37d0c8(0x430)]('battleAnimation');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x644),_0x155fa3=>{const _0x5cedf5=_0x5c342f;if(!SceneManager[_0x5cedf5(0x201)])return;if(!SceneManager[_0x5cedf5(0x201)][_0x5cedf5(0x3ed)])return;if(!Imported[_0x5cedf5(0xad9)])return;VisuMZ[_0x5cedf5(0x2ee)](_0x155fa3,_0x155fa3);const _0x6920d8=$gameTemp[_0x5cedf5(0x3d1)](),_0x47e78f=Math['round'](_0x155fa3[_0x5cedf5(0xdaf)]),_0x2bf62e=Math[_0x5cedf5(0x5c1)](_0x155fa3[_0x5cedf5(0x44b)]);$gameTemp[_0x5cedf5(0xaaa)](_0x47e78f,_0x2bf62e,_0x155fa3[_0x5cedf5(0x73c)],_0x155fa3[_0x5cedf5(0x6b9)],_0x155fa3[_0x5cedf5(0x351)]);if(_0x155fa3[_0x5cedf5(0xb79)]&&_0x6920d8){if('SrqoK'!==_0x5cedf5(0x896))SceneManager[_0x5cedf5(0x201)]['_spriteset'][_0x5cedf5(0xaef)](),_0x6920d8[_0x5cedf5(0x430)](_0x5cedf5(0xbfb));else return!![];}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x945),_0x56ef7c=>{const _0x3f419a=_0x5c342f;if(!SceneManager[_0x3f419a(0x371)]())return;VisuMZ[_0x3f419a(0x2ee)](_0x56ef7c,_0x56ef7c);const _0x5ba97b=$gameTemp[_0x3f419a(0x3d1)](),_0x2cdd55=VisuMZ[_0x3f419a(0x432)](_0x56ef7c['Targets']),_0x1e2b7a=_0x56ef7c[_0x3f419a(0x73c)],_0x2a1284=_0x56ef7c[_0x3f419a(0x6b9)];if(!_0x5ba97b)return;$gameTemp[_0x3f419a(0x299)](_0x2cdd55,_0x1e2b7a,_0x2a1284);if(_0x56ef7c[_0x3f419a(0x7d2)])_0x5ba97b['setWaitMode'](_0x3f419a(0xbfb));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xba6),_0x3fd3f8=>{const _0x45d707=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x45d707(0x2ee)](_0x3fd3f8,_0x3fd3f8);const _0x20d49c=$gameTemp[_0x45d707(0x3d1)](),_0x57d7b8=VisuMZ[_0x45d707(0x432)](_0x3fd3f8['Targets']),_0x472fb1=Number(_0x3fd3f8['AnimationID'])||0x1,_0x437ba1=_0x3fd3f8[_0x45d707(0x6b9)];if(!_0x20d49c)return;$gameTemp[_0x45d707(0x299)](_0x57d7b8,_0x472fb1,_0x437ba1);if(_0x3fd3f8[_0x45d707(0x7d2)])_0x20d49c[_0x45d707(0x430)](_0x45d707(0xbfb));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x3f0),_0x4fd903=>{const _0x2d05fb=_0x5c342f;if(!SceneManager[_0x2d05fb(0x371)]())return;VisuMZ['ConvertParams'](_0x4fd903,_0x4fd903);const _0x88002f=$gameTemp[_0x2d05fb(0x3d1)](),_0x2224be=VisuMZ[_0x2d05fb(0x432)](_0x4fd903['Targets']),_0x56a579=Number(_0x4fd903['SkillID']||0x1),_0x15b386=$dataSkills[_0x56a579],_0x4c4e61=_0x4fd903['Mirror'];if(!_0x88002f)return;if(!_0x15b386)return;let _0x327208=_0x15b386['animationId'];$gameTemp[_0x2d05fb(0x299)](_0x2224be,_0x327208,_0x4c4e61),_0x4fd903['WaitForAnimation']&&(_0x2d05fb(0xdcf)!==_0x2d05fb(0xdcf)?this[_0x2d05fb(0xcde)](0x1):_0x88002f[_0x2d05fb(0x430)](_0x2d05fb(0xbfb)));}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xc86),_0x27f1b4=>{const _0x492a94=_0x5c342f;if(!SceneManager[_0x492a94(0x371)]())return;const _0x5a5d10=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5a5d10)return;_0x5a5d10[_0x492a94(0x430)](_0x492a94(0xbfb));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x1f3),_0x2caf06=>{const _0x19ba61=_0x5c342f;if(!SceneManager[_0x19ba61(0x371)]())return;VisuMZ[_0x19ba61(0x2ee)](_0x2caf06,_0x2caf06);const _0x33533f=BattleManager[_0x19ba61(0x56f)],_0x4d64b4=_0x2caf06[_0x19ba61(0x1f9)]&&Imported[_0x19ba61(0x629)];_0x33533f[_0x19ba61(0x3ff)](_0x2caf06['Text']),_0x4d64b4&&Imported[_0x19ba61(0x629)]&&$gameSystem[_0x19ba61(0xa0e)](_0x2caf06[_0x19ba61(0x491)]||'',_0x2caf06[_0x19ba61(0x573)]||0x0);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_BattleLog_Clear',_0x38aecf=>{const _0x2f0a3b=_0x5c342f;if(!SceneManager[_0x2f0a3b(0x371)]())return;const _0x12c7a1=BattleManager[_0x2f0a3b(0x56f)];_0x12c7a1[_0x2f0a3b(0xa52)]();}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xb3a),_0x40290b=>{const _0x507af0=_0x5c342f;if(!SceneManager[_0x507af0(0x371)]())return;const _0x10c635=$gameTemp[_0x507af0(0x3d1)](),_0x328eeb=BattleManager['_action'],_0x53ad4c=BattleManager[_0x507af0(0x52b)],_0x269d0f=BattleManager[_0x507af0(0x56f)];if(!_0x10c635||!_0x328eeb||!_0x53ad4c)return;if(!_0x328eeb[_0x507af0(0xa87)]())return;_0x269d0f[_0x507af0(0x264)](_0x53ad4c,_0x328eeb[_0x507af0(0xa87)]()),_0x10c635['setWaitMode'](_0x507af0(0x66a));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x612),_0x16eade=>{const _0x5b94da=_0x5c342f;if(!SceneManager['isSceneBattle']())return;const _0x1fc438=BattleManager[_0x5b94da(0x56f)];_0x1fc438[_0x5b94da(0x3c2)]();}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x3e4),_0x287913=>{const _0x27f85a=_0x5c342f;if(!SceneManager[_0x27f85a(0x371)]())return;const _0x408b27=BattleManager[_0x27f85a(0x56f)];_0x408b27[_0x27f85a(0x236)]();}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xa97),_0x1464f8=>{const _0x2172e2=_0x5c342f;if(!SceneManager[_0x2172e2(0x371)]())return;const _0xf6c1da=BattleManager[_0x2172e2(0x56f)];_0xf6c1da[_0x2172e2(0x4af)]();}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x61f),_0x3f3a9c=>{const _0x516497=_0x5c342f;if(!SceneManager[_0x516497(0x371)]())return;VisuMZ[_0x516497(0x2ee)](_0x3f3a9c,_0x3f3a9c),SceneManager[_0x516497(0x201)][_0x516497(0x253)](_0x3f3a9c[_0x516497(0x32e)]);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x345),_0x350da2=>{const _0x2c55d1=_0x5c342f;if(!SceneManager[_0x2c55d1(0x371)]())return;const _0x388925=$gameTemp['getLastPluginCommandInterpreter']();_0x388925[_0x2c55d1(0x430)](_0x2c55d1(0x66a));}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x7fd),_0x70e897=>{const _0x589445=_0x5c342f;if(!SceneManager[_0x589445(0x371)]())return;const _0x593e55=$gameTemp[_0x589445(0x3d1)](),_0x5a87ee=BattleManager[_0x589445(0x56f)];_0x5a87ee[_0x589445(0x576)](),_0x593e55[_0x589445(0x430)](_0x589445(0x66a));}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xd9a),_0x22ac80=>{const _0x341685=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x341685(0xb02)])return;VisuMZ[_0x341685(0x2ee)](_0x22ac80,_0x22ac80);const _0x1ffe37=$gameScreen['battleCameraData']();_0x1ffe37[_0x341685(0x8f1)]=_0x22ac80[_0x341685(0x9f1)];}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Camera_FocusPoint',_0x3aa334=>{const _0x3edaff=_0x5c342f;if(!SceneManager[_0x3edaff(0x371)]())return;if(!Imported[_0x3edaff(0xb02)])return;VisuMZ['ConvertParams'](_0x3aa334,_0x3aa334);const _0xf4b554=$gameTemp[_0x3edaff(0x3d1)](),_0x383d32=_0x3aa334[_0x3edaff(0x289)];$gameScreen[_0x3edaff(0x2ab)](_0x3aa334['FocusX'],_0x3aa334[_0x3edaff(0xcf8)],_0x3aa334[_0x3edaff(0x7b5)],_0x3aa334[_0x3edaff(0xd70)]);if(_0x383d32)_0xf4b554[_0x3edaff(0x430)](_0x3edaff(0x613));}),PluginManager['registerCommand'](pluginData['name'],_0x5c342f(0x4d9),_0x110bfc=>{const _0xa8c415=_0x5c342f;if(!SceneManager[_0xa8c415(0x371)]())return;if(!Imported[_0xa8c415(0xb02)])return;VisuMZ[_0xa8c415(0x2ee)](_0x110bfc,_0x110bfc);const _0x40d355=$gameTemp['getLastPluginCommandInterpreter'](),_0x29f34d=VisuMZ[_0xa8c415(0x432)](_0x110bfc['Targets']),_0x4f6955=_0x110bfc[_0xa8c415(0x289)];$gameScreen[_0xa8c415(0x2d1)](_0x29f34d,_0x110bfc[_0xa8c415(0x7b5)],_0x110bfc[_0xa8c415(0xd70)]);if(_0x4f6955)_0x40d355['setWaitMode'](_0xa8c415(0x613));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x60d),_0x3d7fab=>{const _0x45aa8d=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x45aa8d(0xb02)])return;VisuMZ[_0x45aa8d(0x2ee)](_0x3d7fab,_0x3d7fab);const _0x2accda=$gameTemp[_0x45aa8d(0x3d1)](),_0x225c11=_0x3d7fab[_0x45aa8d(0x289)];$gameScreen[_0x45aa8d(0x592)](_0x3d7fab[_0x45aa8d(0x6f0)],_0x3d7fab['OffsetY'],_0x3d7fab[_0x45aa8d(0x7b5)],_0x3d7fab['EasingType']);if(_0x225c11)_0x2accda[_0x45aa8d(0x430)](_0x45aa8d(0x613));}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x4cf),_0x4cdfa2=>{const _0x1660f6=_0x5c342f;if(!SceneManager[_0x1660f6(0x371)]())return;if(!Imported[_0x1660f6(0xb02)])return;VisuMZ[_0x1660f6(0x2ee)](_0x4cdfa2,_0x4cdfa2);const _0x4d8a4a=$gameTemp[_0x1660f6(0x3d1)](),_0x37f6c3=_0x4cdfa2[_0x1660f6(0xa23)],_0x4bcd8e=_0x4cdfa2[_0x1660f6(0x22b)],_0xa23323=_0x4cdfa2[_0x1660f6(0x289)];if(_0x37f6c3){if('QpTIU'===_0x1660f6(0xcef)){const _0x52fea3=Math[_0x1660f6(0x5c1)](Graphics[_0x1660f6(0x6e4)]/0x2),_0x2309f2=Math[_0x1660f6(0x5c1)](Graphics[_0x1660f6(0x880)]/0x2);$gameScreen[_0x1660f6(0x2ab)](_0x52fea3,_0x2309f2,_0x4cdfa2[_0x1660f6(0x7b5)],_0x4cdfa2[_0x1660f6(0xd70)]);}else this[_0x1660f6(0xd5d)][_0x1660f6(0x828)]();}_0x4bcd8e&&$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x4cdfa2['Duration'],_0x4cdfa2[_0x1660f6(0xd70)]);if(_0xa23323)_0x4d8a4a[_0x1660f6(0x430)](_0x1660f6(0x613));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x930),_0x1a7751=>{const _0x2d4f35=_0x5c342f;if(!SceneManager[_0x2d4f35(0x371)]())return;if(!Imported[_0x2d4f35(0xb02)])return;const _0x5e26f6=$gameTemp[_0x2d4f35(0x3d1)]();if(!_0x5e26f6)return;_0x5e26f6[_0x2d4f35(0x430)](_0x2d4f35(0x613));}),VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xbd2)]=function(_0x23ef26){const _0x559e1a=_0x5c342f;_0x23ef26[_0x559e1a(0xace)]='';const _0x4b9ab0=VisuMZ[_0x559e1a(0xe14)][_0x559e1a(0xbd2)](_0x23ef26),_0x5b924b=VisuMZ[_0x559e1a(0x432)](_0x23ef26['Targets'])[0x0]||null;return _0x5b924b&&(_0x559e1a(0x312)!=='ApxVM'?(_0x4b9ab0['portraitFilename']=_0x5b924b[_0x559e1a(0x55a)](),_0x4b9ab0[_0x559e1a(0x1e5)]=_0x5b924b[_0x559e1a(0x278)](),_0x4b9ab0[_0x559e1a(0x4d8)]=_0x5b924b[_0x559e1a(0x89e)](),_0x4b9ab0[_0x559e1a(0x9e4)]=_0x5b924b[_0x559e1a(0xa84)](),_0x5b924b['isEnemy']()&&(_0x5b924b['flipVisualCutinHorz']()&&(_0x4b9ab0[_0x559e1a(0x29b)]=!_0x4b9ab0[_0x559e1a(0x29b)]),_0x5b924b[_0x559e1a(0xbbc)]()&&(_0x4b9ab0[_0x559e1a(0x2c9)]=!_0x4b9ab0[_0x559e1a(0x2c9)]),_0x4b9ab0[_0x559e1a(0x9e4)]===_0x559e1a(0x4be)&&(_0x4b9ab0[_0x559e1a(0x29b)]=!_0x4b9ab0[_0x559e1a(0x29b)]),_0x23ef26[_0x559e1a(0xcc2)]['parallaxScrollXinvertEnemy']&&(_0x559e1a(0x3a4)==='RtebJ'?_0x4b9ab0[_0x559e1a(0xd1c)]*=-0x1:_0x36b189[_0x559e1a(0xc17)]([_0x43fcb6])),_0x23ef26[_0x559e1a(0xcc2)][_0x559e1a(0x602)]&&(_0x4b9ab0[_0x559e1a(0x5f2)]*=-0x1),_0x4b9ab0[_0x559e1a(0x835)]+=_0x23ef26[_0x559e1a(0xcc2)][_0x559e1a(0x6b5)]??0x0)):_0x3b9250[_0x559e1a(0xa93)][_0x559e1a(0x73d)](_0x2055f0)),_0x4b9ab0;},PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x1d2),_0x12c9a4=>{const _0x522b36=_0x5c342f;if(!SceneManager[_0x522b36(0x371)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x522b36(0x2ee)](_0x12c9a4,_0x12c9a4);const _0x4805f0=VisuMZ['BattleCore']['CreateCutinSettings'](_0x12c9a4);SceneManager[_0x522b36(0x201)][_0x522b36(0xd3c)](_0x4805f0);const _0x411228=$gameTemp[_0x522b36(0x3d1)]();_0x411228&&_0x12c9a4[_0x522b36(0xda8)]&&_0x411228[_0x522b36(0x430)]('cutinEnter');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Cutin_EndVisualCutinEffectAll',_0x35337e=>{const _0xa5f4a6=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xa5f4a6(0x348)])return;VisuMZ[_0xa5f4a6(0x2ee)](_0x35337e,_0x35337e),SceneManager[_0xa5f4a6(0x201)][_0xa5f4a6(0xc2d)]();const _0x26453a=$gameTemp[_0xa5f4a6(0x3d1)]();_0x26453a&&_0x35337e[_0xa5f4a6(0xb69)]&&(_0xa5f4a6(0xa85)!==_0xa5f4a6(0xa85)?(this[_0xa5f4a6(0xa11)]=_0x32a93b,this[_0xa5f4a6(0x97d)]=-0x1,this[_0xa5f4a6(0xcd8)]=0x0,this[_0xa5f4a6(0x45d)](),this['updateFrame']()):_0x26453a['setWaitMode'](_0xa5f4a6(0x688)));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x1eb),_0x1babd7=>{const _0x2eb17d=_0x5c342f;if(!SceneManager[_0x2eb17d(0x371)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ['ConvertParams'](_0x1babd7,_0x1babd7);const _0x29cc2c=_0x1babd7[_0x2eb17d(0xb48)][_0x2eb17d(0xda0)]()[_0x2eb17d(0xa5e)]();SceneManager[_0x2eb17d(0x201)][_0x2eb17d(0xd06)](_0x29cc2c);const _0x1361f1=$gameTemp[_0x2eb17d(0x3d1)]();_0x1361f1&&_0x1babd7['WaitForExit']&&_0x1361f1['setWaitMode'](_0x2eb17d(0x688));}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_Cutin_WaitForEntrance',_0x2c8340=>{const _0x416ca7=_0x5c342f;if(!SceneManager[_0x416ca7(0x371)]())return;if(!Imported[_0x416ca7(0x348)])return;const _0x1d678c=$gameTemp['getLastPluginCommandInterpreter']();_0x1d678c[_0x416ca7(0x430)](_0x416ca7(0x731));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xc85),_0x4c182e=>{const _0xf81cf3=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xf81cf3(0x348)])return;const _0x579500=$gameTemp[_0xf81cf3(0x3d1)]();_0x579500['setWaitMode'](_0xf81cf3(0x688));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x8fa),_0x285151=>{const _0x3c0006=_0x5c342f;if(!SceneManager[_0x3c0006(0x371)]())return;if(!Imported[_0x3c0006(0xb9b)])return;VisuMZ['ConvertParams'](_0x285151,_0x285151);const _0x2d4b78=VisuMZ['CreateActionSequenceTargets'](_0x285151[_0x3c0006(0x63d)]),_0x21e98c=_0x285151['MotionAni'][_0x3c0006(0xda0)]()[_0x3c0006(0xa5e)]();for(const _0x1dcbae of _0x2d4b78){if(!_0x1dcbae)continue;_0x1dcbae[_0x3c0006(0x38f)](_0x21e98c);}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_DB_DragonbonesTimeScale',_0x1f162=>{const _0x1c9719=_0x5c342f;if(!SceneManager[_0x1c9719(0x371)]())return;if(!Imported[_0x1c9719(0xb9b)])return;VisuMZ[_0x1c9719(0x2ee)](_0x1f162,_0x1f162);const _0x558ece=VisuMZ['CreateActionSequenceTargets'](_0x1f162['Targets']),_0x42891b=_0x1f162[_0x1c9719(0x57c)];for(const _0x5aad15 of _0x558ece){if(!_0x5aad15)continue;_0x5aad15[_0x1c9719(0x3ee)]()[_0x1c9719(0x976)]=_0x42891b;}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xbd1),_0x5373a5=>{const _0x385c10=_0x5c342f;if(!SceneManager[_0x385c10(0x371)]())return;if(!Imported[_0x385c10(0x518)])return;VisuMZ[_0x385c10(0x2ee)](_0x5373a5,_0x5373a5);const _0x4e0059=BattleManager[_0x385c10(0x492)],_0x13f9ac=_0x5373a5['Elements'];if(!_0x4e0059)return;_0x4e0059[_0x385c10(0xde0)]=_0x13f9ac;}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xd74),_0x5cc7f2=>{const _0x4f158e=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0xa5e5c2=BattleManager[_0x4f158e(0x492)];if(!_0xa5e5c2)return;_0xa5e5c2[_0x4f158e(0xb50)]();}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x8dc),_0x2f7517=>{const _0x5c7578=_0x5c342f;if(!SceneManager[_0x5c7578(0x371)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ['ConvertParams'](_0x2f7517,_0x2f7517);const _0x422e3d=BattleManager['_action'],_0x53cfbe=_0x2f7517[_0x5c7578(0x260)];if(!_0x422e3d)return;_0x422e3d['_battleCoreForcedElements']=_0x53cfbe;}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xd25),_0x4e38b5=>{const _0xb0883f=_0x5c342f;if(!SceneManager[_0xb0883f(0x371)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x5f05d9=BattleManager[_0xb0883f(0x492)];if(!_0x5f05d9)return;_0x5f05d9[_0xb0883f(0x9e9)]=!![];}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xa0c),_0x39690e=>{const _0x378fc0=_0x5c342f;VisuMZ[_0x378fc0(0xa93)][_0x378fc0(0xa0c)](_0x39690e);}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x6c4),_0x193d8b=>{const _0x1afa2b=_0x5c342f;VisuMZ[_0x1afa2b(0xa93)][_0x1afa2b(0x6c4)](_0x193d8b);}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x70d),_0x20ce08=>{const _0x390d46=_0x5c342f;VisuMZ[_0x390d46(0xa93)][_0x390d46(0x70d)](_0x20ce08);}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x6b0),_0x19e43b=>{const _0x4ae74a=_0x5c342f;VisuMZ['BattleGridSystem'][_0x4ae74a(0x6b0)](_0x19e43b);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x88c),_0x2c0d24=>{const _0x19bf14=_0x5c342f;VisuMZ[_0x19bf14(0xa93)][_0x19bf14(0x88c)](_0x2c0d24);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Grid_AnimationTypeAtNode',_0xcc8cb5=>{const _0x3d256b=_0x5c342f;VisuMZ[_0x3d256b(0xa93)][_0x3d256b(0xa99)](_0xcc8cb5);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xbcf),_0x3f02ef=>{const _0x2fc4aa=_0x5c342f;VisuMZ[_0x2fc4aa(0xa93)][_0x2fc4aa(0xbcf)](_0x3f02ef);}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x7de),_0x4e258c=>{const _0xd44c0d=_0x5c342f;VisuMZ[_0xd44c0d(0xa93)]['ActSeq_Grid_MoveTargetsInDirection'](_0x4e258c);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xdae),_0x342411=>{const _0x2c3643=_0x5c342f;VisuMZ[_0x2c3643(0xa93)]['ActSeq_Grid_PullToTargetNode'](_0x342411);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Grid_PushFromTargetNode',_0x576726=>{const _0x3cffb3=_0x5c342f;VisuMZ[_0x3cffb3(0xa93)][_0x3cffb3(0x2cd)](_0x576726);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x9d4),_0x3c9d7b=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_RemovePassiveStatesFromNode'](_0x3c9d7b);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x849),_0x3dd129=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_RemoveTriggerFromNode'](_0x3dd129);}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x9fd),_0x17cdf3=>{const _0x435a2d=_0x5c342f;VisuMZ[_0x435a2d(0xa93)]['ActSeq_Grid_TeleportToNode'](_0x17cdf3);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x73d),_0x59453d=>{const _0x361787=_0x5c342f;VisuMZ['BattleGridSystem'][_0x361787(0x73d)](_0x59453d);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x713),_0x190f67=>{const _0x297891=_0x5c342f;if(!Imported[_0x297891(0x2dd)])return;if(!SceneManager[_0x297891(0x371)]())return;VisuMZ[_0x297891(0x2ee)](_0x190f67,_0x190f67);const _0x4858cd=VisuMZ[_0x297891(0x432)](_0x190f67[_0x297891(0x63d)]);for(const _0x5654ff of _0x4858cd){if(!_0x5654ff)continue;_0x5654ff['removeHorrorEffect'](_0x297891(0x49a)),_0x5654ff['removeHorrorEffect'](_0x297891(0x7f7)),_0x5654ff[_0x297891(0x3db)]('tv'),_0x5654ff[_0x297891(0x376)]();}$gamePlayer[_0x297891(0x4af)]();}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xcca),_0x235fd9=>{const _0x3b82e1=_0x5c342f;if(!Imported[_0x3b82e1(0x2dd)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x235fd9,_0x235fd9);const _0x508398=VisuMZ[_0x3b82e1(0x432)](_0x235fd9[_0x3b82e1(0x63d)]),_0x266f17=_0x3b82e1(0x7f7);_0x235fd9[_0x3b82e1(0x4c4)]=Math['ceil'](_0x235fd9[_0x3b82e1(0x315)]/0x2),_0x235fd9[_0x3b82e1(0x611)]=_0x235fd9[_0x3b82e1(0x315)],_0x235fd9[_0x3b82e1(0xa22)]=!![];for(const _0x3c7b62 of _0x508398){if(!_0x3c7b62)continue;_0x3c7b62[_0x3b82e1(0x26f)](_0x266f17,_0x235fd9);}$gamePlayer[_0x3b82e1(0x4af)]();}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x370),_0x4792e6=>{const _0x142999=_0x5c342f;if(!Imported[_0x142999(0x2dd)])return;if(!SceneManager[_0x142999(0x371)]())return;VisuMZ[_0x142999(0x2ee)](_0x4792e6,_0x4792e6);const _0x2d966f=VisuMZ['CreateActionSequenceTargets'](_0x4792e6['Targets']);for(const _0x6af299 of _0x2d966f){if(!_0x6af299)continue;_0x6af299[_0x142999(0x3db)](_0x142999(0x7f7));}$gamePlayer[_0x142999(0x4af)]();}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_Horror_NoiseCreate',_0x3da3c5=>{const _0x457ffc=_0x5c342f;if(!Imported[_0x457ffc(0x2dd)])return;if(!SceneManager[_0x457ffc(0x371)]())return;VisuMZ['ConvertParams'](_0x3da3c5,_0x3da3c5);const _0x1c4209=VisuMZ[_0x457ffc(0x432)](_0x3da3c5[_0x457ffc(0x63d)]),_0x23c0e3=_0x457ffc(0x49a);for(const _0x22d4fb of _0x1c4209){if(_0x457ffc(0x445)===_0x457ffc(0x445)){if(!_0x22d4fb)continue;_0x22d4fb['setHorrorEffectSettings'](_0x23c0e3,_0x3da3c5);}else{if(!_0x16cea9[_0x457ffc(0x654)])return;const _0x544d9d=_0x1162e5[_0x457ffc(0x201)][_0x457ffc(0x3ed)];if(!_0x544d9d)return;if(_0x10e7d9['ActSeqImpact']['version']<=1.04){_0x21fa78('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x3c97b8[_0x457ffc(0x549)]();return;}_0x1526ea[_0x457ffc(0x2ee)](_0x944fc4,_0x4935a6);const _0x32ea9d=_0x4a88f4[_0x457ffc(0x3d1)](),_0x1d3f27=_0x4badd4[_0x457ffc(0xaee)](0.01,_0x68b033[_0x457ffc(0xa69)]);_0x2b58d7[_0x457ffc(0x275)](_0x1d3f27,_0x32ea9d);}}$gamePlayer[_0x457ffc(0x4af)]();}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x88e),_0x11e158=>{const _0x722d8d=_0x5c342f;if(!Imported[_0x722d8d(0x2dd)])return;if(!SceneManager[_0x722d8d(0x371)]())return;VisuMZ[_0x722d8d(0x2ee)](_0x11e158,_0x11e158);const _0x1c37a3=VisuMZ[_0x722d8d(0x432)](_0x11e158[_0x722d8d(0x63d)]);for(const _0x380adf of _0x1c37a3){if(!_0x380adf)continue;_0x380adf[_0x722d8d(0x3db)]('noise');}$gamePlayer[_0x722d8d(0x4af)]();}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x7d6),_0x13f759=>{const _0x14f1a0=_0x5c342f;if(!Imported[_0x14f1a0(0x2dd)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x13f759,_0x13f759);const _0x28c392=VisuMZ[_0x14f1a0(0x432)](_0x13f759[_0x14f1a0(0x63d)]),_0x489baa='tv';for(const _0x84ce31 of _0x28c392){if(!_0x84ce31)continue;_0x84ce31[_0x14f1a0(0x26f)](_0x489baa,_0x13f759);}$gamePlayer[_0x14f1a0(0x4af)]();}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x2a7),_0x4b3c67=>{const _0x2d5334=_0x5c342f;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2d5334(0x2ee)](_0x4b3c67,_0x4b3c67);const _0x3cc607=VisuMZ[_0x2d5334(0x432)](_0x4b3c67['Targets']);for(const _0x4f2217 of _0x3cc607){if(!_0x4f2217)continue;_0x4f2217[_0x2d5334(0x3db)]('tv');}$gamePlayer[_0x2d5334(0x4af)]();}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x5c2),_0x2fa57a=>{const _0x1f0b94=_0x5c342f;if(!Imported[_0x1f0b94(0x654)])return;const _0x13002e=SceneManager['_scene']['_spriteset'];if(!_0x13002e)return;if(VisuMZ[_0x1f0b94(0x3c6)][_0x1f0b94(0xda9)]<=1.04){alert(_0x1f0b94(0x5fa)),SceneManager[_0x1f0b94(0x549)]();return;}VisuMZ['ConvertParams'](_0x2fa57a,_0x2fa57a);const _0x4ecdd9=_0x2fa57a[_0x1f0b94(0x94e)];_0x13002e['setupBlueRedInvertImpactFilter'](_0x4ecdd9);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x8dd),_0x1b8534=>{const _0x562763=_0x5c342f;if(!SceneManager[_0x562763(0x371)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1aa7b8=SceneManager[_0x562763(0x201)][_0x562763(0x3ed)];if(!_0x1aa7b8)return;VisuMZ[_0x562763(0x2ee)](_0x1b8534,_0x1b8534);const _0x5e1cdb=_0x1b8534[_0x562763(0xb19)]||0x1,_0x1e713e=_0x1b8534[_0x562763(0x7b5)]||0x1,_0x10cb92=_0x1b8534['EasingType']||'Linear';_0x1aa7b8[_0x562763(0x21d)](_0x5e1cdb,_0x1e713e,_0x10cb92);}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x268),_0x39fb91=>{const _0x508e32=_0x5c342f;if(!Imported[_0x508e32(0x654)])return;const _0x274d90=SceneManager[_0x508e32(0x201)][_0x508e32(0x3ed)];if(!_0x274d90)return;if(VisuMZ[_0x508e32(0x3c6)][_0x508e32(0xda9)]<=1.04){alert(_0x508e32(0x5fa)),SceneManager[_0x508e32(0x549)]();return;}VisuMZ[_0x508e32(0x2ee)](_0x39fb91,_0x39fb91);const _0xd9666c=_0x39fb91[_0x508e32(0x94e)];_0x274d90[_0x508e32(0x317)](_0xd9666c);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x254),_0x197aa5=>{const _0x573986=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x491e52=SceneManager[_0x573986(0x201)][_0x573986(0x3ed)];if(!_0x491e52)return;VisuMZ[_0x573986(0x2ee)](_0x197aa5,_0x197aa5);const _0x5a3e7e=Number(_0x197aa5[_0x573986(0x91e)])||0x0,_0x42b7b6=Number(_0x197aa5[_0x573986(0x8cf)]),_0x54cffc=_0x197aa5[_0x573986(0x7b5)]||0x1,_0x13129f=_0x197aa5[_0x573986(0xd70)]||_0x573986(0x7bc);_0x491e52['setupMotionBlurImpactFilter'](_0x5a3e7e,_0x42b7b6,_0x54cffc,_0x13129f);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x6c9),_0x3da6a8=>{const _0x52de6b=_0x5c342f;if(!SceneManager[_0x52de6b(0x371)]())return;if(!Imported[_0x52de6b(0x654)])return;const _0x4019d7=SceneManager[_0x52de6b(0x201)][_0x52de6b(0x3ed)];if(!_0x4019d7)return;VisuMZ['ConvertParams'](_0x3da6a8,_0x3da6a8);const _0x29d824=Number(_0x3da6a8[_0x52de6b(0x91e)])||0x0,_0x1c40ac=Number(_0x3da6a8[_0x52de6b(0x8cf)]),_0x224be3=_0x3da6a8[_0x52de6b(0x7b5)]||0x1,_0x25512a=_0x3da6a8[_0x52de6b(0xd70)]||'Linear',_0x1569b8=VisuMZ[_0x52de6b(0x432)](_0x3da6a8['Targets']);for(const _0x2a1aaf of _0x1569b8){if(!_0x2a1aaf)continue;if(!_0x2a1aaf[_0x52de6b(0x9d3)]())continue;_0x2a1aaf[_0x52de6b(0x9d3)]()['setupMotionBlurImpactFilter'](_0x29d824,_0x1c40ac,_0x224be3,_0x25512a);}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Impact_MotionTrailCreate',_0x287d21=>{const _0x47577b=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x47577b(0x654)])return;VisuMZ['ConvertParams'](_0x287d21,_0x287d21);const _0x4b07dc={'delay':_0x287d21[_0x47577b(0xa8c)],'duration':_0x287d21[_0x47577b(0x35b)],'hue':_0x287d21[_0x47577b(0xab3)],'opacityStart':_0x287d21[_0x47577b(0xda3)],'tone':_0x287d21[_0x47577b(0x8e2)],'visible':!![]},_0x3a1523=VisuMZ[_0x47577b(0x432)](_0x287d21['Targets']);for(const _0xd60d2c of _0x3a1523){if(!_0xd60d2c)continue;_0xd60d2c[_0x47577b(0x436)](_0x4b07dc);}}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x265),_0x5ed295=>{const _0x12c636=_0x5c342f;if(!SceneManager[_0x12c636(0x371)]())return;if(!Imported[_0x12c636(0x654)])return;VisuMZ[_0x12c636(0x2ee)](_0x5ed295,_0x5ed295);const _0x103708=VisuMZ[_0x12c636(0x432)](_0x5ed295[_0x12c636(0x63d)]);for(const _0x137645 of _0x103708){if('soudC'!==_0x12c636(0xbad))_0x1d614f+=_0x2fb389[_0x12c636(0x4f1)]['OffsetX']||0x0,_0x267590+=_0x46cd76['Enemy']['OffsetY']||0x0;else{if(!_0x137645)continue;_0x137645[_0x12c636(0x3a0)]();}}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Impact_Negative',_0x52afed=>{const _0x34ff65=_0x5c342f;if(!Imported[_0x34ff65(0x654)])return;const _0x5e5a6c=SceneManager[_0x34ff65(0x201)][_0x34ff65(0x3ed)];if(!_0x5e5a6c)return;if(VisuMZ['ActSeqImpact'][_0x34ff65(0xda9)]<=1.04){if(_0x34ff65(0x815)!==_0x34ff65(0x815))this[_0x34ff65(0xb81)]=this[_0x34ff65(0x6e2)],this['_angleRevertOnFinish']&&(this[_0x34ff65(0x6e2)]=0x0,this[_0x34ff65(0xb81)]=0x0);else{alert(_0x34ff65(0x5fa)),SceneManager[_0x34ff65(0x549)]();return;}}VisuMZ[_0x34ff65(0x2ee)](_0x52afed,_0x52afed);const _0x7e5865=_0x52afed[_0x34ff65(0x94e)];_0x5e5a6c[_0x34ff65(0x7f3)](_0x7e5865);}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x285),_0x46822f=>{const _0x22972d=_0x5c342f;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x332e6d=SceneManager[_0x22972d(0x201)][_0x22972d(0x3ed)];if(!_0x332e6d)return;if(VisuMZ[_0x22972d(0x3c6)][_0x22972d(0xda9)]<=1.04){if(_0x22972d(0x25b)!==_0x22972d(0xd5f)){alert(_0x22972d(0x5fa)),SceneManager[_0x22972d(0x549)]();return;}else{if(!_0xc8542['isSideView']())return![];if(!_0x408c29[_0x22972d(0x7a6)]())return![];if(!this[_0x22972d(0x920)]())return![];if(this[_0x22972d(0xa83)]())return!![];if(this[_0x22972d(0x57a)]())return!![];if(this[_0x22972d(0x3f5)]>=0x1)return!![];return![];}}VisuMZ[_0x22972d(0x2ee)](_0x46822f,_0x46822f);const _0x4e394d=_0x46822f[_0x22972d(0x94e)];_0x332e6d['setupOversaturateImpactFilter'](_0x4e394d);}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x58b),_0x12b2f7=>{const _0x594a21=_0x5c342f;if(!Imported[_0x594a21(0x654)])return;const _0x28b287=SceneManager['_scene'][_0x594a21(0x3ed)];if(!_0x28b287)return;VisuMZ[_0x594a21(0x2ee)](_0x12b2f7,_0x12b2f7);const _0x2ddd83=_0x12b2f7['X']||0x0,_0x573a3f=_0x12b2f7['Y']||0x0,_0x155fc7=_0x12b2f7['Amp']||0x0,_0x4d5ed4=_0x12b2f7['Wave']||0x0,_0x4105ea=_0x12b2f7[_0x594a21(0x7b5)]||0x1;_0x28b287[_0x594a21(0x78c)](_0x2ddd83,_0x573a3f,_0x155fc7,_0x4d5ed4,_0x4105ea);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x5af),_0x257baa=>{const _0x1f52ac=_0x5c342f;if(!SceneManager[_0x1f52ac(0x371)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4d3c12=SceneManager[_0x1f52ac(0x201)][_0x1f52ac(0x3ed)];if(!_0x4d3c12)return;VisuMZ[_0x1f52ac(0x2ee)](_0x257baa,_0x257baa);const _0x1d2e54=VisuMZ[_0x1f52ac(0x432)](_0x257baa[_0x1f52ac(0x63d)]),_0x2defd8=_0x257baa[_0x1f52ac(0x69a)],_0x1d8711=_0x257baa['OffsetX']||0x0,_0x2698bf=_0x257baa[_0x1f52ac(0xdb0)]||0x0,_0x2b648e=_0x257baa['Amp']||0x0,_0x2f132d=_0x257baa[_0x1f52ac(0x722)]||0x0,_0x5edf83=_0x257baa[_0x1f52ac(0x7b5)]||0x1;for(const _0x20c14f of _0x1d2e54){if(_0x1f52ac(0x6d7)!=='WFyLR'){if(!_0x20c14f)continue;if(!_0x20c14f[_0x1f52ac(0x9d3)]())continue;const _0x952fd4=_0x20c14f[_0x1f52ac(0x9d3)]();let _0x4f2c6a=_0x952fd4[_0x1f52ac(0xda2)],_0x586b88=_0x952fd4[_0x1f52ac(0x256)];_0x4f2c6a+=(Graphics[_0x1f52ac(0x6e4)]-Graphics['boxWidth'])/0x2,_0x586b88+=(Graphics[_0x1f52ac(0x880)]-Graphics[_0x1f52ac(0x2f9)])/0x2;if(_0x2defd8[_0x1f52ac(0xcbd)](/front/i)){if(_0x1f52ac(0x7c4)!==_0x1f52ac(0x7c4)){if(this[_0x1f52ac(0x5fd)]())return _0x18cabe;return _0x1622df=this[_0x1f52ac(0x44d)](_0x3dc753),_0x118dcb=this['applyHardDamageCap'](_0x3f63f0),_0x518e57;}else _0x4f2c6a+=(_0x20c14f[_0x1f52ac(0x796)]()?0x1:-0x1)*_0x952fd4[_0x1f52ac(0x56a)]()/0x2;}else _0x2defd8[_0x1f52ac(0xcbd)](/back/i)&&(_0x1f52ac(0x9a8)===_0x1f52ac(0x23b)?_0x2b5a7f=_0x8f2409>=_0x2ff0ba?_0x146a5f:_0x3058b0:_0x4f2c6a+=(_0x20c14f['isEnemy']()?-0x1:0x1)*_0x952fd4[_0x1f52ac(0x56a)]()/0x2);if(_0x2defd8[_0x1f52ac(0xcbd)](/head/i))_0x586b88-=_0x952fd4[_0x1f52ac(0x5d7)]();else _0x2defd8[_0x1f52ac(0xcbd)](/center/i)&&('OzIAB'!==_0x1f52ac(0x717)?this[_0x1f52ac(0xc45)](_0x1e72e9):_0x586b88-=_0x952fd4[_0x1f52ac(0x5d7)]()/0x2);_0x4f2c6a+=_0x1d8711,_0x586b88+=_0x2698bf,_0x4d3c12[_0x1f52ac(0x78c)](_0x4f2c6a,_0x586b88,_0x2b648e,_0x2f132d,_0x5edf83);}else this[_0x1f52ac(0x286)]('pagedown',this[_0x1f52ac(0xcab)][_0x1f52ac(0x5c9)](this));}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x4ae),_0x7fee7f=>{const _0x1c66df=_0x5c342f;if(!SceneManager[_0x1c66df(0x371)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xf02ddb=SceneManager[_0x1c66df(0x201)]['_spriteset'];if(!_0xf02ddb)return;VisuMZ['ConvertParams'](_0x7fee7f,_0x7fee7f);const _0x3a7119=VisuMZ['CreateActionSequenceTargets'](_0x7fee7f[_0x1c66df(0x63d)]),_0x2b97ba=_0x7fee7f[_0x1c66df(0x69a)],_0x218d7c=_0x7fee7f[_0x1c66df(0x6f0)]||0x0,_0x370e33=_0x7fee7f[_0x1c66df(0xdb0)]||0x0,_0x33fa07=_0x7fee7f[_0x1c66df(0xacf)]||0x0,_0x36ea5f=_0x7fee7f[_0x1c66df(0x722)]||0x0,_0xbed720=_0x7fee7f[_0x1c66df(0x7b5)]||0x1,_0x40bb22=Math[_0x1c66df(0x7b9)](..._0x3a7119[_0x1c66df(0xd08)](_0x284bed=>_0x284bed[_0x1c66df(0x9d3)]()[_0x1c66df(0xda2)]-_0x284bed[_0x1c66df(0x9d3)]()['mainSpriteWidth']()/0x2)),_0x20a3c6=Math['max'](..._0x3a7119[_0x1c66df(0xd08)](_0x33848e=>_0x33848e[_0x1c66df(0x9d3)]()[_0x1c66df(0xda2)]+_0x33848e[_0x1c66df(0x9d3)]()[_0x1c66df(0x56a)]()/0x2)),_0x4e8eab=Math['min'](..._0x3a7119[_0x1c66df(0xd08)](_0x59587d=>_0x59587d['battler']()[_0x1c66df(0x256)]-_0x59587d[_0x1c66df(0x9d3)]()[_0x1c66df(0x5d7)]())),_0x295735=Math[_0x1c66df(0xaee)](..._0x3a7119[_0x1c66df(0xd08)](_0x197d81=>_0x197d81[_0x1c66df(0x9d3)]()[_0x1c66df(0x256)])),_0x1a3aab=_0x3a7119[_0x1c66df(0x3cd)](_0x3574b6=>_0x3574b6[_0x1c66df(0x47b)]())['length'],_0x5ca367=_0x3a7119['filter'](_0x175ee0=>_0x175ee0[_0x1c66df(0x796)]())['length'];let _0x27c9a8=0x0,_0x4b4b9b=0x0;if(_0x2b97ba['match'](/front/i))_0x27c9a8=_0x1a3aab>=_0x5ca367?_0x40bb22:_0x20a3c6;else{if(_0x2b97ba[_0x1c66df(0xcbd)](/middle/i)){if('xOIot'!==_0x1c66df(0x5b9))_0x27c9a8=(_0x40bb22+_0x20a3c6)/0x2,melee=-0x1;else return _0x497928['BattleCore']['Game_Interpreter_command301'][_0x1c66df(0xded)](this,_0x1131b5);}else{if(_0x2b97ba[_0x1c66df(0xcbd)](/back/i)){if('YGcqP'!=='BHIMG')_0x27c9a8=_0x1a3aab>=_0x5ca367?_0x20a3c6:_0x40bb22;else{const _0x15eed6=_0x206974[_0x1c66df(0xca2)][_0x1c66df(0xc90)][_0x1c66df(0x4f1)];this[_0x1c66df(0x7da)]=_0x15eed6[_0x1c66df(0x366)],this[_0x1c66df(0xd72)]={};}}}}if(_0x2b97ba['match'](/head/i)){if('jmCjl'!==_0x1c66df(0x656))_0x4b4b9b=_0x4e8eab;else return!![];}else{if(_0x2b97ba[_0x1c66df(0xcbd)](/center/i))_0x4b4b9b=(_0x4e8eab+_0x295735)/0x2;else _0x2b97ba[_0x1c66df(0xcbd)](/base/i)&&(_0x4b4b9b=_0x295735);}_0x27c9a8+=(Graphics[_0x1c66df(0x6e4)]-Graphics['boxWidth'])/0x2,_0x4b4b9b+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0x27c9a8+=_0x218d7c,_0x4b4b9b+=_0x370e33,_0xf02ddb[_0x1c66df(0x78c)](_0x27c9a8,_0x4b4b9b,_0x33fa07,_0x36ea5f,_0xbed720);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x816),_0x372767=>{const _0x841dd5=_0x5c342f;if(!Imported[_0x841dd5(0x654)])return;const _0x81ab7a=SceneManager[_0x841dd5(0x201)][_0x841dd5(0x3ed)];if(!_0x81ab7a)return;if(VisuMZ[_0x841dd5(0x3c6)][_0x841dd5(0xda9)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x841dd5(0x549)]();return;}VisuMZ[_0x841dd5(0x2ee)](_0x372767,_0x372767);const _0x36653e=$gameTemp[_0x841dd5(0x3d1)](),_0x4c07eb=Math[_0x841dd5(0xaee)](0.01,_0x372767[_0x841dd5(0xa69)]);$gameTemp[_0x841dd5(0x275)](_0x4c07eb,_0x36653e);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x9bd),_0x77ce26=>{const _0x4c1a37=_0x5c342f;if(!Imported[_0x4c1a37(0x654)])return;const _0x3cc614=SceneManager['_scene'][_0x4c1a37(0x3ed)];if(!_0x3cc614)return;if(VisuMZ[_0x4c1a37(0x3c6)]['version']<=1.04){if('NVBzI'!==_0x4c1a37(0x7aa)){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x4c1a37(0x549)]();return;}else{const _0x2681ab=_0x1bdee3['indexOf'](_0x154b11['toUpperCase']()['trim']());_0x2681ab>=0x0&&_0x2681ab<=0x7&&_0x1821cd[_0x4c1a37(0x926)](_0x2681ab)&&_0x4c0592[_0x4c1a37(0x68c)](_0x2681ab);}}VisuMZ[_0x4c1a37(0x2ee)](_0x77ce26,_0x77ce26);const _0x1c1e56=$gameTemp['getLastPluginCommandInterpreter'](),_0x5ddfee=_0x77ce26['ms']||0x1;VisuMZ[_0x4c1a37(0x3c6)][_0x4c1a37(0x3cf)](_0x5ddfee,_0x1c1e56);}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],'ActSeq_Impact_ZoomBlurPoint',_0x33ccaa=>{const _0x2f4c09=_0x5c342f;if(!Imported[_0x2f4c09(0x654)])return;const _0x37f2ca=SceneManager[_0x2f4c09(0x201)][_0x2f4c09(0x3ed)];if(!_0x37f2ca)return;VisuMZ[_0x2f4c09(0x2ee)](_0x33ccaa,_0x33ccaa);const _0x37babe=_0x33ccaa['X']||0x0,_0x5ad306=_0x33ccaa['Y']||0x0,_0x1795fd=_0x33ccaa[_0x2f4c09(0x7cb)]||0x0,_0x4239cd=_0x33ccaa[_0x2f4c09(0x7d9)]||0x0,_0x80eb66=_0x33ccaa[_0x2f4c09(0x7b5)]||0x1,_0x50cafd=_0x33ccaa['EasingType']||_0x2f4c09(0x7bc);_0x37f2ca[_0x2f4c09(0xb95)](_0x1795fd,_0x37babe,_0x5ad306,_0x4239cd,_0x80eb66,_0x50cafd);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x2c8f8d=>{const _0x2917eb=_0x5c342f;if(!Imported[_0x2917eb(0x654)])return;const _0x433571=SceneManager['_scene'][_0x2917eb(0x3ed)];if(!_0x433571)return;VisuMZ[_0x2917eb(0x2ee)](_0x2c8f8d,_0x2c8f8d);const _0x22d3c4=VisuMZ[_0x2917eb(0x432)](_0x2c8f8d[_0x2917eb(0x63d)]),_0x13ff44=_0x2c8f8d[_0x2917eb(0x69a)],_0x2aacbd=_0x2c8f8d['OffsetX']||0x0,_0x5072d7=_0x2c8f8d[_0x2917eb(0xdb0)]||0x0,_0x1000c6=_0x2c8f8d['Strength']||0x0,_0x57c23f=_0x2c8f8d[_0x2917eb(0x7d9)]||0x0,_0x1d0654=_0x2c8f8d[_0x2917eb(0x7b5)]||0x1,_0x4ea7d7=_0x2c8f8d[_0x2917eb(0xd70)]||_0x2917eb(0x7bc),_0x33f9bc=Math['min'](..._0x22d3c4['map'](_0x1b40d3=>_0x1b40d3[_0x2917eb(0x9d3)]()['_baseX']-_0x1b40d3[_0x2917eb(0x9d3)]()[_0x2917eb(0x56a)]()/0x2)),_0x1926bb=Math[_0x2917eb(0xaee)](..._0x22d3c4['map'](_0x7615b9=>_0x7615b9[_0x2917eb(0x9d3)]()[_0x2917eb(0xda2)]+_0x7615b9[_0x2917eb(0x9d3)]()['mainSpriteWidth']()/0x2)),_0x9211b7=Math[_0x2917eb(0x7b9)](..._0x22d3c4[_0x2917eb(0xd08)](_0x40570b=>_0x40570b[_0x2917eb(0x9d3)]()[_0x2917eb(0x256)]-_0x40570b[_0x2917eb(0x9d3)]()[_0x2917eb(0x5d7)]())),_0x24996c=Math[_0x2917eb(0xaee)](..._0x22d3c4['map'](_0x917881=>_0x917881['battler']()['_baseY'])),_0x5e009c=_0x22d3c4[_0x2917eb(0x3cd)](_0x1ef382=>_0x1ef382['isActor']())['length'],_0xeb3e83=_0x22d3c4[_0x2917eb(0x3cd)](_0x4c6662=>_0x4c6662['isEnemy']())['length'];let _0x4d66c2=0x0,_0x22328c=0x0;if(_0x13ff44[_0x2917eb(0xcbd)](/front/i)){if(_0x2917eb(0x4e6)===_0x2917eb(0x4e6))_0x4d66c2=_0x5e009c>=_0xeb3e83?_0x33f9bc:_0x1926bb;else{if(!_0x4654d1[_0x2917eb(0x371)]())return;if(!_0x3d80ec[_0x2917eb(0xb02)])return;_0x276c4a['ConvertParams'](_0x30f24a,_0x4e6110);const _0x4c68dd=_0x4be9c5[_0x2917eb(0x3d1)](),_0x4e7c08=_0x36dfb1[_0x2917eb(0x289)];_0x4c4a77[_0x2917eb(0x592)](_0x46e08b['OffsetX'],_0x22d8cd[_0x2917eb(0xdb0)],_0x413bad[_0x2917eb(0x7b5)],_0x28ec0d[_0x2917eb(0xd70)]);if(_0x4e7c08)_0x4c68dd[_0x2917eb(0x430)](_0x2917eb(0x613));}}else{if(_0x13ff44['match'](/middle/i))_0x4d66c2=(_0x33f9bc+_0x1926bb)/0x2,melee=-0x1;else _0x13ff44[_0x2917eb(0xcbd)](/back/i)&&(_0x4d66c2=_0x5e009c>=_0xeb3e83?_0x1926bb:_0x33f9bc);}if(_0x13ff44['match'](/head/i))_0x22328c=_0x9211b7;else{if(_0x13ff44['match'](/center/i))_0x2917eb(0xa9e)==='gXyRc'?_0x22328c=(_0x9211b7+_0x24996c)/0x2:_0x4d438e[_0x2917eb(0xa29)]();else _0x13ff44[_0x2917eb(0xcbd)](/base/i)&&('KWmqv'!==_0x2917eb(0x609)?(_0x4b61da[_0x2917eb(0x761)]()[_0x2917eb(0x400)](),_0x2044c6[_0x2917eb(0x76e)](),_0x3dbcbc[_0x2917eb(0x753)](),this['changeInputWindow']()):_0x22328c=_0x24996c);}_0x4d66c2+=(Graphics[_0x2917eb(0x6e4)]-Graphics[_0x2917eb(0xba3)])/0x2,_0x22328c+=(Graphics[_0x2917eb(0x880)]-Graphics['boxHeight'])/0x2,_0x4d66c2+=_0x2aacbd,_0x22328c+=_0x5072d7,_0x433571[_0x2917eb(0xb95)](_0x1000c6,_0x4d66c2,_0x22328c,_0x57c23f,_0x1d0654,_0x4ea7d7);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Inject_AnimationStart',_0x5b7bd6=>{const _0x583eed=_0x5c342f;if(!Imported[_0x583eed(0x654)])return;const _0x1019b2=SceneManager[_0x583eed(0x201)][_0x583eed(0x3ed)];if(!_0x1019b2)return;if(VisuMZ['ActSeqImpact'][_0x583eed(0xda9)]<=1.05){alert(_0x583eed(0x5fa)),SceneManager[_0x583eed(0x549)]();return;}VisuMZ[_0x583eed(0x2ee)](_0x5b7bd6,_0x5b7bd6);const _0x31a346=VisuMZ['CreateActionSequenceTargets'](_0x5b7bd6[_0x583eed(0x63d)]),_0x268888={'filename':_0x5b7bd6[_0x583eed(0x714)],'horzCells':_0x5b7bd6['horzCells']||0x1,'vertCells':_0x5b7bd6[_0x583eed(0xced)]||0x1,'frameDelay':_0x5b7bd6['frameDelay']||0x1,'smooth':_0x5b7bd6[_0x583eed(0xd09)]||![],'anchorX':_0x5b7bd6[_0x583eed(0xbb3)]||0x0,'anchorY':_0x5b7bd6[_0x583eed(0xbe1)]||0x0,'offsetX':_0x5b7bd6[_0x583eed(0x48f)]||0x0,'offsetY':_0x5b7bd6[_0x583eed(0x449)]||0x0};for(const _0x2fc83b of _0x31a346){if(_0x583eed(0xe2b)!=='YYOch'){if(!_0x2fc83b)continue;if(!_0x2fc83b[_0x583eed(0x9d3)]())continue;_0x2fc83b[_0x583eed(0x9d3)]()[_0x583eed(0xc25)](_0x268888);}else _0x57a8d3[_0x583eed(0xd97)]()?_0x3b2e7e[_0x583eed(0xca4)][_0x583eed(0xd3f)][_0x583eed(0xded)](this):_0x42fc10['BattleCore']['Scene_Battle_terminate'][_0x583eed(0xded)](this),_0x4a223c['clearBattleBalloons'](),this[_0x583eed(0x9f5)]();}const _0xbf2804=$gameTemp[_0x583eed(0x3d1)]();_0xbf2804&&_0xbf2804[_0x583eed(0x430)]('battleInjectPrep');}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x578),_0x431f36=>{const _0x6c833b=_0x5c342f;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x38212e=SceneManager['_scene'][_0x6c833b(0x3ed)];if(!_0x38212e)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){alert(_0x6c833b(0x5fa)),SceneManager[_0x6c833b(0x549)]();return;}VisuMZ[_0x6c833b(0x2ee)](_0x431f36,_0x431f36);const _0x2dec05=VisuMZ[_0x6c833b(0x432)](_0x431f36[_0x6c833b(0x63d)]);for(const _0x1a29d3 of _0x2dec05){if(!_0x1a29d3)continue;if(!_0x1a29d3[_0x6c833b(0x9d3)]())continue;_0x1a29d3[_0x6c833b(0x9d3)]()[_0x6c833b(0xbfd)]();}}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x37c),_0x4c3d3f=>{const _0x40945c=_0x5c342f;if(!Imported[_0x40945c(0x654)])return;const _0x3c82b7=SceneManager[_0x40945c(0x201)][_0x40945c(0x3ed)];if(!_0x3c82b7)return;if(VisuMZ[_0x40945c(0x3c6)][_0x40945c(0xda9)]<=1.05){if(_0x40945c(0xb59)!=='GRxXW'){alert(_0x40945c(0x5fa)),SceneManager[_0x40945c(0x549)]();return;}else{const _0x4a5466=[_0x40945c(0x262),_0x40945c(0xafe),_0x40945c(0x238),'PostDamageAsUserJS',_0x40945c(0xc74),_0x40945c(0x1f7),'PreDamageAsTargetJS',_0x40945c(0xa7f),_0x40945c(0x305),_0x40945c(0xb3d),_0x40945c(0xae9),_0x40945c(0xe26),_0x40945c(0x41d),'PostStartBattleJS',_0x40945c(0xc0a),_0x40945c(0xde8),_0x40945c(0x9cc),_0x40945c(0x21c),_0x40945c(0x383),_0x40945c(0x2b8),_0x40945c(0xb9e),_0x40945c(0xc6d),'PreEndTurnJS',_0x40945c(0x649),_0x40945c(0x557),_0x40945c(0xd58)];for(const _0x2a2a0c of _0x4a5466){_0x30d380[_0x40945c(0xca2)][_0x40945c(0x3b5)](_0x11699a,_0x2a2a0c);}}}VisuMZ[_0x40945c(0x2ee)](_0x4c3d3f,_0x4c3d3f);const _0x40f4c0=VisuMZ[_0x40945c(0x432)](_0x4c3d3f[_0x40945c(0x63d)]),_0x279453=_0x4c3d3f[_0x40945c(0xe00)];for(const _0x421855 of _0x40f4c0){if(!_0x421855)continue;if(!_0x421855[_0x40945c(0x9d3)]())continue;_0x421855['battler']()[_0x40945c(0xa71)](_0x279453);}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_Inject_WaitForInjectAni',_0x580fe1=>{const _0x4fb6db=_0x5c342f;if(!SceneManager[_0x4fb6db(0x371)]())return;const _0xf603c8=$gameTemp[_0x4fb6db(0x3d1)]();if(!_0xf603c8)return;_0xf603c8[_0x4fb6db(0x430)](_0x4fb6db(0x26c));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x9a0),_0x3919be=>{const _0x4fa68d=_0x5c342f;if(!SceneManager[_0x4fa68d(0x371)]())return;VisuMZ[_0x4fa68d(0x2ee)](_0x3919be,_0x3919be);const _0x199f1a=$gameTemp[_0x4fa68d(0x3d1)](),_0x4b2e11=BattleManager[_0x4fa68d(0x492)],_0x3ac104=BattleManager[_0x4fa68d(0x52b)],_0x30ccdc=BattleManager[_0x4fa68d(0x56f)];if(!_0x199f1a||!_0x4b2e11||!_0x3ac104)return;if(!_0x4b2e11[_0x4fa68d(0xa87)]())return;const _0x477b31=VisuMZ[_0x4fa68d(0x432)](_0x3919be['Targets']);for(const _0x22b143 of _0x477b31){if(!_0x22b143)continue;_0x30ccdc[_0x4fa68d(0x843)](_0x4fa68d(0xc10),_0x3ac104,_0x22b143);}_0x199f1a[_0x4fa68d(0x430)](_0x4fa68d(0x66a));}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x44a),_0x2eaa99=>{const _0x206f21=_0x5c342f;if(!SceneManager[_0x206f21(0x371)]())return;if(!Imported[_0x206f21(0xdf0)])return;$gameTemp[_0x206f21(0x4cc)]=!![];}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xb54),_0x4a4553=>{const _0x1d09c6=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1d09c6(0x2ee)](_0x4a4553,_0x4a4553);const _0x17b967=[_0x1d09c6(0x23c),'MAXMP',_0x1d09c6(0x527),'DEF',_0x1d09c6(0x925),_0x1d09c6(0x1f8),'AGI',_0x1d09c6(0xa09)],_0x1689b0=_0x4a4553['Buffs'],_0x10009d=_0x4a4553[_0x1d09c6(0x474)],_0xe4b0a0=_0x4a4553[_0x1d09c6(0xaae)],_0x2e630a=VisuMZ[_0x1d09c6(0x432)](_0x4a4553[_0x1d09c6(0x63d)]);for(const _0x29b1be of _0x2e630a){if(_0x1d09c6(0xb32)===_0x1d09c6(0xb32)){if(!_0x29b1be)continue;for(const _0x31bfbc of _0x1689b0){const _0x29564d=_0x17b967[_0x1d09c6(0x570)](_0x31bfbc['toUpperCase']()[_0x1d09c6(0xa5e)]());_0x29564d>=0x0&&_0x29564d<=0x7&&_0x29b1be['addBuff'](_0x29564d,_0xe4b0a0);}for(const _0xb63bcb of _0x10009d){const _0x596c96=_0x17b967['indexOf'](_0xb63bcb[_0x1d09c6(0xb34)]()[_0x1d09c6(0xa5e)]());_0x596c96>=0x0&&_0x596c96<=0x7&&_0x29b1be[_0x1d09c6(0x8b7)](_0x596c96,_0xe4b0a0);}}else _0x2531e4[_0x1d09c6(0xca4)][_0x1d09c6(0xcf2)][_0x1d09c6(0xded)](this);}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x80f),_0x3f32e9=>{const _0x1eb90a=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3f32e9,_0x3f32e9);const _0xe4f4be=_0x3f32e9[_0x1eb90a(0x3ae)],_0x26a95a=VisuMZ[_0x1eb90a(0x432)](_0x3f32e9['Targets']);for(const _0x3f5218 of _0x26a95a){if('xNNlk'!=='xNNlk')_0x5eb433[_0x1eb90a(0xca2)][_0x1eb90a(0x937)]['call'](this);else{if(!_0x3f5218)continue;for(const _0x107bff of _0xe4f4be){if('Flccv'===_0x1eb90a(0x45e)){_0x1e894a-=_0x5c20d9[_0x129b4d];if(_0x418d2d<=0x0)return _0x1e4623;}else _0x3f5218['addState'](_0x107bff);}}}}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xac2),_0x3be321=>{const _0x31f2ff=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3be321,_0x3be321);const _0x516134=BattleManager[_0x31f2ff(0x492)],_0x1c9c7d={'arPenRate':_0x3be321[_0x31f2ff(0x5bb)],'arPenFlat':_0x3be321[_0x31f2ff(0x451)],'arRedRate':_0x3be321[_0x31f2ff(0x215)],'arRedFlat':_0x3be321[_0x31f2ff(0x502)]};_0x516134[_0x31f2ff(0xb97)]=_0x1c9c7d;}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_Mechanics_AnalyzeWeakness',_0x239ca4=>{const _0x301c9a=_0x5c342f;if(!SceneManager[_0x301c9a(0x371)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ['ConvertParams'](_0x239ca4,_0x239ca4);const _0x271960=VisuMZ[_0x301c9a(0x432)](_0x239ca4[_0x301c9a(0x63d)]),_0xec019b=_0x239ca4[_0x301c9a(0x23d)]||0x1;for(const _0x54f514 of _0x271960){if(!_0x54f514)continue;if(!_0x54f514['isEnemy']())continue;_0x54f514[_0x301c9a(0x3f3)](_0xec019b);}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xaf5),_0xee7840=>{const _0x307cdb=_0x5c342f;if(!SceneManager[_0x307cdb(0x371)]())return;if(!Imported[_0x307cdb(0xb7b)])return;if(!BattleManager[_0x307cdb(0x16a)]())return;VisuMZ[_0x307cdb(0x2ee)](_0xee7840,_0xee7840);const _0x133707=VisuMZ['CreateActionSequenceTargets'](_0xee7840[_0x307cdb(0x63d)]),_0x341d92=_0xee7840[_0x307cdb(0x355)],_0x390b9b=_0xee7840[_0x307cdb(0x355)],_0x228af9=_0xee7840[_0x307cdb(0x771)];for(const _0x485816 of _0x133707){if('VRTfb'==='OWkcz'){if(this[_0x307cdb(0x295)]<=0x0)return;if(!this[_0x307cdb(0x759)])return;const _0x50912a=this['_growDuration'],_0x2114d6=this[_0x307cdb(0x2e6)],_0x558a13=this['_growEasing'];_0xb6c8f6[_0x307cdb(0xad9)]?(this[_0x307cdb(0x24b)]=this['applyEasing'](this[_0x307cdb(0x24b)],this[_0x307cdb(0xba4)],_0x50912a,_0x2114d6,_0x558a13),this[_0x307cdb(0x625)]=this[_0x307cdb(0x95d)](this[_0x307cdb(0x625)],this[_0x307cdb(0xdfd)],_0x50912a,_0x2114d6,_0x558a13)):(this[_0x307cdb(0x24b)]=(this[_0x307cdb(0x24b)]*(_0x50912a-0x1)+this[_0x307cdb(0xba4)])/_0x50912a,this[_0x307cdb(0x625)]=(this['_growY']*(_0x50912a-0x1)+this[_0x307cdb(0xdfd)])/_0x50912a);this[_0x307cdb(0x295)]--;if(this['_growDuration']<=0x0)this[_0x307cdb(0x608)]();}else{if(!_0x485816)continue;if(_0x485816['isAtbChargingState']())_0x485816[_0x307cdb(0xc9a)](_0x341d92);else{if(_0x485816['isAtbCastingState']()){if(_0x307cdb(0x31c)!=='wklab')_0x5d09b8[_0x307cdb(0xad9)]?_0x489ab0[_0x307cdb(0x434)]([this],_0x2403dd):_0x1b6aff[_0x307cdb(0x299)]([this],_0x2459a6);else{_0x485816['changeAtbCastTime'](_0x390b9b);if(_0x228af9)_0x485816[_0x307cdb(0xb36)]();}}}}}}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x6c0),_0x541cf0=>{const _0x23e0a4=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0x23e0a4(0x2ee)](_0x541cf0,_0x541cf0);const _0x4da087=VisuMZ['CreateActionSequenceTargets'](_0x541cf0[_0x23e0a4(0x63d)]),_0x54f597=_0x541cf0[_0x23e0a4(0xddf)];for(const _0xdb47e2 of _0x4da087){if(_0x23e0a4(0xb6c)!=='lqBGj')_0x4ad735['BattleCore'][_0x23e0a4(0xbd0)]['call'](this),this[_0x23e0a4(0x995)][_0x23e0a4(0x986)](),this[_0x23e0a4(0x49c)]();else{if(!_0xdb47e2)continue;_0xdb47e2[_0x23e0a4(0xc88)](_0x54f597);}}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xaa9),_0x1416ac=>{const _0x5ee369=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5ee369(0x913)])return;if(!BattleManager[_0x5ee369(0x52b)])return;VisuMZ['ConvertParams'](_0x1416ac,_0x1416ac);const _0x1f24a7=_0x1416ac[_0x5ee369(0xe17)];$gameVariables[_0x5ee369(0x5b2)](_0x1f24a7,BattleManager[_0x5ee369(0x52b)]['toUseBoostPoints']());}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Mechanics_BreakShieldChange',_0xe9347d=>{const _0x1d5735=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x1d5735(0x2ee)](_0xe9347d,_0xe9347d);const _0x5c25c4=VisuMZ[_0x1d5735(0x432)](_0xe9347d[_0x1d5735(0x63d)]),_0x523498=_0xe9347d[_0x1d5735(0x397)];for(const _0x9cc176 of _0x5c25c4){if(!_0x9cc176)continue;if(_0x9cc176[_0x1d5735(0x517)]())continue;if(!_0x9cc176[_0x1d5735(0x922)]())continue;_0x9cc176['alterBreakShield'](_0x523498);}}),PluginManager['registerCommand'](pluginData['name'],_0x5c342f(0x365),_0x426637=>{const _0x5645b4=_0x5c342f;if(!SceneManager[_0x5645b4(0x371)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x5645b4(0x2ee)](_0x426637,_0x426637);const _0x276d6b=VisuMZ[_0x5645b4(0x432)](_0x426637[_0x5645b4(0x63d)]);for(const _0x3c2435 of _0x276d6b){if(!_0x3c2435)continue;if(_0x3c2435[_0x5645b4(0x517)]())continue;if(!_0x3c2435['isAffectedByBreakShield']())continue;_0x3c2435[_0x5645b4(0x8ae)]();}}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xa8a),_0x2d1e0f=>{const _0x277044=_0x5c342f;if(!SceneManager[_0x277044(0x371)]())return;if(!Imported[_0x277044(0xc4a)])return;if(!BattleManager[_0x277044(0x8da)]())return;VisuMZ[_0x277044(0x2ee)](_0x2d1e0f,_0x2d1e0f);const _0x58ae87=VisuMZ['CreateActionSequenceTargets'](_0x2d1e0f[_0x277044(0x63d)]),_0x3ad0b2=_0x2d1e0f['BravePoints'];for(const _0x2c8aa4 of _0x58ae87){if(!_0x2c8aa4)continue;_0x2c8aa4[_0x277044(0x190)](_0x3ad0b2);}}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xce8),_0x2cec57=>{const _0x41545f=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x41545f(0x2ee)](_0x2cec57,_0x2cec57);const _0x49f216=$gameTemp['getLastPluginCommandInterpreter'](),_0x3456d4=BattleManager['_action'],_0x4bb210=BattleManager[_0x41545f(0x52b)];if(!_0x49f216||!_0x3456d4||!_0x4bb210)return;if(!_0x3456d4[_0x41545f(0xa87)]())return;const _0x41ca8a=VisuMZ['CreateActionSequenceTargets'](_0x2cec57['Targets']);for(const _0x5173d5 of _0x41ca8a){if(_0x41545f(0x1f0)!==_0x41545f(0x1f0))_0x53df6b=_0x4df528(_0x56a2c9['$1']),_0x8600a1=_0x64556b(_0x298591['$2']);else{if(!_0x5173d5)continue;_0x2cec57[_0x41545f(0x2ea)]&&(_0x5173d5['removeImmortal'](),_0x5173d5['addState'](_0x5173d5['deathStateId']())),_0x5173d5['isDeathStateAffected']()&&_0x5173d5[_0x41545f(0x5b6)]();}}_0x49f216[_0x41545f(0x430)](_0x41545f(0x472));}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x2c6),_0x41341b=>{const _0x561780=_0x5c342f;if(!SceneManager[_0x561780(0x371)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x561780(0x33e)]())return;VisuMZ['ConvertParams'](_0x41341b,_0x41341b);const _0x4dc433=VisuMZ[_0x561780(0x432)](_0x41341b['Targets']),_0x27a764=_0x41341b[_0x561780(0xc28)];for(const _0x38e981 of _0x4dc433){if(_0x561780(0x9ba)!=='IBCQs'){if(!_0x38e981)continue;_0x38e981['changeTurnOrderByCTB'](_0x27a764);}else{const _0x43ac9d=_0x40a036[_0x561780(0x4e9)]();_0x264375[_0x561780(0xc05)]()&&_0x43ac9d['length']>0x1&&this[_0x561780(0x286)](_0x561780(0xd33),this[_0x561780(0xcab)][_0x561780(0x5c9)](this));}}}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x990),_0xf596c4=>{const _0x345f6c=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x345f6c(0x82e)])return;if(!BattleManager[_0x345f6c(0x33e)]())return;VisuMZ['ConvertParams'](_0xf596c4,_0xf596c4);const _0xafb960=VisuMZ['CreateActionSequenceTargets'](_0xf596c4[_0x345f6c(0x63d)]),_0x2b8166=_0xf596c4[_0x345f6c(0x355)],_0x4b65cf=_0xf596c4['ChargeRate'];for(const _0x1d4bee of _0xafb960){if(_0x345f6c(0x46b)!==_0x345f6c(0x46b))this['_mainSprite'][_0x345f6c(0x812)]['smooth']!==this[_0x345f6c(0xca5)][_0x345f6c(0xc46)]()&&(this['_mainSprite'][_0x345f6c(0x812)][_0x345f6c(0xd09)]=this[_0x345f6c(0xca5)][_0x345f6c(0xc46)]());else{if(!_0x1d4bee)continue;if(_0x1d4bee[_0x345f6c(0x80e)]===_0x345f6c(0xa96))_0x1d4bee[_0x345f6c(0xb00)](_0x2b8166);else{if(_0x1d4bee[_0x345f6c(0x80e)]==='casting'){if(_0x345f6c(0xd0a)!==_0x345f6c(0x85b))_0x1d4bee['changeCtbCastTime'](_0x4b65cf);else return[_0x345f6c(0x97a),_0x345f6c(0xc98),_0x345f6c(0xc4f)][_0x345f6c(0xaec)](this[_0x345f6c(0x8c1)]['currentSymbol']());}}}}}),PluginManager['registerCommand'](pluginData['name'],_0x5c342f(0xd7b),_0x104265=>{const _0x399d63=_0x5c342f;if(!SceneManager[_0x399d63(0x371)]())return;VisuMZ[_0x399d63(0x2ee)](_0x104265,_0x104265);const _0x4fa684=BattleManager[_0x399d63(0x492)];if(!_0x4fa684)return;let _0x26da39=_0x104265[_0x399d63(0xc9f)];_0x4fa684['setCustomDamageFormula'](_0x26da39);}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x2d3),_0x252791=>{const _0x4d0f50=_0x5c342f;if(!SceneManager[_0x4d0f50(0x371)]())return;VisuMZ[_0x4d0f50(0x2ee)](_0x252791,_0x252791);const _0x13d522=VisuMZ[_0x4d0f50(0x432)](_0x252791[_0x4d0f50(0x63d)]);for(const _0x269729 of _0x13d522){if(!_0x269729)continue;if(_0x269729[_0x4d0f50(0x6ad)]())_0x269729[_0x4d0f50(0xc61)]();}}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x3d5),_0x337702=>{const _0x3e3765=_0x5c342f;if(!SceneManager[_0x3e3765(0x371)]())return;VisuMZ['ConvertParams'](_0x337702,_0x337702);const _0xccf50d=$gameTemp['getLastPluginCommandInterpreter'](),_0x323d20=BattleManager[_0x3e3765(0x52b)],_0x401e82=_0x337702[_0x3e3765(0xd7a)];if(!_0xccf50d)return;if(!_0x323d20)return;_0x323d20&&_0x323d20[_0x3e3765(0x541)]()&&_0x401e82[_0x3e3765(0xb34)]()['trim']()!=='UNTITLED'&&_0xccf50d['command119']([_0x401e82]);}),PluginManager['registerCommand'](pluginData['name'],_0x5c342f(0x4fa),_0x5b226f=>{const _0x4c44be=_0x5c342f;if(!SceneManager[_0x4c44be(0x371)]())return;VisuMZ[_0x4c44be(0x2ee)](_0x5b226f,_0x5b226f);const _0x3fcc9b=$gameTemp[_0x4c44be(0x3d1)](),_0xbcebf3=BattleManager[_0x4c44be(0x56f)];if(!_0x3fcc9b)return;const _0x2df3ad=VisuMZ[_0x4c44be(0x432)](_0x5b226f[_0x4c44be(0x727)]),_0x9eb415=VisuMZ[_0x4c44be(0x432)](_0x5b226f['Targets']);for(const _0x1f1b9a of _0x2df3ad){if(_0x4c44be(0x87d)!==_0x4c44be(0x6c3))for(const _0x294f28 of _0x9eb415){if(!_0x294f28)continue;const _0x59cfcc=$dataSkills[_0x1f1b9a['attackSkillId']()];_0xbcebf3[_0x4c44be(0x843)](_0x4c44be(0x9a1),_0x1f1b9a,_0x294f28,_0x59cfcc);}else{_0x2d4bc5('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x5ae981[_0x4c44be(0x549)]();return;}}_0x3fcc9b[_0x4c44be(0x430)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x4b5),_0x3de417=>{const _0x57fedb=_0x5c342f;if(!SceneManager[_0x57fedb(0x371)]())return;VisuMZ['ConvertParams'](_0x3de417,_0x3de417);const _0x13ad31=$gameTemp[_0x57fedb(0x3d1)](),_0x303163=BattleManager[_0x57fedb(0x56f)];if(!_0x13ad31)return;const _0x363c4f=VisuMZ[_0x57fedb(0x432)](_0x3de417[_0x57fedb(0x727)]),_0x540113=VisuMZ[_0x57fedb(0x432)](_0x3de417[_0x57fedb(0x63d)]);for(const _0x5860b6 of _0x363c4f){for(const _0x2de734 of _0x540113){if(!_0x2de734)continue;const _0x20f7cb=$dataSkills[_0x5860b6[_0x57fedb(0x610)]()];_0x303163[_0x57fedb(0x843)](_0x57fedb(0x9a1),_0x5860b6,_0x2de734,_0x20f7cb);}}_0x13ad31['setWaitMode'](_0x57fedb(0x66a));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Mechanics_EmulateItemEffect',_0x5711b0=>{const _0x5133ec=_0x5c342f;if(!SceneManager[_0x5133ec(0x371)]())return;VisuMZ[_0x5133ec(0x2ee)](_0x5711b0,_0x5711b0);const _0x33cff6=$gameTemp[_0x5133ec(0x3d1)](),_0x430db3=BattleManager[_0x5133ec(0x56f)],_0x50d3df=Number(_0x5711b0[_0x5133ec(0xb0c)]||0x1),_0x5f06eb=$dataItems[_0x50d3df];if(!_0x33cff6)return;if(!_0x5f06eb)return;const _0x278cb8=VisuMZ[_0x5133ec(0x432)](_0x5711b0[_0x5133ec(0x727)]),_0x526b49=VisuMZ[_0x5133ec(0x432)](_0x5711b0['Targets']);for(const _0x43bc01 of _0x278cb8){for(const _0x2025b5 of _0x526b49){if(!_0x2025b5)continue;_0x430db3['push'](_0x5133ec(0x9a1),_0x43bc01,_0x2025b5,_0x5f06eb);}}_0x33cff6['setWaitMode'](_0x5133ec(0x66a));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xa45),_0x2768d9=>{const _0x157ebb=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x157ebb(0x2ee)](_0x2768d9,_0x2768d9);let _0x3c0fe2=Number(_0x2768d9[_0x157ebb(0x616)]||0x0);if(_0x3c0fe2<=0x0){if(_0x157ebb(0xd3a)===_0x157ebb(0xa0f)){if(this[_0x157ebb(0x1ab)]())this[_0x157ebb(0x475)]['forceMotion'](_0x48c96d);}else{const _0x28c530=BattleManager[_0x157ebb(0x492)];if(_0x28c530&&_0x28c530['isSkill']())_0x3c0fe2=_0x28c530[_0x157ebb(0xa87)]()['id'];else return;}}const _0x53c1cb=$dataSkills[_0x3c0fe2];if(!_0x53c1cb)return;const _0x122f55=VisuMZ[_0x157ebb(0x432)](_0x2768d9[_0x157ebb(0x727)]);for(const _0x48e618 of _0x122f55){'Hnkvp'==='Hnkvp'?_0x48e618[_0x157ebb(0x75d)](_0x53c1cb):_0x1b097e[_0x157ebb(0xa93)][_0x157ebb(0xdae)](_0x2d2c83);}}),PluginManager['registerCommand'](pluginData['name'],_0x5c342f(0x980),_0x16992c=>{const _0x35452b=_0x5c342f;if(!SceneManager[_0x35452b(0x371)]())return;VisuMZ[_0x35452b(0x2ee)](_0x16992c,_0x16992c);const _0x522798=$gameTemp['getLastPluginCommandInterpreter'](),_0x5dcbb2=BattleManager[_0x35452b(0x56f)],_0xf516db=Number(_0x16992c[_0x35452b(0x616)]||0x1),_0x5a4210=$dataSkills[_0xf516db];if(!_0x522798)return;if(!_0x5a4210)return;const _0x47b270=VisuMZ[_0x35452b(0x432)](_0x16992c['Users']),_0x51b9ca=VisuMZ[_0x35452b(0x432)](_0x16992c[_0x35452b(0x63d)]);for(const _0x89eb33 of _0x47b270){for(const _0x4afe79 of _0x51b9ca){if(!_0x4afe79)continue;_0x5dcbb2['push']('emulateActionEffect',_0x89eb33,_0x4afe79,_0x5a4210);}}_0x522798['setWaitMode']('battlelog');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Mechanics_EnemyEscape',_0x9af840=>{const _0x4eaa5e=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x9af840,_0x9af840);const _0x5770e7=VisuMZ[_0x4eaa5e(0x432)](_0x9af840['Targets']);for(const _0x51ed13 of _0x5770e7){if(!_0x51ed13)continue;if(!_0x51ed13[_0x4eaa5e(0x796)]())continue;_0x51ed13[_0x4eaa5e(0xa5a)]();}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_Mechanics_EtbAction',_0x4c54d9=>{const _0x5c7891=_0x5c342f;if(!SceneManager[_0x5c7891(0x371)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0x5c7891(0x70b)]())return;VisuMZ[_0x5c7891(0x2ee)](_0x4c54d9,_0x4c54d9);const _0x313a36=_0x4c54d9['ActionCount'];BattleManager[_0x5c7891(0x52b)]&&BattleManager[_0x5c7891(0x52b)]['friendsUnit']()[_0x5c7891(0x342)](_0x313a36);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Mechanics_FtbAction',_0x1dface=>{const _0x3946b8=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3946b8(0x4cb)])return;if(!BattleManager[_0x3946b8(0x643)]())return;VisuMZ[_0x3946b8(0x2ee)](_0x1dface,_0x1dface);const _0x47a7cf=_0x1dface['ActionCount'];BattleManager['_subject']&&BattleManager[_0x3946b8(0x52b)][_0x3946b8(0xab5)]()[_0x3946b8(0x765)](_0x47a7cf);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xd2b),_0xb8ad93=>{const _0x437091=_0x5c342f;if(!SceneManager[_0x437091(0x371)]())return;VisuMZ[_0x437091(0x2ee)](_0xb8ad93,_0xb8ad93);const _0x206524=VisuMZ[_0x437091(0x432)](_0xb8ad93[_0x437091(0x63d)]),_0x5de380=_0xb8ad93[_0x437091(0x2e5)],_0x5c9fb7=_0xb8ad93[_0x437091(0x1ba)],_0x5555ef=_0xb8ad93['MP_Rate'],_0x45a1ca=_0xb8ad93['MP_Flat'],_0x1d6c0d=_0xb8ad93[_0x437091(0xa35)],_0x1e4873=_0xb8ad93['TP_Flat'],_0x3ebdef=_0xb8ad93['ShowPopup'];for(const _0x390968 of _0x206524){if(!_0x390968)continue;const _0x455921=_0x390968[_0x437091(0x920)](),_0x574380=Math[_0x437091(0x5c1)](_0x5de380*_0x390968[_0x437091(0x392)]+_0x5c9fb7),_0x44fe11=Math[_0x437091(0x5c1)](_0x5555ef*_0x390968[_0x437091(0x65d)]+_0x45a1ca),_0x5d711f=Math['round'](_0x1d6c0d*_0x390968[_0x437091(0xd13)]()+_0x1e4873);if(_0x574380!==0x0)_0x390968[_0x437091(0xda1)](_0x574380);if(_0x44fe11!==0x0)_0x390968[_0x437091(0xa1e)](_0x44fe11);if(_0x5d711f!==0x0)_0x390968['gainTp'](_0x5d711f);if(_0x3ebdef)_0x390968[_0x437091(0xc61)]();_0x455921&&_0x390968[_0x437091(0x541)]()&&_0x390968[_0x437091(0x5b6)]();}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xb6d),_0x4baabb=>{const _0x32a65e=_0x5c342f;if(!SceneManager[_0x32a65e(0x371)]())return;VisuMZ[_0x32a65e(0x2ee)](_0x4baabb,_0x4baabb);const _0x1919c6=VisuMZ[_0x32a65e(0x432)](_0x4baabb['Targets']);for(const _0x4107cd of _0x1919c6){if(!_0x4107cd)continue;_0x4107cd[_0x32a65e(0x881)](_0x4baabb['Immortal']);}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xd6a),_0x5c9694=>{const _0x21ee86=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x21ee86(0x2ee)](_0x5c9694,_0x5c9694);const _0x572001=BattleManager[_0x21ee86(0x492)],_0x1acf39={'criticalHitRate':_0x5c9694['CriticalHitRate'],'criticalHitFlat':_0x5c9694[_0x21ee86(0x5ea)],'criticalDmgRate':_0x5c9694[_0x21ee86(0xd59)],'criticalDmgFlat':_0x5c9694[_0x21ee86(0x583)],'damageRate':_0x5c9694['DamageRate'],'damageFlat':_0x5c9694[_0x21ee86(0x6fb)],'hitRate':_0x5c9694[_0x21ee86(0xb26)],'hitFlat':_0x5c9694[_0x21ee86(0x3f4)]};_0x572001['_multipliers']=_0x1acf39;}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_Mechanics_OnceParallel',_0x131a3e=>{const _0x496e0e=_0x5c342f;if(!SceneManager[_0x496e0e(0x371)]())return;VisuMZ[_0x496e0e(0x2ee)](_0x131a3e,_0x131a3e);const _0x44e777=_0x131a3e['CommonEventID'];SceneManager[_0x496e0e(0x201)][_0x496e0e(0x220)](_0x44e777);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x996),_0x44f977=>{const _0x4d587b=_0x5c342f;if(!SceneManager[_0x4d587b(0x371)]())return;if(!Imported[_0x4d587b(0xc7f)])return;if(!BattleManager[_0x4d587b(0xdf7)]())return;VisuMZ[_0x4d587b(0x2ee)](_0x44f977,_0x44f977);const _0x1b0b59=VisuMZ[_0x4d587b(0x432)](_0x44f977[_0x4d587b(0x63d)]);for(const _0x2c92e7 of _0x1b0b59){if(!_0x2c92e7)continue;let _0x2516ab=_0x44f977[_0x4d587b(0x758)],_0x3bc567=_0x44f977[_0x4d587b(0xdc8)],_0x57c46f=_0x44f977[_0x4d587b(0x420)];BattleManager[_0x4d587b(0x40f)][_0x4d587b(0xaec)](_0x2c92e7)?_0x2516ab+=_0x57c46f:_0x4d587b(0xe2e)!=='eaNSg'?(this['_battleCoreBattleStartEvent']=!![],_0x168c98[_0x4d587b(0x580)](_0x3d71ae[_0x4d587b(0x5b1)]),_0x320d97[_0x4d587b(0x8c5)](),_0x5cbb5b['_interpreter'][_0x4d587b(0xbae)]=!![]):_0x3bc567+=_0x57c46f,BattleManager[_0x4d587b(0xbaa)](_0x2c92e7,-_0x2516ab,![]),BattleManager[_0x4d587b(0xbaa)](_0x2c92e7,-_0x3bc567,!![]);}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xb0b),_0x5e98bc=>{const _0x5d0693=_0x5c342f;if(!SceneManager[_0x5d0693(0x371)]())return;if(!Imported[_0x5d0693(0xc26)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x5d0693(0x2ee)](_0x5e98bc,_0x5e98bc);const _0x310255=BattleManager[_0x5d0693(0x52b)][_0x5d0693(0xab5)](),_0x48ec02=_0x5e98bc[_0x5d0693(0xb66)],_0x1ad43c=_0x5e98bc[_0x5d0693(0xa15)]||'unchanged',_0x6868cb=_0x5e98bc[_0x5d0693(0x8b9)]||_0x5d0693(0x199),_0x4094ed=_0x5e98bc[_0x5d0693(0x168)]||0x0,_0x58e51d=_0x5e98bc[_0x5d0693(0xa13)]||0x0;(_0x310255['canAlterActionCostPTB']()||_0x48ec02)&&(_0x5d0693(0x72f)!==_0x5d0693(0x72f)?(this[_0x5d0693(0x56f)]['push'](_0x5d0693(0x3ff),_0x43f326[_0x5d0693(0x964)][_0x5d0693(0x266)](_0x2a4d35[_0x5d0693(0x25e)]())),this[_0x5d0693(0x56f)]['push'](_0x5d0693(0x630))):(_0x48ec02&&(_0x310255['_ptbActionCost']=_0x310255[_0x5d0693(0xcc6)]||{},_0x310255[_0x5d0693(0xcc6)][_0x5d0693(0x677)]=0x0),_0x310255[_0x5d0693(0xafb)](_0x1ad43c,_0x6868cb,_0x4094ed,_0x58e51d)));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x8e0),_0x557c6f=>{const _0x18231e=_0x5c342f;if(!SceneManager[_0x18231e(0x371)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x18231e(0x34b)]())return;VisuMZ[_0x18231e(0x2ee)](_0x557c6f,_0x557c6f);const _0x408654=BattleManager[_0x18231e(0x52b)]['friendsUnit']();let _0x5882a1=Math[_0x18231e(0xaee)](_0x557c6f[_0x18231e(0x80c)],0x0),_0x107cd7=_0x408654[_0x18231e(0x7f6)](),_0x4fda82=_0x408654[_0x18231e(0x871)]();while(_0x5882a1--){if(_0x107cd7<=0x0&&_0x4fda82<=0x0){if(_0x18231e(0x1d9)!==_0x18231e(0x1d9))_0x519a80[_0x18231e(0x908)](this[_0x18231e(0x455)]()[_0x18231e(0x427)]());else break;}else{if(_0x107cd7>0x0)_0x107cd7--,_0x4fda82++;else{if(_0x18231e(0x87f)==='kJqoZ')_0x4fda82--;else{const _0x42770d=_0x562c05[_0x18231e(0xd90)]()[_0x4e8dad],_0x545a4e=new _0x3c26dc();_0x545a4e[_0x18231e(0x85c)](_0x42770d),_0x545a4e[_0x18231e(0xb89)](_0x42770d),_0x545a4e[_0x18231e(0x2a5)](),this[_0x18231e(0x36f)][_0x18231e(0x843)](_0x545a4e),this[_0x18231e(0x440)][_0x18231e(0x393)](_0x545a4e);}}}}_0x408654['setFullActionsPTB'](_0x107cd7),_0x408654[_0x18231e(0xa2d)](_0x4fda82);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xc0f),_0x57f3ac=>{const _0xa416aa=_0x5c342f;if(!SceneManager[_0xa416aa(0x371)]())return;if(!Imported[_0xa416aa(0xc26)])return;if(!BattleManager[_0xa416aa(0x34b)]())return;VisuMZ['ConvertParams'](_0x57f3ac,_0x57f3ac);const _0x327960=BattleManager['_subject']['friendsUnit']();let _0x135b61=_0x57f3ac[_0xa416aa(0xb86)],_0x21e008=_0x57f3ac['HalfActions'];_0x327960[_0xa416aa(0x322)](_0x135b61),_0x327960['gainHalfActionsPTB'](_0x21e008);}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x872),_0x10dbcc=>{const _0xea5ea0=_0x5c342f;if(!SceneManager[_0xea5ea0(0x371)]())return;VisuMZ['ConvertParams'](_0x10dbcc,_0x10dbcc);const _0x277f8c=[_0xea5ea0(0x23c),_0xea5ea0(0x6de),_0xea5ea0(0x527),_0xea5ea0(0x1a8),_0xea5ea0(0x925),_0xea5ea0(0x1f8),'AGI','LUK'],_0x5e75c4=_0x10dbcc[_0xea5ea0(0xbf3)],_0xa80ce8=_0x10dbcc['Debuffs'],_0x3b8185=VisuMZ[_0xea5ea0(0x432)](_0x10dbcc['Targets']);for(const _0x33ef4d of _0x3b8185){if('BhJAH'!==_0xea5ea0(0xcbf)){if(!_0x33ef4d)continue;for(const _0x52b603 of _0x5e75c4){const _0x537076=_0x277f8c['indexOf'](_0x52b603[_0xea5ea0(0xb34)]()['trim']());_0x537076>=0x0&&_0x537076<=0x7&&_0x33ef4d[_0xea5ea0(0x926)](_0x537076)&&(_0xea5ea0(0xd50)===_0xea5ea0(0x905)?_0x1068dc['prototype'][_0xea5ea0(0xbeb)][_0xea5ea0(0xded)](this):_0x33ef4d[_0xea5ea0(0x68c)](_0x537076));}for(const _0x5ec9d1 of _0xa80ce8){const _0x73b3c1=_0x277f8c[_0xea5ea0(0x570)](_0x5ec9d1[_0xea5ea0(0xb34)]()[_0xea5ea0(0xa5e)]());_0x73b3c1>=0x0&&_0x73b3c1<=0x7&&_0x33ef4d[_0xea5ea0(0x80d)](_0x73b3c1)&&_0x33ef4d[_0xea5ea0(0x68c)](_0x73b3c1);}}else{if(this[_0xea5ea0(0x1ab)]()){if(this[_0xea5ea0(0x81c)]()>=0x1)return!![];return this[_0xea5ea0(0x5d5)]()[_0xea5ea0(0xdb5)];}else return!![];}}}),PluginManager['registerCommand'](pluginData['name'],_0x5c342f(0x50a),_0x5c702c=>{const _0x156765=_0x5c342f;if(!SceneManager[_0x156765(0x371)]())return;VisuMZ[_0x156765(0x2ee)](_0x5c702c,_0x5c702c);const _0x45f521=_0x5c702c[_0x156765(0x3ae)],_0x286d35=VisuMZ[_0x156765(0x432)](_0x5c702c['Targets']);for(const _0x4c2ded of _0x286d35){if(_0x156765(0xd9b)!==_0x156765(0xd9b)){const _0x24a681=_0x53cf79[_0x156765(0x201)][_0x156765(0x338)];_0x24a681&&_0x24a681['refreshActorPortrait'](this);}else{if(!_0x4c2ded)continue;for(const _0x3c5820 of _0x45f521){if(_0x156765(0xd43)===_0x156765(0x83e)){const _0x51675c=this[_0x156765(0x465)]['skillTypes']();for(const _0x2e09ac of _0x51675c){this[_0x156765(0x69e)](_0x2e09ac);}}else _0x4c2ded[_0x156765(0xbf4)](_0x3c5820);}}}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xc62),_0x1aa6c8=>{const _0x2e0c8e=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0x2e0c8e(0x2ee)](_0x1aa6c8,_0x1aa6c8);const _0x5844ad=VisuMZ[_0x2e0c8e(0x432)](_0x1aa6c8['Targets']),_0x3b7d77=Number(_0x1aa6c8[_0x2e0c8e(0x2d7)]),_0x1994bf=Number(_0x1aa6c8[_0x2e0c8e(0xaae)]),_0x3f08f4=_0x1aa6c8[_0x2e0c8e(0xa66)];for(const _0x168a62 of _0x5844ad){if(!_0x168a62)continue;_0x3f08f4&&!_0x168a62[_0x2e0c8e(0x21b)](_0x3b7d77)?(_0x168a62[_0x2e0c8e(0x827)](_0x3b7d77),_0x168a62[_0x2e0c8e(0xa5b)](_0x3b7d77,_0x1994bf)):_0x2e0c8e(0x412)!==_0x2e0c8e(0xa43)?_0x168a62[_0x2e0c8e(0xb4e)](_0x3b7d77,_0x1994bf):_0x311f5f[_0x2e0c8e(0xca2)]['ParseArmorNotetags'][_0x2e0c8e(0xded)](this,_0x2c0dd2);}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Mechanics_StateTurnsChangeTo',_0x33a20d=>{const _0x192d25=_0x5c342f;if(!SceneManager[_0x192d25(0x371)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0x192d25(0x2ee)](_0x33a20d,_0x33a20d);const _0x5abd12=VisuMZ[_0x192d25(0x432)](_0x33a20d[_0x192d25(0x63d)]),_0x10ddda=Number(_0x33a20d['StateID']),_0x282867=Math['max'](Number(_0x33a20d[_0x192d25(0xaae)]),0x0),_0x2dfdab=_0x33a20d[_0x192d25(0xa66)];for(const _0x207f25 of _0x5abd12){if(!_0x207f25)continue;_0x2dfdab&&!_0x207f25[_0x192d25(0x21b)](_0x10ddda)&&_0x207f25[_0x192d25(0x827)](_0x10ddda),_0x207f25[_0x192d25(0xa5b)](_0x10ddda,_0x282867);}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xb06),_0x38f5af=>{const _0x41bfac=_0x5c342f;if(!SceneManager[_0x41bfac(0x371)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x41bfac(0x2ee)](_0x38f5af,_0x38f5af);const _0x48a133=_0x38f5af[_0x41bfac(0x668)],_0x3b649d=VisuMZ[_0x41bfac(0x432)](_0x38f5af[_0x41bfac(0x63d)]),_0x25876f=_0x38f5af['ForceExploited'],_0x8ff557=_0x38f5af[_0x41bfac(0x24e)],_0x585df0=_0x38f5af[_0x41bfac(0x1fe)],_0xcd3276=BattleManager['_action'];if(_0x48a133)for(const _0x315e4c of _0x3b649d){if(!_0x315e4c)continue;if(_0x315e4c===user)continue;if(_0x25876f)_0x315e4c[_0x41bfac(0x384)](![]);_0x315e4c['becomeSTBExploited'](BattleManager['_subject'],_0xcd3276);}if(_0x8ff557&&BattleManager[_0x41bfac(0x52b)]){if(_0x41bfac(0x737)!==_0x41bfac(0x414)){if(_0x585df0)BattleManager[_0x41bfac(0x52b)][_0x41bfac(0x384)](![]);const _0x2af0fb=_0x3b649d[0x0];BattleManager[_0x41bfac(0xc94)](_0x2af0fb,_0xcd3276);}else{if(!_0xfcfd52[_0x41bfac(0x371)]())return;_0x3a5c48[_0x41bfac(0x2ee)](_0x39de24,_0x439286);const _0x694855=_0x204c31[_0x41bfac(0x565)];_0x42f53a[_0x41bfac(0x201)][_0x41bfac(0x220)](_0x694855);}}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x978),_0x5b2fb0=>{const _0x2212da=_0x5c342f;if(!SceneManager[_0x2212da(0x371)]())return;if(!Imported[_0x2212da(0xdd6)])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0x5b2fb0,_0x5b2fb0);const _0x2603d7=_0x5b2fb0['Actions'];BattleManager[_0x2212da(0x52b)]&&BattleManager[_0x2212da(0x52b)][_0x2212da(0xa40)](_0x2603d7);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xddc),_0xc6e9e8=>{const _0x11426e=_0x5c342f;if(!SceneManager[_0x11426e(0x371)]())return;if(!Imported[_0x11426e(0xdd6)])return;if(!BattleManager[_0x11426e(0xa9a)]())return;VisuMZ['ConvertParams'](_0xc6e9e8,_0xc6e9e8);let _0x5db968=_0xc6e9e8[_0x11426e(0x362)];if(BattleManager[_0x11426e(0x52b)]){BattleManager[_0x11426e(0x52b)][_0x11426e(0xe1d)]=BattleManager[_0x11426e(0x52b)][_0x11426e(0xe1d)]||[];while(_0x5db968--){if(BattleManager[_0x11426e(0x52b)][_0x11426e(0xe1d)][_0x11426e(0xc5c)]<=0x0)break;BattleManager[_0x11426e(0x52b)][_0x11426e(0xe1d)][_0x11426e(0x728)]();}}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Mechanics_SwapWeapon',_0x39d248=>{const _0x468a84=_0x5c342f;if(!SceneManager[_0x468a84(0x371)]())return;if(!Imported[_0x468a84(0x5e4)])return;VisuMZ[_0x468a84(0x2ee)](_0x39d248,_0x39d248);const _0x557798=VisuMZ['CreateActionSequenceTargets'](_0x39d248[_0x468a84(0x63d)]),_0x4afe93=_0x39d248[_0x468a84(0xd38)];for(const _0x2d176a of _0x557798){if(!_0x2d176a)continue;if(!_0x2d176a[_0x468a84(0x47b)]())continue;_0x2d176a[_0x468a84(0x6a8)](_0x4afe93);}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x6c2),_0x1b01f3=>{const _0x40ced7=_0x5c342f;if(!SceneManager[_0x40ced7(0x371)]())return;VisuMZ[_0x40ced7(0x2ee)](_0x1b01f3,_0x1b01f3);const _0x5cd398=VisuMZ['CreateActionSequenceTargets'](_0x1b01f3[_0x40ced7(0x63d)]),_0x390e51=_0x1b01f3[_0x40ced7(0x491)],_0x313127={'textColor':ColorManager[_0x40ced7(0x915)](_0x1b01f3[_0x40ced7(0x83d)]),'flashColor':_0x1b01f3[_0x40ced7(0x5c0)],'flashDuration':_0x1b01f3[_0x40ced7(0x97b)]};for(const _0x414dca of _0x5cd398){if(!_0x414dca)continue;_0x414dca[_0x40ced7(0x84b)](_0x390e51,_0x313127);}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_Mechanics_VariablePopup',_0x5cbac6=>{const _0x5c82df=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5c82df(0x2ee)](_0x5cbac6,_0x5cbac6);const _0x45c215=VisuMZ[_0x5c82df(0x432)](_0x5cbac6[_0x5c82df(0x63d)]);let _0x46d1b4=$gameVariables[_0x5c82df(0xbc0)](_0x5cbac6[_0x5c82df(0x90d)]);Imported['VisuMZ_0_CoreEngine']&&_0x5cbac6[_0x5c82df(0x940)]&&('wBaGh'==='diMob'?(_0x5dd999['BattleCore']['Sprite_Enemy_setBattler'][_0x5c82df(0xded)](this,_0x2e854e),this[_0x5c82df(0x189)](_0x4c0d3a)):_0x46d1b4=VisuMZ[_0x5c82df(0xd14)](_0x46d1b4));const _0x5c2245=String(_0x46d1b4),_0x32fcec={'textColor':ColorManager[_0x5c82df(0x915)](_0x5cbac6[_0x5c82df(0x83d)]),'flashColor':_0x5cbac6[_0x5c82df(0x5c0)],'flashDuration':_0x5cbac6['FlashDuration']};for(const _0x418b5c of _0x45c215){if(_0x5c82df(0x919)!=='Tzmjl'){if(!_0x418b5c)continue;_0x418b5c[_0x5c82df(0x84b)](_0x5c2245,_0x32fcec);}else _0x28672a[_0x5c82df(0x843)](_0x2250b8[_0x5c82df(0x8eb)]());}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x7b6),_0x28dedc=>{const _0x38c1b1=_0x5c342f;if(!SceneManager[_0x38c1b1(0x371)]())return;const _0x51ee24=$gameTemp[_0x38c1b1(0x3d1)]();if(!_0x51ee24)return;_0x51ee24['setWaitMode'](_0x38c1b1(0x472));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x5e0),_0x1c7aaa=>{const _0x3bf65b=_0x5c342f;if(!SceneManager[_0x3bf65b(0x371)]())return;VisuMZ[_0x3bf65b(0x2ee)](_0x1c7aaa,_0x1c7aaa);const _0x4f21ec=VisuMZ[_0x3bf65b(0x432)](_0x1c7aaa['Targets']);for(const _0x155ef2 of _0x4f21ec){if(!_0x155ef2)continue;_0x155ef2[_0x3bf65b(0x1b8)]();}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Motion_FreezeMotionFrame',_0x5eab28=>{const _0x17fe48=_0x5c342f;if(!SceneManager[_0x17fe48(0x371)]())return;VisuMZ[_0x17fe48(0x2ee)](_0x5eab28,_0x5eab28);const _0x8566a8=VisuMZ[_0x17fe48(0x432)](_0x5eab28['Targets']),_0x4a2af6=_0x5eab28[_0x17fe48(0x26a)][_0x17fe48(0xda0)]()['trim']();let _0x1f6f48=_0x5eab28['ShowWeapon'];const _0x4d7884=_0x5eab28[_0x17fe48(0xa58)];![_0x17fe48(0x97a),_0x17fe48(0x784),'swing',_0x17fe48(0x92e)][_0x17fe48(0xaec)](_0x4a2af6)&&(_0x1f6f48=![]);for(const _0x368416 of _0x8566a8){if(!_0x368416)continue;_0x368416[_0x17fe48(0x6ed)](_0x4a2af6,_0x1f6f48,_0x4d7884);}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x639),_0x5e5432=>{const _0x431778=_0x5c342f;if(!SceneManager[_0x431778(0x371)]())return;VisuMZ['ConvertParams'](_0x5e5432,_0x5e5432);const _0x5f1406=VisuMZ[_0x431778(0x432)](_0x5e5432[_0x431778(0x63d)]),_0x3759cc=_0x5e5432[_0x431778(0x26a)][_0x431778(0xda0)]()[_0x431778(0xa5e)](),_0x4ae029=_0x5e5432[_0x431778(0xc70)];for(const _0x253948 of _0x5f1406){if(!_0x253948)continue;_0x253948['_showWeapon']=_0x4ae029;if(_0x3759cc['match'](/ATTACK[ ](\d+)/i))_0x431778(0xc6e)!=='NDrbU'?_0x253948[_0x431778(0x7ee)](Number(RegExp['$1'])):_0x917791?(this[_0x431778(0xd2e)]['x']=(_0x2abc80[_0x431778(0x6e4)]-_0x2dc476['boxWidth'])/0x2,this['_windowLayer']['y']=(_0x2676c3['height']-_0x2d3d58[_0x431778(0x2f9)])/0x2):(this[_0x431778(0xd2e)]['x']=_0xf90ae4[_0x431778(0x6e4)]*0xa,this[_0x431778(0xd2e)]['y']=_0x1b5502[_0x431778(0x880)]*0xa);else _0x3759cc===_0x431778(0x97a)?'CwUmO'==='NNZcB'?_0x585f04[_0x431778(0xca2)]['ParseSkillNotetags'][_0x431778(0xded)](this,_0x26eae6):_0x253948['performAttack']():'dkTjY'==='ZENBE'?[0x1,0x2,0x5,0x6][_0x431778(0xaec)](_0x426b63[_0x431778(0xa87)]()[_0x431778(0x8f5)][_0x431778(0xb48)])?this[_0x431778(0xe23)]():this['requestMotion'](_0x431778(0x802)):_0x253948['requestMotion'](_0x3759cc);if(!_0x4ae029)_0x253948[_0x431778(0x69f)](0x0);else{if(_0x4ae029&&[_0x431778(0x784),'swing',_0x431778(0x8d7)][_0x431778(0xaec)](_0x3759cc)){}}_0x253948[_0x431778(0x193)]=undefined;}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x346),_0x5f5086=>{const _0x4cb866=_0x5c342f;if(!SceneManager[_0x4cb866(0x371)]())return;VisuMZ[_0x4cb866(0x2ee)](_0x5f5086,_0x5f5086);const _0x4a39bd=BattleManager['_action'];if(!_0x4a39bd)return;if(!_0x4a39bd[_0x4cb866(0xa87)]())return;const _0x2459e0=VisuMZ[_0x4cb866(0x432)](_0x5f5086[_0x4cb866(0x63d)]);for(const _0x4bc552 of _0x2459e0){if(_0x4cb866(0xa6a)===_0x4cb866(0xa6a)){if(!_0x4bc552)continue;_0x4bc552['performAction'](_0x4a39bd);}else this[_0x4cb866(0x7da)]=_0x727240(_0x7a4efa['$1']);}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x40c),_0x2f1829=>{const _0x5c7c22=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5c7c22(0x2ee)](_0x2f1829,_0x2f1829);const _0x535c52=VisuMZ[_0x5c7c22(0x432)](_0x2f1829['Targets']);for(const _0x5ad971 of _0x535c52){if(!_0x5ad971)continue;if(!_0x5ad971['battler']())continue;_0x5ad971[_0x5c7c22(0x9d3)]()[_0x5c7c22(0xc59)]();}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x768),_0x46d87f=>{const _0x20fcbc=_0x5c342f;if(!SceneManager[_0x20fcbc(0x371)]())return;VisuMZ['ConvertParams'](_0x46d87f,_0x46d87f);const _0x196023=$gameTemp[_0x20fcbc(0x3d1)](),_0x58b720=_0x46d87f['MotionFrameWait']*Sprite_Battler['_motionSpeed'];_0x196023[_0x20fcbc(0x630)](_0x58b720);}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],'ActSeq_Movement_BattleStep',_0x2ecbc4=>{const _0x2f84a0=_0x5c342f;if(!SceneManager[_0x2f84a0(0x371)]())return;VisuMZ['ConvertParams'](_0x2ecbc4,_0x2ecbc4);const _0x293249=$gameTemp[_0x2f84a0(0x3d1)](),_0x2a00aa=BattleManager[_0x2f84a0(0x492)];if(!_0x293249||!_0x2a00aa)return;if(!_0x2a00aa[_0x2f84a0(0xa87)]())return;const _0x1e29d5=VisuMZ[_0x2f84a0(0x432)](_0x2ecbc4[_0x2f84a0(0x63d)]);for(const _0x728944 of _0x1e29d5){if(!_0x728944)continue;_0x728944['performActionStart'](_0x2a00aa);}if(_0x2ecbc4[_0x2f84a0(0x638)])_0x293249[_0x2f84a0(0x430)]('battleMove');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xaba),_0x2ddf41=>{const _0x4f00e1=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4f00e1(0x9a3)]())return;VisuMZ['ConvertParams'](_0x2ddf41,_0x2ddf41);const _0xf04e1d=$gameTemp['getLastPluginCommandInterpreter'](),_0x3af551=VisuMZ[_0x4f00e1(0x432)](_0x2ddf41[_0x4f00e1(0x63d)]),_0x387918=_0x2ddf41[_0x4f00e1(0xa31)],_0x491b93=_0x2ddf41[_0x4f00e1(0x84c)],_0x367957=_0x2ddf41[_0x4f00e1(0x313)],_0x52ed61=_0x2ddf41[_0x4f00e1(0x7b5)],_0x21f072=_0x2ddf41[_0x4f00e1(0x620)],_0x355424=_0x2ddf41['EasingType'],_0x45348b=_0x2ddf41[_0x4f00e1(0x26a)],_0x103e36=_0x2ddf41['WaitForMovement'];if(!_0xf04e1d)return;for(const _0x59817f of _0x3af551){if(!_0x59817f)continue;let _0x3b0516=_0x491b93,_0x471220=_0x367957;if(_0x387918['match'](/horz/i))_0x3b0516*=_0x59817f[_0x4f00e1(0x47b)]()?-0x1:0x1;if(_0x387918['match'](/vert/i))_0x471220*=_0x59817f[_0x4f00e1(0x47b)]()?-0x1:0x1;_0x59817f[_0x4f00e1(0x2e9)](_0x3b0516,_0x471220,_0x52ed61,_0x21f072,_0x355424),_0x59817f[_0x4f00e1(0x92b)](_0x45348b);}if(_0x103e36)_0xf04e1d[_0x4f00e1(0x430)](_0x4f00e1(0xdc6));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x3dc),_0x43f805=>{const _0x2d76ba=_0x5c342f;if(!SceneManager[_0x2d76ba(0x371)]())return;if(!$gameSystem[_0x2d76ba(0x9a3)]())return;VisuMZ['ConvertParams'](_0x43f805,_0x43f805);const _0x3358d4=$gameTemp['getLastPluginCommandInterpreter'](),_0xcb7a5c=VisuMZ[_0x2d76ba(0x432)](_0x43f805[_0x2d76ba(0x63d)]),_0x574bf6=_0x43f805[_0x2d76ba(0x27c)],_0x202c1a=_0x43f805[_0x2d76ba(0x6f0)],_0x47d40b=_0x43f805[_0x2d76ba(0xdb0)],_0x5f5d1e=_0x43f805[_0x2d76ba(0x7b5)],_0x57780b=_0x43f805['FaceDirection'],_0x35ac30=_0x43f805[_0x2d76ba(0xd70)],_0x3a4d8a=_0x43f805[_0x2d76ba(0x26a)],_0x5f03a6=_0x43f805[_0x2d76ba(0x638)];if(!_0x3358d4)return;for(const _0x76be67 of _0xcb7a5c){if(!_0x76be67)continue;const _0x5dca20=_0x43f805[_0x2d76ba(0x349)](_0x76be67)||{'x':0x0,'y':0x0};let _0x257f15=_0x5dca20['x'],_0x37d942=_0x5dca20['y'];if(_0x574bf6['match'](/none/i))_0x257f15+=_0x202c1a,_0x37d942+=_0x47d40b;else{if(_0x574bf6[_0x2d76ba(0xcbd)](/horz/i)&&_0x574bf6[_0x2d76ba(0xcbd)](/vert/i))_0x2d76ba(0x1b3)!==_0x2d76ba(0x1b3)?_0x57e7cf[_0x2d76ba(0x72b)]():(_0x257f15+=_0x76be67[_0x2d76ba(0x47b)]()?-_0x202c1a:_0x202c1a,_0x37d942+=_0x76be67['isActor']()?-_0x47d40b:_0x47d40b);else{if(_0x574bf6[_0x2d76ba(0xcbd)](/horz/i))_0x257f15+=_0x76be67[_0x2d76ba(0x47b)]()?-_0x202c1a:_0x202c1a,_0x37d942+=_0x47d40b;else{if(_0x574bf6['match'](/vert/i)){if(_0x2d76ba(0x213)===_0x2d76ba(0x28b)){let _0x18e7e1=this['forActor']()?_0xc8639c[_0x2d76ba(0x9d6)]:_0x1c8d66[_0x2d76ba(0xac0)];if(_0x19d9ce[_0x2d76ba(0xad9)]&&_0x52e6ee['SHOW_BUTTON']){this[_0x2d76ba(0x5f5)]=this[_0x2d76ba(0x237)]()?'pagedown':_0x2d76ba(0x31b),this[_0x2d76ba(0x703)]=_0x547545[_0x2d76ba(0xd1e)](this['_buttonKey']);const _0xb36536=_0x51a3eb[_0x2d76ba(0x912)]['Settings']['ButtonAssist'][_0x2d76ba(0x7f0)];_0x18e7e1=_0xb36536[_0x2d76ba(0x266)](this[_0x2d76ba(0x703)],_0x18e7e1);}this[_0x2d76ba(0xb75)](_0x18e7e1,'selectAll');}else _0x257f15+=_0x202c1a,_0x37d942+=_0x76be67[_0x2d76ba(0x47b)]()?-_0x47d40b:_0x47d40b;}}}}_0x76be67['moveBattlerHomeToPoint'](_0x257f15,_0x37d942,_0x5f5d1e,_0x57780b,_0x35ac30,-0x1),_0x76be67[_0x2d76ba(0x92b)](_0x3a4d8a);}if(_0x5f03a6)_0x3358d4[_0x2d76ba(0x430)]('battleMove');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x3ba),_0x5d0045=>{const _0x21149e=_0x5c342f;if(!SceneManager[_0x21149e(0x371)]())return;if(!$gameSystem[_0x21149e(0x9a3)]())return;VisuMZ[_0x21149e(0x2ee)](_0x5d0045,_0x5d0045);const _0x4da7ef=$gameTemp['getLastPluginCommandInterpreter'](),_0x5ee9bc=VisuMZ[_0x21149e(0x432)](_0x5d0045[_0x21149e(0x63d)]),_0x24116e=_0x5d0045[_0x21149e(0xab0)],_0x4b2339=_0x5d0045['OffsetAdjust'],_0x227fd2=_0x5d0045[_0x21149e(0x6f0)],_0x143b66=_0x5d0045['OffsetY'],_0x367f86=_0x5d0045[_0x21149e(0x7b5)],_0x1b43d9=_0x5d0045[_0x21149e(0x620)],_0x590c11=_0x5d0045[_0x21149e(0xd70)],_0x2cc0cb=_0x5d0045[_0x21149e(0x26a)],_0x2a5005=_0x5d0045[_0x21149e(0x638)];if(!_0x4da7ef)return;for(const _0xd5dd76 of _0x5ee9bc){if(!_0xd5dd76)continue;let _0x28b91d=_0xd5dd76[_0x21149e(0x9d3)]()[_0x21149e(0xda2)],_0x18ee37=_0xd5dd76[_0x21149e(0x9d3)]()[_0x21149e(0x256)];if(_0x24116e[_0x21149e(0xcbd)](/home/i))_0x28b91d=_0xd5dd76[_0x21149e(0x9d3)]()[_0x21149e(0x301)],_0x18ee37=_0xd5dd76['battler']()[_0x21149e(0x3f1)];else{if(_0x24116e['match'](/center/i))_0x28b91d=Graphics[_0x21149e(0xba3)]/0x2,_0x18ee37=Graphics['boxHeight']/0x2;else _0x24116e[_0x21149e(0xcbd)](/point (\d+), (\d+)/i)&&(_0x21149e(0x32d)==='DUivN'?_0x2219f8='right':(_0x28b91d=Number(RegExp['$1']),_0x18ee37=Number(RegExp['$2'])));}if(_0x4b2339['match'](/none/i))_0x28b91d+=_0x227fd2,_0x18ee37+=_0x143b66;else{if(_0x4b2339['match'](/horz/i)&&_0x4b2339['match'](/vert/i)){if(_0x21149e(0x7db)===_0x21149e(0x7db))_0x28b91d+=_0xd5dd76[_0x21149e(0x47b)]()?-_0x227fd2:_0x227fd2,_0x18ee37+=_0xd5dd76['isActor']()?-_0x143b66:_0x143b66;else{if(!_0x54a734[_0x21149e(0x371)]())return![];if(!_0x54301b)return![];if(!_0x1317f3[_0x21149e(0xa87)]())return![];if(_0x161b94[_0x21149e(0xa87)]()['note'][_0x21149e(0xcbd)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(_0x3b1aaa[_0x21149e(0xbf1)](_0xfdd161[_0x21149e(0xa87)]()))return!![];return![];}}else{if(_0x4b2339['match'](/horz/i))_0x28b91d+=_0xd5dd76[_0x21149e(0x47b)]()?-_0x227fd2:_0x227fd2,_0x18ee37+=_0x143b66;else _0x4b2339[_0x21149e(0xcbd)](/vert/i)&&(_0x28b91d+=_0x227fd2,_0x18ee37+=_0xd5dd76[_0x21149e(0x47b)]()?-_0x143b66:_0x143b66);}}_0xd5dd76[_0x21149e(0x526)](_0x28b91d,_0x18ee37,_0x367f86,_0x1b43d9,_0x590c11,-0x1),_0xd5dd76[_0x21149e(0x92b)](_0x2cc0cb);}if(_0x2a5005)_0x4da7ef[_0x21149e(0x430)]('battleMove');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x7e9),_0x186609=>{const _0x1e4d11=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x186609,_0x186609);const _0x1ae45a=$gameTemp[_0x1e4d11(0x3d1)](),_0x299a5d=VisuMZ['CreateActionSequenceTargets'](_0x186609[_0x1e4d11(0x5f7)]),_0x7ad1ff=VisuMZ[_0x1e4d11(0x432)](_0x186609['Targets2']),_0x275c2f=_0x186609[_0x1e4d11(0x69a)];let _0x20dd96=_0x186609['MeleeDistance'];const _0x2c0d99=_0x186609[_0x1e4d11(0x27c)],_0x37c3dc=_0x186609[_0x1e4d11(0x6f0)],_0x4715e0=_0x186609[_0x1e4d11(0xdb0)],_0x30ee5c=_0x186609[_0x1e4d11(0x7b5)],_0x1e3093=_0x186609['FaceDirection'],_0x122fbf=_0x186609[_0x1e4d11(0xd70)],_0x8c87dc=_0x186609[_0x1e4d11(0x26a)],_0x462b29=_0x186609[_0x1e4d11(0x638)],_0x887ec5=Math['min'](..._0x7ad1ff[_0x1e4d11(0xd08)](_0x493ff8=>_0x493ff8['battler']()[_0x1e4d11(0xda2)]-_0x493ff8['battler']()[_0x1e4d11(0x56a)]()/0x2)),_0x16bdac=Math[_0x1e4d11(0xaee)](..._0x7ad1ff[_0x1e4d11(0xd08)](_0x49bdef=>_0x49bdef['battler']()['_baseX']+_0x49bdef['battler']()[_0x1e4d11(0x56a)]()/0x2)),_0x2b9707=Math[_0x1e4d11(0x7b9)](..._0x7ad1ff[_0x1e4d11(0xd08)](_0x3e9cab=>_0x3e9cab['battler']()[_0x1e4d11(0x256)]-_0x3e9cab[_0x1e4d11(0x9d3)]()[_0x1e4d11(0x5d7)]())),_0x346135=Math[_0x1e4d11(0xaee)](..._0x7ad1ff['map'](_0x268cd2=>_0x268cd2[_0x1e4d11(0x9d3)]()[_0x1e4d11(0x256)])),_0x5c7283=_0x7ad1ff['filter'](_0x4b0988=>_0x4b0988[_0x1e4d11(0x47b)]())[_0x1e4d11(0xc5c)],_0x195ac8=_0x7ad1ff['filter'](_0x3d2d25=>_0x3d2d25[_0x1e4d11(0x796)]())[_0x1e4d11(0xc5c)];let _0x1f6ddb=0x0,_0x53394d=0x0;if(_0x275c2f['match'](/front/i))'PChNr'!==_0x1e4d11(0xa03)?(_0x58bf70['BattleCore'][_0x1e4d11(0x205)][_0x1e4d11(0xded)](this,_0x258a06,_0x1bf4cf),this['_actions'][this['_actions'][_0x1e4d11(0xc5c)]-0x1][_0x1e4d11(0x490)]=!![]):_0x1f6ddb=_0x5c7283>=_0x195ac8?_0x887ec5:_0x16bdac;else{if(_0x275c2f['match'](/middle/i))_0x1f6ddb=(_0x887ec5+_0x16bdac)/0x2,_0x20dd96=-0x1;else _0x275c2f[_0x1e4d11(0xcbd)](/back/i)&&(_0x1f6ddb=_0x5c7283>=_0x195ac8?_0x16bdac:_0x887ec5);}if(_0x275c2f[_0x1e4d11(0xcbd)](/head/i))_0x53394d=_0x2b9707;else{if(_0x275c2f[_0x1e4d11(0xcbd)](/center/i)){if(_0x1e4d11(0x5e8)===_0x1e4d11(0x5e8))_0x53394d=(_0x2b9707+_0x346135)/0x2;else{if(_0x420e40[_0x1e4d11(0x2b2)][_0x1e4d11(0x675)]!==0x0)return![];}}else _0x275c2f['match'](/base/i)&&(_0x1e4d11(0x2bb)!==_0x1e4d11(0x2bb)?(_0x51e2ea[_0x11a3d4]=0x1,_0x3a60ea++):_0x53394d=_0x346135);}if(!_0x1ae45a)return;for(const _0x2918ef of _0x299a5d){if(!_0x2918ef)continue;let _0x3347aa=_0x1f6ddb,_0x196c6c=_0x53394d;if(_0x2c0d99[_0x1e4d11(0xcbd)](/none/i))_0x1e4d11(0x9ef)===_0x1e4d11(0x9ef)?(_0x3347aa+=_0x37c3dc,_0x196c6c+=_0x4715e0):_0x225227=_0x1fb8ec;else{if(_0x2c0d99['match'](/horz/i)&&_0x2c0d99['match'](/vert/i))_0x3347aa+=_0x2918ef[_0x1e4d11(0x47b)]()?-_0x37c3dc:_0x37c3dc,_0x196c6c+=_0x2918ef[_0x1e4d11(0x47b)]()?-_0x4715e0:_0x4715e0;else{if(_0x2c0d99['match'](/horz/i))_0x3347aa+=_0x2918ef['isActor']()?-_0x37c3dc:_0x37c3dc,_0x196c6c+=_0x4715e0;else{if(_0x2c0d99[_0x1e4d11(0xcbd)](/vert/i)){if(_0x1e4d11(0xbc9)==='ONwGE'){const _0x3615a3=_0x1388a6(_0x146c4c['$1']);_0x3615a3<_0x5427c8?(_0x381fb8(_0x1e4d11(0xdf1)[_0x1e4d11(0x266)](_0x2e659b,_0x3615a3,_0x2a6003)),_0xd34347[_0x1e4d11(0x549)]()):_0x393dd6=_0x54c363[_0x1e4d11(0xaee)](_0x3615a3,_0xf2da6);}else _0x3347aa+=_0x37c3dc,_0x196c6c+=_0x2918ef[_0x1e4d11(0x47b)]()?-_0x4715e0:_0x4715e0;}}}}_0x2918ef[_0x1e4d11(0x526)](_0x3347aa,_0x196c6c,_0x30ee5c,_0x1e3093,_0x122fbf,_0x20dd96),_0x2918ef[_0x1e4d11(0x92b)](_0x8c87dc);}if(_0x462b29)_0x1ae45a['setWaitMode'](_0x1e4d11(0xdc6));}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x4a6),_0x3e88c9=>{const _0x51ba3d=_0x5c342f;if(!SceneManager[_0x51ba3d(0x371)]())return;if(!$gameSystem[_0x51ba3d(0x9a3)]())return;VisuMZ[_0x51ba3d(0x2ee)](_0x3e88c9,_0x3e88c9);const _0x5943ef=VisuMZ['CreateActionSequenceTargets'](_0x3e88c9['Targets']);let _0x1f05d7=_0x3e88c9[_0x51ba3d(0x212)][_0x51ba3d(0xcbd)](/back/i);for(const _0x4e8512 of _0x5943ef){if(!_0x4e8512)continue;if(_0x3e88c9['Direction']['match'](/rand/i))_0x1f05d7=Math[_0x51ba3d(0xb47)](0x2);_0x4e8512['setBattlerFlip'](!!_0x1f05d7);}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x3eb),_0x466fea=>{const _0x50391d=_0x5c342f;if(!SceneManager[_0x50391d(0x371)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x50391d(0x2ee)](_0x466fea,_0x466fea);const _0x574baa=VisuMZ[_0x50391d(0x432)](_0x466fea[_0x50391d(0x63d)]),_0x5b98c8=_0x466fea['FaceAway'];for(const _0x39b3c4 of _0x574baa){if(!_0x39b3c4)continue;const _0x8ce4fc=_0x466fea[_0x50391d(0xa60)](_0x39b3c4)||{'x':0x0,'y':0x0};let _0x312808=_0x8ce4fc['x'],_0x230870=_0x8ce4fc['y'];_0x39b3c4[_0x50391d(0x9e3)](Math[_0x50391d(0x5c1)](_0x312808),Math[_0x50391d(0x5c1)](_0x230870),!!_0x5b98c8);}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x8b6),_0x39507e=>{const _0x3a95cf=_0x5c342f;if(!SceneManager[_0x3a95cf(0x371)]())return;if(!$gameSystem[_0x3a95cf(0x9a3)]())return;VisuMZ[_0x3a95cf(0x2ee)](_0x39507e,_0x39507e);const _0x375992=VisuMZ[_0x3a95cf(0x432)](_0x39507e[_0x3a95cf(0x63d)]);let _0x40e52b=_0x39507e['Point'];const _0x425d0e=_0x39507e[_0x3a95cf(0x485)];for(const _0x12839b of _0x375992){if('ZmbuV'===_0x3a95cf(0x4c0)){if(!this[_0x3a95cf(0x2d5)])return;if(!_0x3f311f)return;if(!_0x20a8fa)return;const _0x35ca61=this['itemRect'](_0x20d00e[_0x3a95cf(0x427)]());_0x35ca61['x']+=_0x35ca61['width']/0x2+this[_0x3a95cf(0xde9)],_0x10eea0['x']=_0x35ca61['x'],_0x4a5d5d['y']=_0x35ca61['y'],this[_0x3a95cf(0x2d5)][_0x3a95cf(0x393)](_0x2d1abb);}else{if(!_0x12839b)continue;let _0x431cd4=_0x12839b['battler']()[_0x3a95cf(0xda2)],_0x535181=_0x12839b[_0x3a95cf(0x9d3)]()[_0x3a95cf(0x256)];if(_0x40e52b['match'](/home/i))_0x431cd4=_0x12839b['battler']()[_0x3a95cf(0x301)],_0x535181=_0x12839b[_0x3a95cf(0x9d3)]()[_0x3a95cf(0x3f1)];else{if(_0x40e52b['match'](/center/i))_0x431cd4=Graphics[_0x3a95cf(0xba3)]/0x2,_0x535181=Graphics[_0x3a95cf(0x2f9)]/0x2;else{if(_0x40e52b['match'](/point (\d+), (\d+)/i)){if(_0x3a95cf(0xe0c)!==_0x3a95cf(0xe0c))return _0x194faf=this[_0x3a95cf(0x9a9)](),this[_0x3a95cf(0xce4)](_0x1b7102);else _0x431cd4=Number(RegExp['$1']),_0x535181=Number(RegExp['$2']);}}}_0x12839b['setBattlerFacePoint'](Math[_0x3a95cf(0x5c1)](_0x431cd4),Math[_0x3a95cf(0x5c1)](_0x535181),!!_0x425d0e);}}}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xd62),_0x4770c6=>{const _0x129ca4=_0x5c342f;if(!SceneManager[_0x129ca4(0x371)]())return;if(!$gameSystem[_0x129ca4(0x9a3)]())return;VisuMZ[_0x129ca4(0x2ee)](_0x4770c6,_0x4770c6);const _0x461c1c=VisuMZ[_0x129ca4(0x432)](_0x4770c6['Targets1']),_0x2b0dca=VisuMZ[_0x129ca4(0x432)](_0x4770c6[_0x129ca4(0x606)]),_0x295af1=_0x2b0dca['map'](_0x684c66=>_0x684c66&&_0x684c66[_0x129ca4(0x9d3)]()?_0x684c66[_0x129ca4(0x9d3)]()[_0x129ca4(0xda2)]:0x0)/(_0x2b0dca[_0x129ca4(0xc5c)]||0x1),_0x2b10cb=_0x2b0dca[_0x129ca4(0xd08)](_0x1262b5=>_0x1262b5&&_0x1262b5[_0x129ca4(0x9d3)]()?_0x1262b5[_0x129ca4(0x9d3)]()[_0x129ca4(0x256)]:0x0)/(_0x2b0dca[_0x129ca4(0xc5c)]||0x1),_0x58ba28=_0x4770c6[_0x129ca4(0x485)];for(const _0x3d60cc of _0x461c1c){if(_0x129ca4(0x621)!==_0x129ca4(0xd02)){if(!_0x3d60cc)continue;_0x3d60cc[_0x129ca4(0x9e3)](Math['round'](_0x295af1),Math[_0x129ca4(0x5c1)](_0x2b10cb),!!_0x58ba28);}else{if(!_0x7bbe19)return![];return _0x3f939a[_0x129ca4(0x857)]===0x0||_0x33b488[_0x129ca4(0x857)]===0x1;}}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x8a3),_0x57d4cc=>{const _0x4f4707=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4f4707(0x2ee)](_0x57d4cc,_0x57d4cc);const _0x178a9c=$gameTemp[_0x4f4707(0x3d1)](),_0x4af621=VisuMZ[_0x4f4707(0x432)](_0x57d4cc['Targets']),_0x385a82=_0x57d4cc[_0x4f4707(0x9d2)],_0x3f5cb9=_0x57d4cc[_0x4f4707(0x7b5)],_0xa602c5=_0x57d4cc['EasingType'],_0x379c68=_0x57d4cc['WaitForFloat'];if(!_0x178a9c)return;for(const _0x35bfc2 of _0x4af621){if(_0x4f4707(0x660)!=='lMpJd'){if(!_0x35bfc2)continue;_0x35bfc2[_0x4f4707(0x1be)](_0x385a82,_0x3f5cb9,_0xa602c5);}else{const _0x3cd6f2=this[_0x4f4707(0x550)],_0x1fc09d=this['_borderPortraitSprite'];_0x1fc09d['x']=(_0x1fc09d['x']*(_0x3cd6f2-0x1)+this[_0x4f4707(0x2f2)])/_0x3cd6f2,_0x1fc09d[_0x4f4707(0xc0c)]=(_0x1fc09d[_0x4f4707(0xc0c)]*(_0x3cd6f2-0x1)+0xff)/_0x3cd6f2,this[_0x4f4707(0x550)]--;}}if(_0x379c68)_0x178a9c[_0x4f4707(0x430)](_0x4f4707(0xce3));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x2df),_0x76dc=>{const _0x1008a7=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1008a7(0x2ee)](_0x76dc,_0x76dc);const _0x33267c=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x33267c)return;const _0x5631ae=VisuMZ['CreateActionSequenceTargets'](_0x76dc[_0x1008a7(0x63d)]);for(const _0x1aa769 of _0x5631ae){if(_0x1008a7(0x233)===_0x1008a7(0x233)){if(!_0x1aa769)continue;_0x1aa769[_0x1008a7(0xb18)]();}else _0x51054f[_0x1008a7(0x8b5)]();}BattleManager['_subject']&&(_0x1008a7(0x773)!=='lAzFU'?BattleManager[_0x1008a7(0x52b)][_0x1008a7(0x71b)]():(this[_0x1008a7(0xd17)]['x']=_0x471610[_0x1008a7(0xb47)](this[_0x1008a7(0x9db)])*(_0x4122e4[_0x1008a7(0x935)]()<0.5?-0x1:0x1),this[_0x1008a7(0x256)]!==this['y']&&(this[_0x1008a7(0xd17)]['y']=this['height']*0.5,this[_0x1008a7(0xd17)]['y']+=_0x25a465['randomInt'](this[_0x1008a7(0x9db)])*(_0x4a6160[_0x1008a7(0x935)]()<0.5?-0x1:0x1))));if(_0x76dc[_0x1008a7(0x638)])_0x33267c[_0x1008a7(0x430)](_0x1008a7(0xdc6));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xad7),_0x5cdbea=>{const _0x5a7093=_0x5c342f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5a7093(0x2ee)](_0x5cdbea,_0x5cdbea);const _0x2fc831=$gameTemp['getLastPluginCommandInterpreter'](),_0x485147=VisuMZ['CreateActionSequenceTargets'](_0x5cdbea[_0x5a7093(0x63d)]),_0x3c5e19=_0x5cdbea[_0x5a7093(0x9d2)],_0x10ca0c=_0x5cdbea[_0x5a7093(0x7b5)],_0x323a44=_0x5cdbea[_0x5a7093(0x8af)];if(!_0x2fc831)return;for(const _0x12fb7a of _0x485147){if(!_0x12fb7a)continue;_0x12fb7a[_0x5a7093(0x545)](_0x3c5e19,_0x10ca0c);}if(_0x323a44)_0x2fc831[_0x5a7093(0x430)](_0x5a7093(0x559));}),PluginManager['registerCommand'](pluginData['name'],_0x5c342f(0x9e0),_0x514066=>{const _0x48be6f=_0x5c342f;if(!SceneManager[_0x48be6f(0x371)]())return;if(!$gameSystem[_0x48be6f(0x9a3)]())return;VisuMZ[_0x48be6f(0x2ee)](_0x514066,_0x514066);const _0x421b8e=$gameTemp['getLastPluginCommandInterpreter'](),_0x160515=VisuMZ[_0x48be6f(0x432)](_0x514066[_0x48be6f(0x63d)]),_0x32c346=_0x514066[_0x48be6f(0xa31)],_0x4269a3=_0x514066['DistanceX'],_0x441f7d=_0x514066['DistanceY'],_0x53657a=_0x514066[_0x48be6f(0x7b5)],_0x5dc0e0=_0x514066[_0x48be6f(0x620)],_0x4451c1=_0x514066['EasingType'],_0x3a6b65=_0x514066['MotionType'],_0x5eb5f7=_0x514066[_0x48be6f(0x638)];if(!_0x421b8e)return;for(const _0x4c9f42 of _0x160515){if(!_0x4c9f42)continue;let _0x326fdd=_0x4269a3,_0x4c2f18=_0x441f7d;if(_0x32c346['match'](/horz/i))_0x326fdd*=_0x4c9f42[_0x48be6f(0x47b)]()?-0x1:0x1;if(_0x32c346[_0x48be6f(0xcbd)](/vert/i))_0x4c2f18*=_0x4c9f42[_0x48be6f(0x47b)]()?-0x1:0x1;_0x4c9f42[_0x48be6f(0x895)](_0x326fdd,_0x4c2f18,_0x53657a,_0x5dc0e0,_0x4451c1),_0x4c9f42['requestMotion'](_0x3a6b65);}if(_0x5eb5f7)_0x421b8e['setWaitMode']('battleMove');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x3a8),_0x13a997=>{const _0x1a1e6e=_0x5c342f;if(!SceneManager[_0x1a1e6e(0x371)]())return;if(!$gameSystem[_0x1a1e6e(0x9a3)]())return;VisuMZ['ConvertParams'](_0x13a997,_0x13a997);const _0x33b76c=$gameTemp[_0x1a1e6e(0x3d1)](),_0x313c7b=VisuMZ[_0x1a1e6e(0x432)](_0x13a997[_0x1a1e6e(0x63d)]),_0x4b9731=_0x13a997[_0x1a1e6e(0x27c)],_0x4a1640=_0x13a997[_0x1a1e6e(0x6f0)],_0x515f9c=_0x13a997[_0x1a1e6e(0xdb0)],_0x152b38=_0x13a997[_0x1a1e6e(0x7b5)],_0x5d738f=_0x13a997[_0x1a1e6e(0x620)],_0x4db368=_0x13a997['EasingType'],_0x5c7a08=_0x13a997[_0x1a1e6e(0x26a)],_0x7ea296=_0x13a997['WaitForMovement'];if(!_0x33b76c)return;for(const _0x428cb5 of _0x313c7b){if(!_0x428cb5)continue;const _0x535359=_0x13a997['DestinationJS'](_0x428cb5)||{'x':0x0,'y':0x0};let _0x27cb0e=_0x535359['x'],_0x337b86=_0x535359['y'];if(_0x4b9731[_0x1a1e6e(0xcbd)](/none/i))_0x27cb0e+=_0x4a1640,_0x337b86+=_0x515f9c;else{if(_0x4b9731['match'](/horz/i)&&_0x4b9731[_0x1a1e6e(0xcbd)](/vert/i)){if(_0x1a1e6e(0xd9f)!==_0x1a1e6e(0xd9f)){const _0x357ed0=_0x4e9555[_0x1a1e6e(0xca2)]['Settings']['Mechanics'];if(_0x357ed0['BattleStartEvent']>0x0&&_0x109899[_0x357ed0[_0x1a1e6e(0x5b1)]]){const _0x4d3c93=_0x1100bf[_0x357ed0['BattleStartEvent']],_0x3c9d63=_0x4d3c93[_0x1a1e6e(0x594)][_0x1a1e6e(0xc5c)]-0x2,_0x436046=_0x4d3c93[_0x1a1e6e(0x594)][_0x3c9d63];if(_0x436046&&_0x436046[_0x1a1e6e(0x441)]!==0xe6){const _0xe493c8={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x220344=_0x4d3c93[_0x1a1e6e(0x594)][_0x1a1e6e(0xbb2)]();_0x4d3c93[_0x1a1e6e(0x594)][_0x1a1e6e(0xc82)](_0xe493c8),_0x4d3c93[_0x1a1e6e(0x594)][_0x1a1e6e(0xc82)](_0x220344);}}}else _0x27cb0e+=_0x428cb5[_0x1a1e6e(0x47b)]()?-_0x4a1640:_0x4a1640,_0x337b86+=_0x428cb5[_0x1a1e6e(0x47b)]()?-_0x515f9c:_0x515f9c;}else{if(_0x4b9731[_0x1a1e6e(0xcbd)](/horz/i)){if(_0x1a1e6e(0x239)!=='CvTDC'){return _0x2121c8[_0x1a1e6e(0xca4)][_0x1a1e6e(0xa95)]['call'](this);;}else _0x27cb0e+=_0x428cb5[_0x1a1e6e(0x47b)]()?-_0x4a1640:_0x4a1640,_0x337b86+=_0x515f9c;}else{if(_0x4b9731[_0x1a1e6e(0xcbd)](/vert/i)){if(_0x1a1e6e(0xe0f)===_0x1a1e6e(0xe0f))_0x27cb0e+=_0x4a1640,_0x337b86+=_0x428cb5[_0x1a1e6e(0x47b)]()?-_0x515f9c:_0x515f9c;else{const _0x9e675=_0x5502ef(_0x134867['$1']);_0x9e675!==_0x10576c[_0x1c5106][_0x1a1e6e(0xda9)]&&(_0x2603f0('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x1a1e6e(0x266)](_0x47f513,_0x9e675)),_0x3ef78a[_0x1a1e6e(0x549)]());}}}}}_0x428cb5['moveBattlerToPoint'](_0x27cb0e,_0x337b86,_0x152b38,_0x5d738f,_0x4db368,-0x1),_0x428cb5[_0x1a1e6e(0x92b)](_0x5c7a08);}if(_0x7ea296)_0x33b76c[_0x1a1e6e(0x430)](_0x1a1e6e(0xdc6));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x999),_0x4b1a33=>{const _0x2fe4c1=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x2fe4c1(0x9a3)]())return;VisuMZ[_0x2fe4c1(0x2ee)](_0x4b1a33,_0x4b1a33);const _0x58bfa5=$gameTemp['getLastPluginCommandInterpreter'](),_0x1b007a=VisuMZ[_0x2fe4c1(0x432)](_0x4b1a33['Targets']),_0x37fdea=_0x4b1a33[_0x2fe4c1(0xab0)],_0x734c2d=_0x4b1a33['OffsetAdjust'],_0x3a5334=_0x4b1a33[_0x2fe4c1(0x6f0)],_0x4a9960=_0x4b1a33[_0x2fe4c1(0xdb0)],_0x174b41=_0x4b1a33['Duration'],_0x2e37d9=_0x4b1a33[_0x2fe4c1(0x620)],_0x5861ea=_0x4b1a33[_0x2fe4c1(0xd70)],_0x45ca7d=_0x4b1a33['MotionType'],_0xb93ea6=_0x4b1a33[_0x2fe4c1(0x638)];if(!_0x58bfa5)return;for(const _0x3b065f of _0x1b007a){if(!_0x3b065f)continue;let _0x48073a=_0x3b065f[_0x2fe4c1(0x9d3)]()[_0x2fe4c1(0xda2)],_0x2999c9=_0x3b065f[_0x2fe4c1(0x9d3)]()[_0x2fe4c1(0x256)];if(_0x37fdea[_0x2fe4c1(0xcbd)](/home/i))_0x48073a=_0x3b065f['battler']()[_0x2fe4c1(0x301)],_0x2999c9=_0x3b065f['battler']()[_0x2fe4c1(0x3f1)];else{if(_0x37fdea[_0x2fe4c1(0xcbd)](/center/i)){if(_0x2fe4c1(0x8f7)!==_0x2fe4c1(0x3fb))_0x48073a=Graphics[_0x2fe4c1(0xba3)]/0x2,_0x2999c9=Graphics[_0x2fe4c1(0x2f9)]/0x2;else return 0x0;}else _0x37fdea[_0x2fe4c1(0xcbd)](/point (\d+), (\d+)/i)&&(_0x48073a=Number(RegExp['$1']),_0x2999c9=Number(RegExp['$2']));}if(_0x734c2d[_0x2fe4c1(0xcbd)](/none/i))_0x48073a+=_0x3a5334,_0x2999c9+=_0x4a9960;else{if(_0x734c2d[_0x2fe4c1(0xcbd)](/horz/i)&&_0x734c2d[_0x2fe4c1(0xcbd)](/vert/i)){if(_0x2fe4c1(0x567)!==_0x2fe4c1(0x567))return _0x4d577b['_scene'][_0x2fe4c1(0x995)]&&_0x16117f[_0x2fe4c1(0x201)][_0x2fe4c1(0x995)][_0x2fe4c1(0x344)]&&_0x36c147[_0x2fe4c1(0x201)][_0x2fe4c1(0x995)][_0x2fe4c1(0x96a)][_0x2fe4c1(0xaec)](this[_0x2fe4c1(0xca5)]);else _0x48073a+=_0x3b065f[_0x2fe4c1(0x47b)]()?-_0x3a5334:_0x3a5334,_0x2999c9+=_0x3b065f[_0x2fe4c1(0x47b)]()?-_0x4a9960:_0x4a9960;}else{if(_0x734c2d[_0x2fe4c1(0xcbd)](/horz/i)){if('ATvtv'!==_0x2fe4c1(0x3b7))_0x48073a+=_0x3b065f[_0x2fe4c1(0x47b)]()?-_0x3a5334:_0x3a5334,_0x2999c9+=_0x4a9960;else return _0xf1f06a[_0x2fe4c1(0xca2)][_0x2fe4c1(0x672)][_0x2fe4c1(0xded)](this);}else _0x734c2d[_0x2fe4c1(0xcbd)](/vert/i)&&(_0x48073a+=_0x3a5334,_0x2999c9+=_0x3b065f['isActor']()?-_0x4a9960:_0x4a9960);}}_0x3b065f[_0x2fe4c1(0x28f)](_0x48073a,_0x2999c9,_0x174b41,_0x2e37d9,_0x5861ea,-0x1),_0x3b065f[_0x2fe4c1(0x92b)](_0x45ca7d);}if(_0xb93ea6)_0x58bfa5[_0x2fe4c1(0x430)](_0x2fe4c1(0xdc6));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xca1),_0x4013fe=>{const _0x4ee3d3=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4ee3d3(0x9a3)]())return;VisuMZ['ConvertParams'](_0x4013fe,_0x4013fe);const _0x1f390d=$gameTemp[_0x4ee3d3(0x3d1)](),_0x46785f=VisuMZ[_0x4ee3d3(0x432)](_0x4013fe[_0x4ee3d3(0x5f7)]),_0x1ea8a9=VisuMZ[_0x4ee3d3(0x432)](_0x4013fe[_0x4ee3d3(0x606)]),_0x4d2249=_0x4013fe[_0x4ee3d3(0x69a)];let _0xd75aff=_0x4013fe['MeleeDistance'];const _0x114d19=_0x4013fe[_0x4ee3d3(0x27c)],_0x599c75=_0x4013fe[_0x4ee3d3(0x6f0)],_0x10b990=_0x4013fe['OffsetY'],_0xdd958c=_0x4013fe['Duration'],_0x4c37eb=_0x4013fe[_0x4ee3d3(0x620)],_0x57695a=_0x4013fe[_0x4ee3d3(0xd70)],_0x39417b=_0x4013fe[_0x4ee3d3(0x26a)],_0x3b8e90=_0x4013fe[_0x4ee3d3(0x638)],_0x1fcba9=Math[_0x4ee3d3(0x7b9)](..._0x1ea8a9[_0x4ee3d3(0xd08)](_0x4a2486=>_0x4a2486[_0x4ee3d3(0x9d3)]()[_0x4ee3d3(0xda2)]-_0x4a2486[_0x4ee3d3(0x9d3)]()[_0x4ee3d3(0x56a)]()/0x2)),_0xc0221b=Math[_0x4ee3d3(0xaee)](..._0x1ea8a9[_0x4ee3d3(0xd08)](_0x39feae=>_0x39feae['battler']()[_0x4ee3d3(0xda2)]+_0x39feae['battler']()[_0x4ee3d3(0x56a)]()/0x2)),_0x55567d=Math[_0x4ee3d3(0x7b9)](..._0x1ea8a9['map'](_0x56356c=>_0x56356c['battler']()[_0x4ee3d3(0x256)]-_0x56356c[_0x4ee3d3(0x9d3)]()[_0x4ee3d3(0x5d7)]())),_0x528307=Math['max'](..._0x1ea8a9[_0x4ee3d3(0xd08)](_0x37ef97=>_0x37ef97[_0x4ee3d3(0x9d3)]()[_0x4ee3d3(0x256)])),_0x15f583=_0x1ea8a9[_0x4ee3d3(0x3cd)](_0x5b3ea4=>_0x5b3ea4[_0x4ee3d3(0x47b)]())['length'],_0x3350a3=_0x1ea8a9[_0x4ee3d3(0x3cd)](_0x258737=>_0x258737[_0x4ee3d3(0x796)]())[_0x4ee3d3(0xc5c)];let _0x565217=0x0,_0x28981d=0x0;if(_0x4d2249[_0x4ee3d3(0xcbd)](/front/i)){if(_0x4ee3d3(0xd4b)===_0x4ee3d3(0x8ff))return this[_0x4ee3d3(0x2d8)]();else _0x565217=_0x15f583>=_0x3350a3?_0x1fcba9:_0xc0221b;}else{if(_0x4d2249[_0x4ee3d3(0xcbd)](/middle/i))_0x565217=(_0x1fcba9+_0xc0221b)/0x2,_0xd75aff=-0x1;else _0x4d2249[_0x4ee3d3(0xcbd)](/back/i)&&('zYWne'===_0x4ee3d3(0x373)?(_0x2f5518['forceAction'](_0x2b3155[0x2],_0x223c51[0x3]),_0x4c8bd2[_0x4ee3d3(0xd57)](_0x13d2a7)):_0x565217=_0x15f583>=_0x3350a3?_0xc0221b:_0x1fcba9);}if(_0x4d2249['match'](/head/i))_0x28981d=_0x55567d;else{if(_0x4d2249['match'](/center/i)){if(_0x4ee3d3(0x88f)!==_0x4ee3d3(0xb93))_0x28981d=(_0x55567d+_0x528307)/0x2;else return _0x4e3f36[_0x4ee3d3(0xca2)][_0x4ee3d3(0xc90)][_0x4ee3d3(0x603)][_0x4ee3d3(0x7b8)][_0x4ee3d3(0xded)](this,_0x5798a3,_0x39c30b);}else{if(_0x4d2249['match'](/base/i)){if('DCGLr'!==_0x4ee3d3(0x6e7)){const _0x302a8d=this[_0x4ee3d3(0x920)]();this[_0x4ee3d3(0xdf4)]=![],_0x302a8d&&this[_0x4ee3d3(0x442)]&&this[_0x4ee3d3(0x678)](),this[_0x4ee3d3(0x442)]=![],this['refresh'](),this[_0x4ee3d3(0x541)]()&&_0x302a8d&&(this['performCollapse'](),this['requestMotionRefresh']());}else _0x28981d=_0x528307;}}}if(!_0x1f390d)return;for(const _0xd27e1c of _0x46785f){if(!_0xd27e1c)continue;let _0x401f8f=_0x565217,_0x16dd8c=_0x28981d;if(_0x114d19[_0x4ee3d3(0xcbd)](/none/i)){if(_0x4ee3d3(0x389)!==_0x4ee3d3(0x389))return _0x1849a0['BattleCore']['Settings'][_0x4ee3d3(0x890)][_0x4ee3d3(0x387)];else _0x401f8f+=_0x599c75,_0x16dd8c+=_0x10b990;}else{if(_0x114d19[_0x4ee3d3(0xcbd)](/horz/i)&&_0x114d19['match'](/vert/i))_0x401f8f+=_0xd27e1c[_0x4ee3d3(0x47b)]()?-_0x599c75:_0x599c75,_0x16dd8c+=_0xd27e1c['isActor']()?-_0x10b990:_0x10b990;else{if(_0x114d19[_0x4ee3d3(0xcbd)](/horz/i))_0x401f8f+=_0xd27e1c[_0x4ee3d3(0x47b)]()?-_0x599c75:_0x599c75,_0x16dd8c+=_0x10b990;else _0x114d19[_0x4ee3d3(0xcbd)](/vert/i)&&(_0x4ee3d3(0x2e3)!=='sfIQJ'?(this[_0x4ee3d3(0xd17)]['x']=0x0,this[_0x4ee3d3(0xd17)]['y']=this[_0x4ee3d3(0x880)]*0.5):(_0x401f8f+=_0x599c75,_0x16dd8c+=_0xd27e1c[_0x4ee3d3(0x47b)]()?-_0x10b990:_0x10b990));}}_0xd27e1c[_0x4ee3d3(0x28f)](_0x401f8f,_0x16dd8c,_0xdd958c,_0x4c37eb,_0x57695a,_0xd75aff),_0xd27e1c[_0x4ee3d3(0x92b)](_0x39417b);}if(_0x3b8e90)_0x1f390d[_0x4ee3d3(0x430)](_0x4ee3d3(0xdc6));}),PluginManager['registerCommand'](pluginData['name'],_0x5c342f(0x192),_0x4a7341=>{const _0x3c0b98=_0x5c342f;if(!SceneManager[_0x3c0b98(0x371)]())return;VisuMZ[_0x3c0b98(0x2ee)](_0x4a7341,_0x4a7341);const _0x42d5eb=$gameTemp['getLastPluginCommandInterpreter'](),_0x1abbe8=VisuMZ[_0x3c0b98(0x432)](_0x4a7341[_0x3c0b98(0x63d)]),_0x183b19=_0x4a7341[_0x3c0b98(0xcdd)],_0x1c28f8=_0x4a7341[_0x3c0b98(0x7b5)],_0x427988=_0x4a7341[_0x3c0b98(0xd70)],_0x1ce350=_0x4a7341['WaitForOpacity'];if(!_0x42d5eb)return;for(const _0x17eb47 of _0x1abbe8){if(_0x3c0b98(0xd0e)!==_0x3c0b98(0x437)){if(!_0x17eb47)continue;_0x17eb47['changeBattlerOpacity'](_0x183b19,_0x1c28f8,_0x427988);}else this[_0x3c0b98(0x2d9)]();}if(_0x1ce350)_0x42d5eb[_0x3c0b98(0x430)](_0x3c0b98(0xd76));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x2ae),_0x488ee9=>{const _0x2e3540=_0x5c342f;if(!SceneManager[_0x2e3540(0x371)]())return;VisuMZ['ConvertParams'](_0x488ee9,_0x488ee9);const _0x3e088b=$gameTemp[_0x2e3540(0x3d1)](),_0x3623be=VisuMZ[_0x2e3540(0x432)](_0x488ee9[_0x2e3540(0x63d)]),_0x46a7d6=_0x488ee9[_0x2e3540(0xc87)],_0x33b24a=_0x488ee9[_0x2e3540(0x587)],_0x34ca30=_0x488ee9[_0x2e3540(0x7b5)],_0x5795a6=_0x488ee9['EasingType'],_0x11132a=_0x488ee9[_0x2e3540(0x9d8)];if(!_0x3e088b)return;for(const _0x43a2eb of _0x3623be){if(_0x2e3540(0x398)==='wzDiX'){const _0x508848=_0x4af4dc[_0x2e3540(0xc3f)](),_0x4af013=this[_0x2e3540(0x8c1)][_0x2e3540(0xd29)]();_0x508848['setSkill'](_0x4af013),_0x362ca4[_0x2e3540(0x761)]()['setLastBattleSkill'](_0x4cbbdc[_0x4af013]),this['onSelectAction']();}else{if(!_0x43a2eb)continue;_0x43a2eb[_0x2e3540(0x6bd)](_0x46a7d6,_0x33b24a,_0x34ca30,_0x5795a6);}}if(_0x11132a)_0x3e088b[_0x2e3540(0x430)](_0x2e3540(0xd7d));}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x94d),_0x174697=>{const _0x16ad51=_0x5c342f;if(!SceneManager[_0x16ad51(0x371)]())return;VisuMZ[_0x16ad51(0x2ee)](_0x174697,_0x174697);const _0x5b3b1f=$gameTemp['getLastPluginCommandInterpreter'](),_0x13c654=VisuMZ[_0x16ad51(0x432)](_0x174697['Targets']),_0x12263f=_0x174697[_0x16ad51(0x684)],_0x5e16bb=_0x174697[_0x16ad51(0x4dd)],_0x2594e3=_0x174697['Duration'],_0x41902b=_0x174697[_0x16ad51(0xd70)],_0x5c7bcc=_0x174697[_0x16ad51(0xd46)];if(!_0x5b3b1f)return;for(const _0x5e92ad of _0x13c654){if(_0x16ad51(0xb5a)===_0x16ad51(0xdfc))return![];else{if(!_0x5e92ad)continue;_0x5e92ad[_0x16ad51(0xb10)](_0x12263f,_0x5e16bb,_0x2594e3,_0x41902b);}}if(_0x5c7bcc)_0x5b3b1f[_0x16ad51(0x430)](_0x16ad51(0xdd4));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Movement_Spin',_0x51c733=>{const _0x231771=_0x5c342f;if(!SceneManager[_0x231771(0x371)]())return;VisuMZ[_0x231771(0x2ee)](_0x51c733,_0x51c733);const _0x4865ad=$gameTemp['getLastPluginCommandInterpreter'](),_0x1bb513=VisuMZ['CreateActionSequenceTargets'](_0x51c733['Targets']),_0xd0a75=_0x51c733[_0x231771(0x91e)],_0x2f997b=_0x51c733['Duration'],_0x5021ff=_0x51c733[_0x231771(0xd70)],_0x2f1b6a=_0x51c733['RevertAngle'],_0x28db80=_0x51c733[_0x231771(0x20b)];if(!_0x4865ad)return;for(const _0x544aca of _0x1bb513){if(!_0x544aca)continue;_0x544aca[_0x231771(0x2c1)](_0xd0a75,_0x2f997b,_0x5021ff,_0x2f1b6a);}if(_0x28db80)_0x4865ad['setWaitMode'](_0x231771(0xa04));}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],'ActSeq_Movement_WaitForFloat',_0x55d43d=>{const _0x2d579f=_0x5c342f;if(!SceneManager['isSceneBattle']())return;const _0x1954c1=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1954c1)return;_0x1954c1[_0x2d579f(0x430)]('battleFloat');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x94a),_0x4972d2=>{const _0x34d45b=_0x5c342f;if(!SceneManager[_0x34d45b(0x371)]())return;const _0x5c1274=$gameTemp[_0x34d45b(0x3d1)]();if(!_0x5c1274)return;_0x5c1274[_0x34d45b(0x430)](_0x34d45b(0x559));}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x59b),_0x179738=>{const _0x393610=_0x5c342f;if(!SceneManager[_0x393610(0x371)]())return;const _0x41db35=$gameTemp[_0x393610(0x3d1)]();if(!_0x41db35)return;_0x41db35['setWaitMode'](_0x393610(0xdc6));}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x7ac),_0x4b6db6=>{const _0x175ad5=_0x5c342f;if(!SceneManager[_0x175ad5(0x371)]())return;const _0x2b10af=$gameTemp[_0x175ad5(0x3d1)]();if(!_0x2b10af)return;_0x2b10af[_0x175ad5(0x430)](_0x175ad5(0xd76));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xc65),_0x29082c=>{const _0x55bbc0=_0x5c342f;if(!SceneManager[_0x55bbc0(0x371)]())return;const _0x5ebecf=$gameTemp[_0x55bbc0(0x3d1)]();if(!_0x5ebecf)return;_0x5ebecf[_0x55bbc0(0x430)]('battleGrow');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x18c),_0x290269=>{const _0x25a5af=_0x5c342f;if(!SceneManager[_0x25a5af(0x371)]())return;const _0x2661cd=$gameTemp[_0x25a5af(0x3d1)]();if(!_0x2661cd)return;_0x2661cd[_0x25a5af(0x430)](_0x25a5af(0xdd4));}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_Movement_WaitForSpin',_0x588754=>{const _0x4a29a0=_0x5c342f;if(!SceneManager[_0x4a29a0(0x371)]())return;const _0x931786=$gameTemp[_0x4a29a0(0x3d1)]();if(!_0x931786)return;_0x931786['setWaitMode'](_0x4a29a0(0xa04));}),VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xb46)]=function(){const _0x37f09f=_0x5c342f;if(!Imported[_0x37f09f(0x34a)])return;if(VisuMZ[_0x37f09f(0xbfa)][_0x37f09f(0xda9)]<1.08){if('xbBOW'!==_0x37f09f(0x5e3))this[_0x37f09f(0x4c7)][_0x37f09f(0x36d)]=![];else{let _0x301246='';_0x301246+=_0x37f09f(0xd98),_0x301246+='in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.',alert(_0x301246),SceneManager[_0x37f09f(0x549)]();}}},PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Projectile_Animation',_0x245ff8=>{const _0x41cf82=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x41cf82(0x34a)])return;VisuMZ[_0x41cf82(0x2ee)](_0x245ff8,_0x245ff8),VisuMZ['BattleCore'][_0x41cf82(0xb46)]();const _0x291542=$gameTemp[_0x41cf82(0x3d1)](),_0x3b8049=_0x245ff8[_0x41cf82(0x3b2)];if(!_0x291542)return;const _0x517d09=BattleManager[_0x41cf82(0x3ed)];if(!_0x517d09)return;_0x517d09[_0x41cf82(0x746)](_0x245ff8);if(_0x3b8049)_0x291542[_0x41cf82(0x430)](_0x41cf82(0x5e5));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x8c6),_0xe9f394=>{const _0x27dcfe=_0x5c342f;if(!SceneManager[_0x27dcfe(0x371)]())return;if(!Imported[_0x27dcfe(0x34a)])return;VisuMZ[_0x27dcfe(0x2ee)](_0xe9f394,_0xe9f394),VisuMZ[_0x27dcfe(0xca2)]['CheckActSeqProjectileVersion']();const _0x10c7a6=$gameTemp[_0x27dcfe(0x3d1)](),_0x62fbd1=_0xe9f394[_0x27dcfe(0x3b2)];if(!_0x10c7a6)return;const _0x7e6c0f=BattleManager[_0x27dcfe(0x3ed)];if(!_0x7e6c0f)return;_0x7e6c0f[_0x27dcfe(0x746)](_0xe9f394);if(_0x62fbd1)_0x10c7a6[_0x27dcfe(0x430)](_0x27dcfe(0x5e5));}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x65e),_0x4a11c0=>{const _0x14bb42=_0x5c342f;if(!SceneManager[_0x14bb42(0x371)]())return;if(!Imported[_0x14bb42(0x34a)])return;VisuMZ[_0x14bb42(0x2ee)](_0x4a11c0,_0x4a11c0),VisuMZ[_0x14bb42(0xca2)]['CheckActSeqProjectileVersion']();const _0x12277e=$gameTemp[_0x14bb42(0x3d1)](),_0x40ff3b=_0x4a11c0[_0x14bb42(0x3b2)];if(!_0x12277e)return;const _0x255e95=BattleManager[_0x14bb42(0x3ed)];if(!_0x255e95)return;_0x255e95['createActionSequenceProjectile'](_0x4a11c0);if(_0x40ff3b)_0x12277e[_0x14bb42(0x430)](_0x14bb42(0x5e5));}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0x19c),_0x2bcd96=>{const _0x1cb31d=_0x5c342f;if(!SceneManager[_0x1cb31d(0x371)]())return;if(!Imported[_0x1cb31d(0xb02)])return;VisuMZ[_0x1cb31d(0x2ee)](_0x2bcd96,_0x2bcd96);const _0x5ba1ef=$gameTemp[_0x1cb31d(0x3d1)](),_0x11d574=_0x2bcd96['WaitForSkew'];if(!_0x5ba1ef)return;$gameScreen['setBattleSkew'](_0x2bcd96[_0x1cb31d(0x684)],_0x2bcd96[_0x1cb31d(0x4dd)],_0x2bcd96[_0x1cb31d(0x7b5)],_0x2bcd96['EasingType']);if(_0x11d574)_0x5ba1ef[_0x1cb31d(0x430)]('battleSkew');}),PluginManager['registerCommand'](pluginData['name'],_0x5c342f(0x296),_0x501752=>{const _0x472038=_0x5c342f;if(!SceneManager[_0x472038(0x371)]())return;if(!Imported[_0x472038(0xb02)])return;VisuMZ[_0x472038(0x2ee)](_0x501752,_0x501752);const _0x4bc2c4=$gameTemp[_0x472038(0x3d1)](),_0x4b06a2=_0x501752[_0x472038(0xd46)];if(!_0x4bc2c4)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x501752[_0x472038(0x7b5)],_0x501752[_0x472038(0xd70)]);if(_0x4b06a2)_0x4bc2c4['setWaitMode']('battleSkew');}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x992),_0x50dd94=>{const _0x1bf2b8=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1bf2b8(0xb02)])return;const _0x305bbc=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x305bbc)return;_0x305bbc[_0x1bf2b8(0x430)](_0x1bf2b8(0x29a));}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],'ActSeq_Target_CurrentIndex',_0xf46c97=>{const _0x4b8fe4=_0x5c342f;if(!SceneManager[_0x4b8fe4(0x371)]())return;VisuMZ['ConvertParams'](_0xf46c97,_0xf46c97);const _0xc4319d=$gameTemp[_0x4b8fe4(0x3d1)](),_0x29c48b=_0xf46c97[_0x4b8fe4(0x670)],_0x3c6f1e=_0xf46c97[_0x4b8fe4(0xd7a)];if(!_0xc4319d)return;BattleManager['_targetIndex']=_0x29c48b,BattleManager['_target']=BattleManager[_0x4b8fe4(0xad0)]?BattleManager[_0x4b8fe4(0xad0)][BattleManager['_targetIndex']]||null:null,BattleManager[_0x4b8fe4(0x6bc)]&&_0x3c6f1e['toUpperCase']()['trim']()!==_0x4b8fe4(0x66c)&&_0xc4319d['command119']([_0x3c6f1e]);}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x5ac),_0x5f3264=>{const _0x202c6c=_0x5c342f;if(!SceneManager[_0x202c6c(0x371)]())return;VisuMZ[_0x202c6c(0x2ee)](_0x5f3264,_0x5f3264);const _0x461bca=$gameTemp[_0x202c6c(0x3d1)](),_0x341675=_0x5f3264[_0x202c6c(0xd7a)];if(!_0x461bca)return;BattleManager[_0x202c6c(0x788)]++,BattleManager[_0x202c6c(0x6bc)]=BattleManager[_0x202c6c(0xad0)][BattleManager['_targetIndex']]||null,BattleManager['_target']&&_0x341675[_0x202c6c(0xb34)]()[_0x202c6c(0xa5e)]()!==_0x202c6c(0x66c)&&_0x461bca[_0x202c6c(0xc17)]([_0x341675]);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xcd6),_0xd3fcf3=>{const _0x2a2f41=_0x5c342f;if(!SceneManager[_0x2a2f41(0x371)]())return;VisuMZ['ConvertParams'](_0xd3fcf3,_0xd3fcf3);const _0x46b431=$gameTemp[_0x2a2f41(0x3d1)](),_0x47ea38=_0xd3fcf3[_0x2a2f41(0xd7a)];if(!_0x46b431)return;BattleManager[_0x2a2f41(0x788)]--,BattleManager[_0x2a2f41(0x6bc)]=BattleManager['_allTargets'][BattleManager[_0x2a2f41(0x788)]]||null;if(BattleManager['_target']&&_0x47ea38[_0x2a2f41(0xb34)]()[_0x2a2f41(0xa5e)]()!==_0x2a2f41(0x66c)){if(_0x2a2f41(0x32c)==='zBZiF')_0x46b431[_0x2a2f41(0xc17)]([_0x47ea38]);else{if(!_0x24b1ec[_0x2a2f41(0xca2)]['TpbActiveChangeEnabled'])return![];const _0x44d417=_0x59618e['aliveMembers']()['filter'](_0xe6583c=>_0xe6583c[_0x2a2f41(0x7b7)]()&&_0xe6583c[_0x2a2f41(0xc24)]());return _0x44d417[_0x2a2f41(0xc5c)]>0x0&&_0x292a73[_0x2a2f41(0x761)]()!==_0x44d417[_0x44d417[_0x2a2f41(0xc5c)]-0x1];}}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],_0x5c342f(0xe28),_0x4a1a5a=>{const _0x111761=_0x5c342f;if(!SceneManager[_0x111761(0x371)]())return;VisuMZ['ConvertParams'](_0x4a1a5a,_0x4a1a5a);const _0x24f798=$gameTemp[_0x111761(0x3d1)](),_0xbe293f=_0x4a1a5a['ForceRandom'],_0x50df32=_0x4a1a5a[_0x111761(0xd7a)];if(!_0x24f798)return;const _0x2da258=BattleManager[_0x111761(0x788)];for(;;){if('mrdFa'===_0x111761(0xd4c)){if(_0x1a4e2e[_0x111761(0x796)]())return-0x1;if(_0x4b61e1['isEnemy']())return 0x1;}else{BattleManager[_0x111761(0x788)]=Math[_0x111761(0xb47)](BattleManager[_0x111761(0xad0)][_0x111761(0xc5c)]);if(!_0xbe293f)break;if(BattleManager[_0x111761(0x788)]!==_0x2da258)break;if(BattleManager[_0x111761(0xad0)][_0x111761(0xc5c)]<=0x1){if(_0x111761(0xb31)!==_0x111761(0xb31))this['_battleBalloonQueue']=[];else{BattleManager[_0x111761(0x788)]=0x0;break;}}}}BattleManager[_0x111761(0x6bc)]=BattleManager[_0x111761(0xad0)][BattleManager['_targetIndex']]||null,BattleManager['_target']&&_0x50df32['toUpperCase']()[_0x111761(0xa5e)]()!=='UNTITLED'&&_0x24f798[_0x111761(0xc17)]([_0x50df32]);}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],'ActSeq_BattleVoice_PlayCommonLine',_0x4f37af=>{const _0x6cb072=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x6cb072(0x65f)])return;if(!ConfigManager[_0x6cb072(0xbd7)])return;VisuMZ['ConvertParams'](_0x4f37af,_0x4f37af);const _0x59f733=VisuMZ[_0x6cb072(0x432)](_0x4f37af['Targets']);let _0x4c0e28=_0x4f37af[_0x6cb072(0xda4)]||'';for(const _0x541a91 of _0x59f733){if(!_0x541a91)continue;_0x541a91['playBattleVoice'](_0x4c0e28);}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0xc34),_0x5666d7=>{const _0x5c5545=_0x5c342f;if(!SceneManager[_0x5c5545(0x371)]())return;if(!Imported[_0x5c5545(0x65f)])return;if(!ConfigManager[_0x5c5545(0xbd7)])return;VisuMZ[_0x5c5545(0x2ee)](_0x5666d7,_0x5666d7);const _0x158111=VisuMZ[_0x5c5545(0x432)](_0x5666d7[_0x5c5545(0x63d)]);let _0x15caba=(_0x5666d7[_0x5c5545(0xa9c)]||'')+(_0x5666d7[_0x5c5545(0xac5)]||'');for(const _0x5e1f9e of _0x158111){if(!_0x5e1f9e)continue;_0x5e1f9e[_0x5c5545(0x2e8)](_0x15caba);}}),PluginManager[_0x5c342f(0xa63)](pluginData['name'],'ActSeq_Weapon_ClearActiveWeapon',_0x1fa4d8=>{const _0x3d5f8d=_0x5c342f;if(!SceneManager[_0x3d5f8d(0x371)]())return;VisuMZ[_0x3d5f8d(0x2ee)](_0x1fa4d8,_0x1fa4d8);const _0x51c57e=VisuMZ['CreateActionSequenceTargets'](_0x1fa4d8['Targets']);for(const _0x1827c8 of _0x51c57e){if(!_0x1827c8)continue;if(!_0x1827c8['isActor']())continue;_0x1827c8[_0x3d5f8d(0xd31)]();}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x4d7),_0x2039b9=>{const _0x2199a6=_0x5c342f;if(!SceneManager[_0x2199a6(0x371)]())return;VisuMZ['ConvertParams'](_0x2039b9,_0x2039b9);const _0x40617d=$gameTemp['getLastPluginCommandInterpreter']();let _0x136b78=![];const _0x241cac=_0x2039b9['JumpToLabel'],_0x3c9079=VisuMZ[_0x2199a6(0x432)](_0x2039b9[_0x2199a6(0x63d)]);for(const _0x540523 of _0x3c9079){if(_0x2199a6(0x5ee)!==_0x2199a6(0x5ee)){const _0x23d29a=this[_0x2199a6(0x47b)]()?this[_0x2199a6(0x761)]():this[_0x2199a6(0x455)]();if(_0x23d29a){const _0x5be03e=_0x23d29a[_0x2199a6(0x340)];if(_0x5be03e[_0x2199a6(0xcbd)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x2f52e5(_0x2de86e['$1'])*0.01;else{if(_0x5be03e[_0x2199a6(0xcbd)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x17eceb(_0x2c9a12['$1'])||0x0;}}return 0x1;}else{if(!_0x540523)continue;if(!_0x540523[_0x2199a6(0x47b)]())continue;_0x540523['nextActiveWeaponSlot']();if(_0x540523['weapons']()['length']>0x0){if(_0x2199a6(0x787)!==_0x2199a6(0x3b3))_0x136b78=!![];else{const _0x1f3ec4=_0x54ffed[_0x2199a6(0xaee)](this[_0x2199a6(0xa91)](),_0x137942[_0x2199a6(0xcdf)]),_0x15f3b4=_0x4c3a81[_0x2199a6(0x9b3)](_0x1f3ec4*0x1e),_0x3be936=this[_0x2199a6(0x8b1)](_0x15f3b4,_0x1f3ec4),_0x5d486c=_0xf6a67[_0x2199a6(0x6f8)]/0x2,_0xc3b672=_0x3be936[_0x2199a6(0x812)][_0x2199a6(0xd3e)](_0x27dff5+'\x20');_0x3be936[_0x2199a6(0x812)]['textColor']=_0x205dda[_0x2199a6(0x915)](_0x5e944b['textColor']),_0x3be936[_0x2199a6(0x812)][_0x2199a6(0x524)](_0x5195c8,_0x5d486c,0x0,_0x15f3b4-_0x5d486c,_0x1f3ec4,'center');const _0x14fe41=_0x5d91a4[_0x2199a6(0x5c1)]((_0x1f3ec4-_0x675b12[_0x2199a6(0xcdf)])/0x2),_0x20df12=_0x15f3b4/0x2-_0x3ac7dd[_0x2199a6(0x6f8)]-_0xc3b672/0x2+_0x5d486c/0x2,_0x8f2a4=_0x10da66[_0x2199a6(0x498)](_0x2199a6(0xbcb)),_0x2720df=_0x48a0fd[_0x2199a6(0x6f8)],_0x56477c=_0x648bc9[_0x2199a6(0xcdf)],_0x4db9b3=_0x3629eb%0x10*_0x2720df,_0x399b43=_0x230b45[_0x2199a6(0x9b3)](_0x123c77/0x10)*_0x56477c;_0x3be936[_0x2199a6(0x812)][_0x2199a6(0x250)](_0x8f2a4,_0x4db9b3,_0x399b43,_0x2720df,_0x56477c,_0x20df12,_0x14fe41),this['_flashColor']=_0x4ea1cc['flashColor']||[0x0,0x0,0x0,0x0],this[_0x2199a6(0x224)]=_0x18e303[_0x2199a6(0x388)](this[_0x2199a6(0x224)]),this[_0x2199a6(0x64d)]=_0x1ca262[_0x2199a6(0xd28)]||0x0,_0x3be936['dy']=0x0;}}else _0x540523[_0x2199a6(0xd31)]();}}_0x136b78&&_0x241cac[_0x2199a6(0xb34)]()[_0x2199a6(0xa5e)]()!=='UNTITLED'&&_0x40617d[_0x2199a6(0xc17)]([_0x241cac]);}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x4fe),_0x16c28b=>{const _0x11cc49=_0x5c342f;if(!SceneManager[_0x11cc49(0x371)]())return;VisuMZ[_0x11cc49(0x2ee)](_0x16c28b,_0x16c28b);let _0x1487ab=_0x16c28b[_0x11cc49(0xc1a)];_0x1487ab--,_0x1487ab=Math[_0x11cc49(0xaee)](_0x1487ab,0x0);const _0x411aa0=VisuMZ[_0x11cc49(0x432)](_0x16c28b[_0x11cc49(0x63d)]);for(const _0x46ac23 of _0x411aa0){if(!_0x46ac23)continue;if(!_0x46ac23[_0x11cc49(0x47b)]())continue;_0x46ac23[_0x11cc49(0xb3f)](_0x1487ab);}}),PluginManager[_0x5c342f(0xa63)](pluginData[_0x5c342f(0x25e)],_0x5c342f(0x4ab),_0x126370=>{const _0x586c72=_0x5c342f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x586c72(0xb02)])return;VisuMZ['ConvertParams'](_0x126370,_0x126370);const _0x757e71=$gameTemp['getLastPluginCommandInterpreter'](),_0x2123b3=_0x126370[_0x586c72(0x35d)];if(!_0x757e71)return;$gameScreen['setBattleZoom'](_0x126370[_0x586c72(0xa69)],_0x126370[_0x586c72(0x7b5)],_0x126370[_0x586c72(0xd70)]);if(_0x2123b3)_0x757e71['setWaitMode'](_0x586c72(0x48c));}),PluginManager['registerCommand'](pluginData[_0x5c342f(0x25e)],'ActSeq_Zoom_Reset',_0x37f60b=>{const _0x548111=_0x5c342f;if(!SceneManager[_0x548111(0x371)]())return;if(!Imported[_0x548111(0xb02)])return;VisuMZ[_0x548111(0x2ee)](_0x37f60b,_0x37f60b);const _0x8a485a=$gameTemp[_0x548111(0x3d1)](),_0x407313=_0x37f60b[_0x548111(0x35d)];if(!_0x8a485a)return;$gameScreen[_0x548111(0x2b9)](0x1,_0x37f60b['Duration'],_0x37f60b[_0x548111(0xd70)]);if(_0x407313)_0x8a485a['setWaitMode']('battleZoom');}),PluginManager['registerCommand'](pluginData['name'],_0x5c342f(0x6bb),_0x252c3b=>{const _0x3593af=_0x5c342f;if(!SceneManager[_0x3593af(0x371)]())return;if(!Imported[_0x3593af(0xb02)])return;const _0x2510b7=$gameTemp[_0x3593af(0x3d1)]();if(!_0x2510b7)return;_0x2510b7['setWaitMode'](_0x3593af(0x48c));}),VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x41b)]=Scene_Boot['prototype']['onDatabaseLoaded'],Scene_Boot[_0x5c342f(0xca4)][_0x5c342f(0xb8c)]=function(){const _0x1997e4=_0x5c342f;this[_0x1997e4(0xa9f)](),this[_0x1997e4(0x2de)](),this[_0x1997e4(0x2fb)](),this[_0x1997e4(0xa80)](),VisuMZ['BattleCore']['Scene_Boot_onDatabaseLoaded']['call'](this),this[_0x1997e4(0x9f3)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x1997e4(0x283)](),this[_0x1997e4(0xafa)]();},Scene_Boot[_0x5c342f(0xca4)][_0x5c342f(0x9f3)]=function(){const _0x375d49=_0x5c342f;if(VisuMZ['ParseAllNotetags'])return;this[_0x375d49(0x8c3)](),this[_0x375d49(0xbd4)](),this[_0x375d49(0x1fc)]();},Scene_Boot[_0x5c342f(0xca4)][_0x5c342f(0xa9f)]=function(){const _0xa28f03=_0x5c342f,_0x128141=$dataSystem[_0xa28f03(0xdf3)][_0xa28f03(0xc5c)];for(let _0x2d73d4=0x0;_0x2d73d4<_0x128141;_0x2d73d4++){if(_0xa28f03(0x281)!==_0xa28f03(0x281))_0x31c074=_0x13dbfa[_0xa28f03(0x74c)]((_0x48bde6,_0x35d55d)=>_0x48bde6*(0x1-_0x35d55d),_0x3f5902);else{const _0x2c88cf=$dataSystem['attackMotions'][_0x2d73d4];if(_0x2c88cf)continue;$dataSystem[_0xa28f03(0xb5c)][_0x2d73d4]={'type':0x1,'weaponImageId':0x1};}}},Scene_Boot[_0x5c342f(0xca4)]['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x5350e2=_0x5c342f,_0x183d29=VisuMZ[_0x5350e2(0xca2)][_0x5350e2(0xc90)];_0x183d29[_0x5350e2(0x603)][_0x5350e2(0x62d)]===undefined&&(_0x183d29['Damage']['PopupPosition']=_0x5350e2(0x917));_0x183d29[_0x5350e2(0xe29)][_0x5350e2(0x6af)]===undefined&&(_0x183d29[_0x5350e2(0xe29)][_0x5350e2(0x6af)]=![]);_0x183d29['Enemy'][_0x5350e2(0x6af)]===undefined&&(_0x5350e2(0x752)===_0x5350e2(0x5a4)?(this[_0x5350e2(0x475)]=new _0xa2ee6b(_0x3c4141),this[_0x5350e2(0x3a5)]()):_0x183d29[_0x5350e2(0x4f1)][_0x5350e2(0x6af)]=!![]);_0x183d29[_0x5350e2(0xe29)][_0x5350e2(0xc5f)]===undefined&&(_0x5350e2(0x223)!==_0x5350e2(0x223)?_0x38e46e[_0x5350e2(0xca2)][_0x5350e2(0x522)][_0x5350e2(0xded)](this,_0x156d91,_0x952ddc):_0x183d29[_0x5350e2(0xe29)][_0x5350e2(0xc5f)]=![]);if(_0x183d29['Actor'][_0x5350e2(0x7b1)]===undefined){if(_0x5350e2(0x8be)===_0x5350e2(0x8be))_0x183d29[_0x5350e2(0xe29)][_0x5350e2(0x7b1)]=!![];else{if(!_0x5ab180['isSceneBattle']())return;_0x344283['ConvertParams'](_0x2e488b,_0xd8eb57);const _0x1b7dc7=_0x2ceb98[_0x5350e2(0x3d1)](),_0x42e6d4=_0x1fb900[_0x5350e2(0x52b)],_0x36784f=_0x3aaef2[_0x5350e2(0x432)](_0x46fc2d[_0x5350e2(0x63d)]),_0x48336e=_0x3909c6['Mirror'];if(!_0x1b7dc7||!_0x42e6d4)return;const _0x4d5278=_0x2d67b3[_0x42e6d4[_0x5350e2(0x610)]()],_0x211efa=_0x4d5278[_0x5350e2(0xdaa)];_0x9d7df7[_0x5350e2(0x299)](_0x36784f,_0x211efa,_0x48336e),_0x42eaab[_0x5350e2(0x7d2)]&&_0x1b7dc7['setWaitMode'](_0x5350e2(0xbfb));}}},VisuMZ[_0x5c342f(0xa30)]={},Scene_Boot[_0x5c342f(0xca4)][_0x5c342f(0x2fb)]=function(){const _0x54cf96=_0x5c342f;for(const _0x25be8e of VisuMZ[_0x54cf96(0xca2)]['Settings'][_0x54cf96(0x603)]['DamageStyleList']){if(!_0x25be8e)continue;const _0x413e89=_0x25be8e['Name']['toUpperCase']()[_0x54cf96(0xa5e)]();VisuMZ['DamageStyles'][_0x413e89]=_0x25be8e;}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x8d3)]={},Scene_Boot[_0x5c342f(0xca4)][_0x5c342f(0xa80)]=function(){const _0x4dc7e9=_0x5c342f,_0x611e3d=VisuMZ['BattleCore'][_0x4dc7e9(0x8d3)],_0x3dfa3b='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x54c69b=[['Pre',_0x4dc7e9(0x51d)],[_0x4dc7e9(0x99c),_0x4dc7e9(0x497)]],_0x3538a8=[[_0x4dc7e9(0x777),'JS\x20%1APPLY\x20%2'],[_0x4dc7e9(0x74e),_0x4dc7e9(0x360)]],_0x58a84c=[['',''],[_0x4dc7e9(0xaf8),_0x4dc7e9(0x563)],[_0x4dc7e9(0x663),'AS\x20TARGET']];for(const _0x5bb7a6 of _0x3538a8){if(_0x4dc7e9(0x8ec)!==_0x4dc7e9(0x1e0))for(const _0x30f86e of _0x58a84c){for(const _0x400413 of _0x54c69b){if(_0x4dc7e9(0xb83)==='eKJrQ'){const _0x5b0eae=_0x5bb7a6[0x0]['format'](_0x400413[0x0],_0x30f86e[0x0]),_0x4b00b4=_0x5bb7a6[0x1][_0x4dc7e9(0x266)](_0x400413[0x1],_0x30f86e[0x1])[_0x4dc7e9(0xa5e)](),_0x35e6fd=new RegExp(_0x3dfa3b['format'](_0x4b00b4),'i');_0x611e3d[_0x5b0eae]=_0x35e6fd;}else _0x22825c(_0x4dc7e9(0xdf1)['format'](_0x18b87e,_0x4c9986,_0x300d4b)),_0x55df7a[_0x4dc7e9(0x549)]();}}else this[_0x4dc7e9(0x843)](_0x4dc7e9(0x5db),[_0x3011d4],_0x504379,_0x5f5b21),this[_0x4dc7e9(0x843)](_0x4dc7e9(0x720),_0x11f007,_0x4a1a49,_0x4dc7e9(0x7ed),_0x26978e,!![],_0x4dc7e9(0x7bc),!![]),this[_0x4dc7e9(0x843)](_0x4dc7e9(0x92b),[_0x566091],_0x4dc7e9(0xa6f)),this[_0x4dc7e9(0x843)](_0x4dc7e9(0xd27));}const _0x3c6a3e=[[_0x4dc7e9(0xd11),_0x4dc7e9(0x9c2)],[_0x4dc7e9(0x494),_0x4dc7e9(0x1bf)]];for(const _0x29a87b of _0x3c6a3e){for(const _0x376c16 of _0x54c69b){const _0x19da3f=_0x29a87b[0x0]['format'](_0x376c16[0x0]),_0x4aff5c=_0x29a87b[0x1][_0x4dc7e9(0x266)](_0x376c16[0x1]),_0x402e0e=new RegExp(_0x3dfa3b[_0x4dc7e9(0x266)](_0x4aff5c),'i');_0x611e3d[_0x19da3f]=_0x402e0e;}}const _0x119f1f=[[_0x4dc7e9(0x7bb),'JS\x20%1START\x20BATTLE'],[_0x4dc7e9(0x1f6),_0x4dc7e9(0xdd8)],['BattleVictoryJS',_0x4dc7e9(0x67c)],[_0x4dc7e9(0x21c),_0x4dc7e9(0x7a4)],[_0x4dc7e9(0x383),_0x4dc7e9(0x542)],[_0x4dc7e9(0x2b8),'JS\x20ESCAPE\x20FAILURE'],[_0x4dc7e9(0xdf9),_0x4dc7e9(0x4c9)],[_0x4dc7e9(0x433),_0x4dc7e9(0xd8f)],[_0x4dc7e9(0xd7c),_0x4dc7e9(0xcd3)]];for(const _0x58db12 of _0x119f1f){if(_0x4dc7e9(0xc04)!==_0x4dc7e9(0x4ff))for(const _0x1779f2 of _0x54c69b){if(_0x4dc7e9(0xa16)==='trsbU')_0x629c65[_0x4dc7e9(0x5f2)]*=-0x1;else{const _0x30d9ee=_0x58db12[0x0]['format'](_0x1779f2[0x0]),_0x487367=_0x58db12[0x1][_0x4dc7e9(0x266)](_0x1779f2[0x1]),_0x4f953e=new RegExp(_0x3dfa3b['format'](_0x487367),'i');_0x611e3d[_0x30d9ee]=_0x4f953e;}}else{_0x297d52[_0x4dc7e9(0x8e9)]&&(_0x2b60f0=_0x21721d['parseLocalizedText'](_0x5ae96e));const _0xcef3fc=this[_0x4dc7e9(0x241)],_0x5bd8a7=_0xcef3fc[_0x4dc7e9(0x47d)];_0x44439a=_0x2a6ad9||0xffffffff;let _0x5a1574=_0x376d9b,_0xfa02c7=_0x31f8f2['round'](_0x274c2f+0x18/0x2+this['fontSize']*0.35);_0x1241de===_0x4dc7e9(0x83a)&&(_0x5a1574+=_0x49261a/0x2),_0x384040===_0x4dc7e9(0x1d7)&&(_0x5a1574+=_0xd9f96b),_0xcef3fc['save'](),_0xcef3fc[_0x4dc7e9(0xb4c)]=this[_0x4dc7e9(0xa1a)](),_0xcef3fc[_0x4dc7e9(0x359)]=_0x53ac29,_0xcef3fc[_0x4dc7e9(0x6ae)]=_0x4dc7e9(0xb82),_0xcef3fc[_0x4dc7e9(0x47d)]=0x1,this['_drawTextOutline'](_0x311bc0,_0x5a1574,_0xfa02c7,_0x3eb21e),_0xcef3fc['globalAlpha']=_0x5bd8a7,this[_0x4dc7e9(0x1bb)](_0x37ed62,_0x5a1574,_0xfa02c7,_0x44cdc0),_0xcef3fc[_0x4dc7e9(0x81b)](),this[_0x4dc7e9(0x3e9)][_0x4dc7e9(0x2a5)]();}}},Scene_Boot[_0x5c342f(0xca4)]['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x201f37=_0x5c342f,_0xd65942=$dataSkills[_0x201f37(0x310)]($dataItems);for(const _0x3dcc22 of _0xd65942){if(_0x201f37(0x60c)!==_0x201f37(0x60c))_0x334868=_0x4bb029(_0x5eb603['$1']),_0x52f0f6=_0x426b14(_0x3e7b46['$2']);else{if(!_0x3dcc22)continue;VisuMZ[_0x201f37(0xca2)][_0x201f37(0x6aa)](_0x3dcc22);}}},Scene_Boot[_0x5c342f(0xca4)][_0x5c342f(0xbd4)]=function(){const _0x318dd9=_0x5c342f,_0x4aa961=$dataActors[_0x318dd9(0x310)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x17f2e1 of _0x4aa961){if(!_0x17f2e1)continue;VisuMZ[_0x318dd9(0xca2)][_0x318dd9(0x38a)](_0x17f2e1);}},Scene_Boot[_0x5c342f(0xca4)][_0x5c342f(0x46c)]=function(){const _0x3553e3=_0x5c342f,_0x517f46=VisuMZ[_0x3553e3(0xca2)][_0x3553e3(0xc90)][_0x3553e3(0x535)][_0x3553e3(0x8cb)],_0x1b5aa2=[];for(const _0x1c98c6 of _0x517f46){const _0x28bd80=$dataTroops[_0x1c98c6];if(_0x28bd80)_0x1b5aa2[_0x3553e3(0x843)](JsonEx[_0x3553e3(0x388)](_0x28bd80));}for(const _0x2d5c0a of $dataTroops){if(!_0x2d5c0a)continue;for(const _0x565d33 of _0x1b5aa2){if(_0x3553e3(0x959)!=='UdCOm'){if(_0x565d33['id']===_0x2d5c0a['id'])continue;_0x2d5c0a['pages']=_0x2d5c0a[_0x3553e3(0x64a)][_0x3553e3(0x310)](_0x565d33['pages']);}else _0x47101e=_0x5e0f24>=_0x59166?_0x2279e6:_0x47aa5b;}}},Scene_Boot[_0x5c342f(0xca4)][_0x5c342f(0x283)]=function(){const _0x17f49a=_0x5c342f,_0x37a696=VisuMZ[_0x17f49a(0xca2)][_0x17f49a(0xc90)][_0x17f49a(0x535)];if(_0x37a696[_0x17f49a(0x5b1)]>0x0&&$dataCommonEvents[_0x37a696[_0x17f49a(0x5b1)]]){const _0x2d7069=$dataCommonEvents[_0x37a696['BattleStartEvent']],_0x2552b9=_0x2d7069[_0x17f49a(0x594)][_0x17f49a(0xc5c)]-0x2,_0x4f78fd=_0x2d7069[_0x17f49a(0x594)][_0x2552b9];if(_0x4f78fd&&_0x4f78fd[_0x17f49a(0x441)]!==0xe6){if(_0x17f49a(0x584)!==_0x17f49a(0x584))_0x397687='left';else{const _0x354525={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x15ab74=_0x2d7069[_0x17f49a(0x594)]['pop']();_0x2d7069[_0x17f49a(0x594)]['unshift'](_0x354525),_0x2d7069[_0x17f49a(0x594)]['unshift'](_0x15ab74);}}}},Scene_Boot[_0x5c342f(0xca4)]['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x4ac14c=_0x5c342f;VisuMZ[_0x4ac14c(0xca2)][_0x4ac14c(0x435)](),VisuMZ[_0x4ac14c(0xca2)][_0x4ac14c(0xb76)]($dataSkills),VisuMZ[_0x4ac14c(0xca2)][_0x4ac14c(0xb76)]($dataItems);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x435)]=function(){const _0x6e818b=_0x5c342f;VisuMZ[_0x6e818b(0xca2)]['_commonEventKey']={};for(const _0x129f6e of $dataCommonEvents){if(!_0x129f6e)continue;if(_0x129f6e[_0x6e818b(0x25e)][_0x6e818b(0xcbd)](/\[(.*)\]/i)){let _0x5528b6=String(RegExp['$1'])[_0x6e818b(0xbc8)](/,/g,'')[_0x6e818b(0xb34)]()[_0x6e818b(0xa5e)]();VisuMZ[_0x6e818b(0xca2)][_0x6e818b(0xc9b)][_0x5528b6]=_0x129f6e['id'];}}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xb76)]=function(_0x113764){const _0x36948d=_0x5c342f;for(const _0x48d73b of _0x113764){if(_0x36948d(0x46e)!==_0x36948d(0x4a3)){if(!_0x48d73b)continue;VisuMZ[_0x36948d(0xca2)][_0x36948d(0x374)](_0x48d73b);}else this[_0x36948d(0xbe9)](!![]),this['createMultiTargetWindow'](![]);}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x374)]=function(_0x165c20){const _0x1bd621=_0x5c342f;if(!_0x165c20)return;if(!_0x165c20[_0x1bd621(0xcb8)])return;VisuMZ[_0x1bd621(0xca2)]['_commonEventKey']=VisuMZ[_0x1bd621(0xca2)][_0x1bd621(0xc9b)]||{};const _0x3079c6=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x43dead=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x229331=[];const _0x1ad573=_0x165c20[_0x1bd621(0x340)][_0x1bd621(0xcbd)](_0x3079c6);if(_0x1ad573){if(_0x1bd621(0x4c3)==='rlazJ'){for(const _0x55d787 of _0x1ad573){_0x55d787[_0x1bd621(0xcbd)](_0x3079c6);const _0x5e3072=String(RegExp['$1'])[_0x1bd621(0x68e)](',')[_0x1bd621(0xd08)](_0x1b91bd=>String(_0x1b91bd)[_0x1bd621(0xb34)]()['trim']());_0x229331=_0x229331['concat'](_0x5e3072);}!_0x165c20[_0x1bd621(0x340)][_0x1bd621(0xcbd)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1bd621(0x17b)===_0x1bd621(0x92f)?_0x3c2fd9=_0x3a8213['CastMagical']:_0x165c20[_0x1bd621(0x340)]+=_0x1bd621(0x581));;}else return _0x3d76b9[_0x1bd621(0xca2)][_0x1bd621(0xc90)][_0x1bd621(0x4f1)][_0x1bd621(0x2b4)]||_0x43eba7['mainFontSize']();}if(_0x165c20[_0x1bd621(0x340)][_0x1bd621(0xcbd)](_0x43dead)){if('akcvN'!==_0x1bd621(0xabd)){const _0x381dc5=String(RegExp['$1'])[_0x1bd621(0x68e)](/[\r\n]+/)[_0x1bd621(0xd08)](_0x3b9727=>String(_0x3b9727)[_0x1bd621(0xb34)]()[_0x1bd621(0xa5e)]());_0x229331=_0x229331['concat'](_0x381dc5);!_0x165c20[_0x1bd621(0x340)][_0x1bd621(0xcbd)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1bd621(0xaf2)!=='sqixh'?_0x165c20[_0x1bd621(0x340)]+=_0x1bd621(0x581):(_0x1cdbb3['BattleCore']['ParseEnemyNotetags']&&_0x23d55d[_0x1bd621(0xca2)][_0x1bd621(0x2c7)][_0x1bd621(0xded)](this,_0x56142d),_0x5cb8af['BattleCore']['Parse_Notetags_TraitObjects'](_0x557f8b)));;}else _0x237e27=_0x3157a4>=_0x2059ec?_0x445ec6:_0x556ab6;}for(const _0x263c79 of _0x229331){if('epMtz'===_0x1bd621(0x19b)){if(VisuMZ[_0x1bd621(0xca2)][_0x1bd621(0xc9b)][_0x263c79]){const _0x41f911=VisuMZ['BattleCore'][_0x1bd621(0xc9b)][_0x263c79],_0x3da2e3={'code':0x2c,'dataId':_0x41f911,'value1':0x1,'value2':0x0};_0x165c20['effects'][_0x1bd621(0x843)](_0x3da2e3);}}else this[_0x1bd621(0xaf1)]();}},Scene_Boot[_0x5c342f(0xca4)]['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x214daa=_0x5c342f,_0x596604=$dataSkills[_0x214daa(0x310)]($dataItems);for(const _0x1676a8 of _0x596604){if('WfWMl'===_0x214daa(0x33f)){if(!_0x1676a8)continue;VisuMZ['BattleCore'][_0x214daa(0x379)](_0x1676a8);}else return _0x484f3a[_0x214daa(0xca2)][_0x214daa(0x326)][_0x214daa(0xded)](this);}},VisuMZ[_0x5c342f(0xca2)]['ParseActorNotetags']=VisuMZ[_0x5c342f(0xbbf)],VisuMZ[_0x5c342f(0xbbf)]=function(_0x18c5c4){const _0x3c3915=_0x5c342f;VisuMZ[_0x3c3915(0xca2)][_0x3c3915(0xbbf)]&&(_0x3c3915(0x5a2)!==_0x3c3915(0x3ea)?VisuMZ[_0x3c3915(0xca2)][_0x3c3915(0xbbf)][_0x3c3915(0xded)](this,_0x18c5c4):_0x534d34[_0x3c3915(0xca2)][_0x3c3915(0x306)][_0x3c3915(0xded)](this,_0x3fea03)),VisuMZ[_0x3c3915(0xca2)][_0x3c3915(0x38a)](_0x18c5c4);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x306)]=VisuMZ[_0x5c342f(0x306)],VisuMZ['ParseClassNotetags']=function(_0x1e0378){const _0x25208c=_0x5c342f;VisuMZ[_0x25208c(0xca2)][_0x25208c(0x306)]&&VisuMZ[_0x25208c(0xca2)][_0x25208c(0x306)]['call'](this,_0x1e0378),VisuMZ[_0x25208c(0xca2)]['Parse_Notetags_TraitObjects'](_0x1e0378);},VisuMZ[_0x5c342f(0xca2)]['ParseSkillNotetags']=VisuMZ[_0x5c342f(0x534)],VisuMZ[_0x5c342f(0x534)]=function(_0x5b7ccf){const _0x5ca906=_0x5c342f;VisuMZ[_0x5ca906(0xca2)][_0x5ca906(0x534)]&&(_0x5ca906(0xad4)===_0x5ca906(0xad4)?VisuMZ[_0x5ca906(0xca2)][_0x5ca906(0x534)][_0x5ca906(0xded)](this,_0x5b7ccf):this['_cancelButton']['x']=0x8),VisuMZ[_0x5ca906(0xca2)]['Parse_Notetags_Action'](_0x5b7ccf),VisuMZ[_0x5ca906(0xca2)][_0x5ca906(0x379)](_0x5b7ccf);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x646)]=VisuMZ[_0x5c342f(0x646)],VisuMZ[_0x5c342f(0x646)]=function(_0x47cabc){const _0x41319f=_0x5c342f;VisuMZ[_0x41319f(0xca2)][_0x41319f(0x646)]&&VisuMZ[_0x41319f(0xca2)][_0x41319f(0x646)][_0x41319f(0xded)](this,_0x47cabc),VisuMZ[_0x41319f(0xca2)][_0x41319f(0x6aa)](_0x47cabc),VisuMZ[_0x41319f(0xca2)][_0x41319f(0x379)](_0x47cabc);},VisuMZ['BattleCore'][_0x5c342f(0x1a6)]=VisuMZ[_0x5c342f(0x1a6)],VisuMZ['ParseWeaponNotetags']=function(_0x305cb4){const _0x2539ec=_0x5c342f;VisuMZ[_0x2539ec(0xca2)]['ParseWeaponNotetags']&&VisuMZ['BattleCore'][_0x2539ec(0x1a6)][_0x2539ec(0xded)](this,_0x305cb4),VisuMZ[_0x2539ec(0xca2)][_0x2539ec(0x38a)](_0x305cb4);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x41c)]=VisuMZ[_0x5c342f(0x41c)],VisuMZ[_0x5c342f(0x41c)]=function(_0x4927d8){const _0x177ee4=_0x5c342f;VisuMZ[_0x177ee4(0xca2)][_0x177ee4(0x41c)]&&VisuMZ[_0x177ee4(0xca2)][_0x177ee4(0x41c)]['call'](this,_0x4927d8),VisuMZ[_0x177ee4(0xca2)]['Parse_Notetags_TraitObjects'](_0x4927d8);},VisuMZ[_0x5c342f(0xca2)]['ParseEnemyNotetags']=VisuMZ[_0x5c342f(0x2c7)],VisuMZ[_0x5c342f(0x2c7)]=function(_0x23e9b3){const _0x20be65=_0x5c342f;VisuMZ[_0x20be65(0xca2)][_0x20be65(0x2c7)]&&VisuMZ['BattleCore'][_0x20be65(0x2c7)]['call'](this,_0x23e9b3),VisuMZ[_0x20be65(0xca2)][_0x20be65(0x38a)](_0x23e9b3);},VisuMZ[_0x5c342f(0xca2)]['ParseStateNotetags']=VisuMZ[_0x5c342f(0xbf8)],VisuMZ[_0x5c342f(0xbf8)]=function(_0x3e5e62){const _0x2b8d9a=_0x5c342f;if(VisuMZ[_0x2b8d9a(0xca2)]['ParseStateNotetags']){if('LhxhZ'===_0x2b8d9a(0xa50))VisuMZ[_0x2b8d9a(0xca2)][_0x2b8d9a(0xbf8)][_0x2b8d9a(0xded)](this,_0x3e5e62);else{if(!_0x6a748c[_0x2b8d9a(0x371)]())return;if(!_0x5458ae['VisuMZ_1_ElementStatusCore'])return;const _0x511b47=_0x583f09[_0x2b8d9a(0x492)];if(!_0x511b47)return;_0x511b47[_0x2b8d9a(0x9e9)]=!![];}}VisuMZ[_0x2b8d9a(0xca2)]['Parse_Notetags_TraitObjects'](_0x3e5e62);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x6aa)]=function(_0x5b5f49){const _0x2497b4=_0x5c342f,_0x8408a3=[_0x2497b4(0x7f1),_0x2497b4(0x928),'PreDamageJS','PostDamageJS','PreStartActionJS',_0x2497b4(0xb3d),_0x2497b4(0xae9),_0x2497b4(0xe26)];for(const _0x52166b of _0x8408a3){VisuMZ[_0x2497b4(0xca2)]['createJS'](_0x5b5f49,_0x52166b);}const _0x1f292=_0x5b5f49[_0x2497b4(0x340)];if(_0x1f292[_0x2497b4(0xcbd)](/<ALWAYS CRITICAL/i)){if(_0x2497b4(0xbdb)!==_0x2497b4(0x90c))_0x5b5f49['damage'][_0x2497b4(0xe18)]=!![];else{const _0x4ff185=_0x4faff8[_0x2497b4(0x3e0)]?_0x2812cb[_0x2497b4(0xbcc)][_0x2497b4(0xc90)][_0x2497b4(0x8cc)]:_0x5aa2cf[_0x2497b4(0xca2)][_0x2497b4(0xc90)][_0x2497b4(0x890)],_0x5d2f7f=_0x3e42d7[_0x2497b4(0xbd9)]['includes'](_0x4da04f),_0x30ebd2=_0x5d2f7f?_0x4ff185[_0x2497b4(0xb04)]:_0x4ff185[_0x2497b4(0x52f)];_0x46f6e2='\x5cI[%1]%2'[_0x2497b4(0x266)](_0x30ebd2,_0x1c8e57);}}_0x1f292[_0x2497b4(0xcbd)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x5b5f49['repeats']=Math[_0x2497b4(0xaee)](0x1,Number(RegExp['$1']))),_0x1f292[_0x2497b4(0xcbd)](/<TARGET:[ ](.*)>/i)&&(_0x5b5f49['scope']=String(RegExp['$1'])['toUpperCase']()[_0x2497b4(0xa5e)]());},VisuMZ['BattleCore'][_0x5c342f(0x38a)]=function(_0x3586e1){const _0x1cb46d=_0x5c342f,_0x4d402e=[_0x1cb46d(0x262),'PostApplyAsUserJS','PreDamageAsUserJS',_0x1cb46d(0xa74),_0x1cb46d(0xc74),_0x1cb46d(0x1f7),'PreDamageAsTargetJS',_0x1cb46d(0xa7f),_0x1cb46d(0x305),_0x1cb46d(0xb3d),_0x1cb46d(0xae9),_0x1cb46d(0xe26),'PreStartBattleJS',_0x1cb46d(0x415),_0x1cb46d(0xc0a),_0x1cb46d(0xde8),_0x1cb46d(0x9cc),_0x1cb46d(0x21c),_0x1cb46d(0x383),_0x1cb46d(0x2b8),'PreStartTurnJS',_0x1cb46d(0xc6d),_0x1cb46d(0xa25),_0x1cb46d(0x649),_0x1cb46d(0x557),_0x1cb46d(0xd58)];for(const _0x1d31ae of _0x4d402e){VisuMZ[_0x1cb46d(0xca2)][_0x1cb46d(0x3b5)](_0x3586e1,_0x1d31ae);}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x379)]=function(_0xe22fbb){const _0x3bdb65=_0x5c342f,_0x5274da=_0xe22fbb['note'];if(_0x5274da[_0x3bdb65(0xcbd)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){if(_0x3bdb65(0xa6d)!==_0x3bdb65(0xa6d))_0x26db4c[_0x3bdb65(0xca2)]['Spriteset_Battle_update'][_0x3bdb65(0xded)](this),this[_0x3bdb65(0x248)](),this[_0x3bdb65(0xb44)](),this['updateWeather'](),this[_0x3bdb65(0x5aa)]();else{const _0x2b6114=String(RegExp['$1']),_0x13b87b=VisuMZ[_0x3bdb65(0xca2)]['createKeyJS'](_0xe22fbb,'Targets');VisuMZ[_0x3bdb65(0xca2)]['createTargetsJS'](_0x2b6114,_0x13b87b);}}if(_0x5274da[_0x3bdb65(0xcbd)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x54fbf6=String(RegExp['$1']),_0x4327c6=VisuMZ['BattleCore'][_0x3bdb65(0xdd1)](_0xe22fbb,'CommandVisible');VisuMZ[_0x3bdb65(0xca2)][_0x3bdb65(0xbe8)](_0x54fbf6,_0x4327c6);}},VisuMZ[_0x5c342f(0xca2)]['JS']={},VisuMZ['BattleCore'][_0x5c342f(0x3b5)]=function(_0xdd2c0e,_0x2fb354){const _0x4633b9=_0x5c342f,_0x44d022=_0xdd2c0e[_0x4633b9(0x340)];if(_0x44d022['match'](VisuMZ[_0x4633b9(0xca2)][_0x4633b9(0x8d3)][_0x2fb354])){const _0x2e87b8=RegExp['$1'],_0x33d2d4='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'['format'](_0x2e87b8),_0x14f3d9=VisuMZ[_0x4633b9(0xca2)][_0x4633b9(0xdd1)](_0xdd2c0e,_0x2fb354);VisuMZ[_0x4633b9(0xca2)]['JS'][_0x14f3d9]=new Function(_0x33d2d4);}},VisuMZ['BattleCore'][_0x5c342f(0xdd1)]=function(_0x2c53f8,_0x35363f){const _0x151bd8=_0x5c342f;if(VisuMZ[_0x151bd8(0xdd1)])return VisuMZ[_0x151bd8(0xdd1)](_0x2c53f8,_0x35363f);let _0x14b3db='';if($dataActors[_0x151bd8(0xaec)](_0x2c53f8))_0x14b3db=_0x151bd8(0x54c)[_0x151bd8(0x266)](_0x2c53f8['id'],_0x35363f);if($dataClasses[_0x151bd8(0xaec)](_0x2c53f8))_0x14b3db=_0x151bd8(0x4f6)['format'](_0x2c53f8['id'],_0x35363f);if($dataSkills[_0x151bd8(0xaec)](_0x2c53f8))_0x14b3db=_0x151bd8(0x73f)[_0x151bd8(0x266)](_0x2c53f8['id'],_0x35363f);if($dataItems[_0x151bd8(0xaec)](_0x2c53f8))_0x14b3db=_0x151bd8(0xa2c)['format'](_0x2c53f8['id'],_0x35363f);if($dataWeapons[_0x151bd8(0xaec)](_0x2c53f8))_0x14b3db=_0x151bd8(0x450)['format'](_0x2c53f8['id'],_0x35363f);if($dataArmors['includes'](_0x2c53f8))_0x14b3db=_0x151bd8(0x290)[_0x151bd8(0x266)](_0x2c53f8['id'],_0x35363f);if($dataEnemies[_0x151bd8(0xaec)](_0x2c53f8))_0x14b3db=_0x151bd8(0xb07)[_0x151bd8(0x266)](_0x2c53f8['id'],_0x35363f);if($dataStates[_0x151bd8(0xaec)](_0x2c53f8))_0x14b3db=_0x151bd8(0x446)[_0x151bd8(0x266)](_0x2c53f8['id'],_0x35363f);return _0x14b3db;},VisuMZ[_0x5c342f(0xca2)]['createTargetsJS']=function(_0x27d01b,_0x5a206f){const _0x31ee61=_0x5c342f,_0x203a41=_0x31ee61(0x8a0)[_0x31ee61(0x266)](_0x27d01b);VisuMZ['BattleCore']['JS'][_0x5a206f]=new Function(_0x203a41);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xbe8)]=function(_0x1bb1b1,_0x37b32a){const _0x26cc6c=_0x5c342f,_0xee2e1a='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x26cc6c(0x266)](_0x1bb1b1);VisuMZ['BattleCore']['JS'][_0x37b32a]=new Function(_0xee2e1a);},TextManager[_0x5c342f(0x659)]=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)][_0x5c342f(0x7e4)][_0x5c342f(0xd41)],TextManager[_0x5c342f(0xbcd)]=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)]['AutoBattle']['StartName'],TextManager[_0x5c342f(0x814)]=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)]['AutoBattle'][_0x5c342f(0x7fb)],TextManager[_0x5c342f(0xd8e)]=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)][_0x5c342f(0x82c)][_0x5c342f(0xc8a)],ColorManager[_0x5c342f(0x915)]=function(_0x35b1ee){const _0xe4d3dd=_0x5c342f;return _0x35b1ee=String(_0x35b1ee),_0x35b1ee[_0xe4d3dd(0xcbd)](/#(.*)/i)?'TiSWm'!==_0xe4d3dd(0xde2)?this[_0xe4d3dd(0x21f)]()[_0xe4d3dd(0x967)](_0x782f4c=>_0x782f4c[_0xe4d3dd(0x196)]()):_0xe4d3dd(0xb21)[_0xe4d3dd(0x266)](String(RegExp['$1'])):this[_0xe4d3dd(0xcba)](Number(_0x35b1ee));},DataManager[_0x5c342f(0x271)]=function(_0x4fc836){const _0x4c283c=_0x5c342f;if(_0x4fc836[_0x4c283c(0x340)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x4c283c(0xb03)===_0x4c283c(0x352))return _0x32d9c0[_0x4c283c(0x70c)];else{const _0x31e99f=String(RegExp['$1'])['toUpperCase']()[_0x4c283c(0xa5e)]();if(_0x31e99f===_0x4c283c(0x711))return'MANUAL';if(VisuMZ[_0x4c283c(0xa30)][_0x31e99f])return _0x31e99f;}}const _0x441ed0=VisuMZ['BattleCore'][_0x4c283c(0xc90)]['Damage'][_0x4c283c(0x1dd)]['toUpperCase']()[_0x4c283c(0xa5e)]();if(VisuMZ['DamageStyles'][_0x441ed0])return _0x441ed0;return _0x4c283c(0x711);},DataManager[_0x5c342f(0x30a)]=function(_0x2a4744){const _0x5dc800=_0x5c342f;_0x2a4744=_0x2a4744['toUpperCase']()[_0x5dc800(0xa5e)](),this['_stypeIDs']=this[_0x5dc800(0x9af)]||{};if(this['_stypeIDs'][_0x2a4744])return this[_0x5dc800(0x9af)][_0x2a4744];for(let _0x3de0bf=0x1;_0x3de0bf<0x64;_0x3de0bf++){if(_0x5dc800(0x7a1)!==_0x5dc800(0x783)){if(!$dataSystem[_0x5dc800(0xd7f)][_0x3de0bf])continue;let _0x23be25=$dataSystem[_0x5dc800(0xd7f)][_0x3de0bf][_0x5dc800(0xb34)]()[_0x5dc800(0xa5e)]();_0x23be25=_0x23be25[_0x5dc800(0xbc8)](/\x1I\[(\d+)\]/gi,''),_0x23be25=_0x23be25['replace'](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x23be25]=_0x3de0bf;}else{if(!_0x4202f9[_0x5dc800(0x371)]())return;_0x58b425[_0x5dc800(0x2ee)](_0x431986,_0x23d223);const _0x2c56cc=_0x242da7[_0x5dc800(0x3d1)](),_0x58e2d8=_0x5095a2[_0x5dc800(0x432)](_0x2aaf8a[_0x5dc800(0x63d)]),_0x4480a9=_0x40eb68(_0x2296c9['AnimationID'])||0x1,_0x1322b3=_0x57c791[_0x5dc800(0x6b9)];if(!_0x2c56cc)return;_0x13b501[_0x5dc800(0x299)](_0x58e2d8,_0x4480a9,_0x1322b3);if(_0x176ceb[_0x5dc800(0x7d2)])_0x2c56cc[_0x5dc800(0x430)]('battleAnimation');}}return this['_stypeIDs'][_0x2a4744]||0x0;},DataManager[_0x5c342f(0x3df)]=function(_0x2715e6){const _0x51e0fc=_0x5c342f;_0x2715e6=_0x2715e6[_0x51e0fc(0xb34)]()[_0x51e0fc(0xa5e)](),this['_skillIDs']=this[_0x51e0fc(0x4a4)]||{};if(this[_0x51e0fc(0x4a4)][_0x2715e6])return this['_skillIDs'][_0x2715e6];for(const _0x2dcc43 of $dataSkills){if(_0x51e0fc(0x1ae)===_0x51e0fc(0x2aa))this[_0x51e0fc(0x4af)]();else{if(!_0x2dcc43)continue;this[_0x51e0fc(0x4a4)][_0x2dcc43[_0x51e0fc(0x25e)][_0x51e0fc(0xb34)]()[_0x51e0fc(0xa5e)]()]=_0x2dcc43['id'];}}return this['_skillIDs'][_0x2715e6]||0x0;},DataManager[_0x5c342f(0xd0d)]=function(_0x3d16cd){const _0x2fbaa5=_0x5c342f;_0x3d16cd=_0x3d16cd['toUpperCase']()[_0x2fbaa5(0xa5e)](),this['_enemyIDs']=this[_0x2fbaa5(0x7ea)]||{};if(this[_0x2fbaa5(0x7ea)][_0x3d16cd])return this[_0x2fbaa5(0x7ea)][_0x3d16cd];for(const _0x2c9fb3 of $dataEnemies){if(_0x2fbaa5(0x7c8)===_0x2fbaa5(0x454))_0x589fc8[_0x2fbaa5(0x28f)](_0x3f7110,_0x8f53a3,_0xb1efb0,_0x403425,_0xc1a338,-0x1),this[_0x2fbaa5(0x24a)]();else{if(!_0x2c9fb3)continue;this[_0x2fbaa5(0x7ea)][_0x2c9fb3[_0x2fbaa5(0x25e)]['toUpperCase']()['trim']()]=_0x2c9fb3['id'];}}return this[_0x2fbaa5(0x7ea)][_0x3d16cd]||0x0;},DataManager[_0x5c342f(0xb0a)]=function(_0x3c61bb){const _0x179565=_0x5c342f;_0x3c61bb=_0x3c61bb['toUpperCase']()[_0x179565(0xa5e)](),this[_0x179565(0xbac)]=this[_0x179565(0xbac)]||{};if(this[_0x179565(0xbac)][_0x3c61bb])return this[_0x179565(0xbac)][_0x3c61bb];for(let _0x1d8539=0x1;_0x1d8539<0x64;_0x1d8539++){if(!$dataSystem[_0x179565(0xdf3)][_0x1d8539])continue;let _0x5a4c36=$dataSystem['weaponTypes'][_0x1d8539]['toUpperCase']()['trim']();_0x5a4c36=_0x5a4c36['replace'](/\x1I\[(\d+)\]/gi,''),_0x5a4c36=_0x5a4c36['replace'](/\\I\[(\d+)\]/gi,''),this[_0x179565(0xbac)][_0x5a4c36]=_0x1d8539;}return this[_0x179565(0xbac)][_0x179565(0x57e)]=0x0,this[_0x179565(0xbac)][_0x3c61bb]||0x0;},DataManager[_0x5c342f(0x188)]=function(_0x42c304){const _0x3fe964=_0x5c342f,_0x47a894=_0x3fe964(0x973);let _0x2671bd=_0x42c304[_0x3fe964(0x1a2)],_0x21947e=_0x42c304[_0x3fe964(0x25e)];const _0x684061=_0x42c304[_0x3fe964(0x340)];_0x684061[_0x3fe964(0xcbd)](/<DISPLAY ICON: (\d+)>/i)&&(_0x3fe964(0xe07)!=='lWEJm'?_0x2671bd=Number(RegExp['$1']):(this[_0x3fe964(0xa8f)]()[_0x3fe964(0x393)](_0x4cc078),_0x472497[_0x3fe964(0x766)]=!![]));if(_0x684061['match'](/<DISPLAY TEXT: (.*)>/i)){if(_0x3fe964(0x878)==='oERks'){const _0x547754=_0x7165f9(_0x35db87['$1'])[_0x3fe964(0x68e)](/[\r\n]+/)['remove'](''),_0x6b4be7=_0x5f05c5[_0x3fe964(0xd84)](_0x547754);_0x2aadd7[_0x3fe964(0x989)]=_0x5bddf4[_0x3fe964(0xb0a)](_0x6b4be7);}else _0x21947e=String(RegExp['$1']);}return _0x47a894[_0x3fe964(0x266)](_0x2671bd,_0x21947e);},DataManager[_0x5c342f(0xe09)]=function(_0x18e1c4){const _0x20df41=_0x5c342f;if(_0x18e1c4['note'][_0x20df41(0xcbd)](/<COMMAND TEXT: (.*)>/i))return String(RegExp['$1']);else{if(_0x20df41(0xe37)===_0x20df41(0xe37))return _0x18e1c4[_0x20df41(0x25e)];else{_0x5d203b=_0xf9beab||'',_0x1e5830=_0x46872e||'';_0x5f4fd6===''&&_0x2032ee===''&&(_0x19de42=this[_0x20df41(0xb53)][_0x20df41(0xd8b)](),_0x5c8265=this[_0x20df41(0x2ef)][_0x20df41(0xe2c)]());const _0x299b1c=_0x53a8d2[_0x20df41(0x180)](_0x1e1d93),_0x2a18cd=_0x140a6f['loadBattleback2'](_0x421423);_0x299b1c['addLoadListener'](this['updateBattlebackBitmap1'][_0x20df41(0x5c9)](this,this[_0x20df41(0xb53)],this['_back2Sprite'],_0x299b1c,_0x2a18cd));}}},DataManager[_0x5c342f(0xbf9)]=function(_0x340a69){const _0x24cd9c=_0x5c342f;if(_0x340a69['note'][_0x24cd9c(0xcbd)](/<COMMAND ICON: (\d+)>/i)){if(_0x24cd9c(0x4e2)!=='wMrYB'){if(this[_0x24cd9c(0x841)]){const _0xcc6f06=this[_0x24cd9c(0x841)][_0x24cd9c(0x812)],_0x4bdfd6=this['width']-0x8,_0x37e827=this[_0x24cd9c(0x880)],_0x16711d=this[_0x24cd9c(0xde9)],_0x14633c=_0x17ff75['dimColor1'](),_0x786202=_0x12135c[_0x24cd9c(0x705)]();this[_0x24cd9c(0x841)]['x']=0x4,_0xcc6f06[_0x24cd9c(0x227)](_0x4bdfd6,_0x37e827),_0xcc6f06[_0x24cd9c(0xcfb)](0x0,0x0,_0x4bdfd6,_0x16711d,_0x786202,_0x14633c,!![]),_0xcc6f06[_0x24cd9c(0x17a)](0x0,_0x16711d,_0x4bdfd6,_0x37e827-_0x16711d*0x2,_0x14633c),_0xcc6f06['gradientFillRect'](0x0,_0x37e827-_0x16711d,_0x4bdfd6,_0x16711d,_0x14633c,_0x786202,!![]),this[_0x24cd9c(0x841)]['setFrame'](0x0,0x0,_0x4bdfd6,_0x37e827);}}else return Number(RegExp['$1']);}else return _0x340a69[_0x24cd9c(0x1a2)];},DataManager[_0x5c342f(0x5ca)]=function(_0x16ab73){const _0x58c6d4=_0x5c342f,_0xddaeed=$dataEnemies[_0x16ab73];if(_0xddaeed){if(_0xddaeed[_0x58c6d4(0x340)][_0x58c6d4(0xcbd)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0x58c6d4(0x488)===_0x58c6d4(0x5b3))this[_0x58c6d4(0x40a)]('abnormal');else{const _0x3e4e7f=String(RegExp['$1'])[_0x58c6d4(0x68e)](/[\r\n]+/)[_0x58c6d4(0x5e1)](''),_0x339722=this[_0x58c6d4(0xd84)](_0x3e4e7f);_0x16ab73=this['getEnemyIdWithName'](_0x339722)||_0x16ab73,_0x16ab73=DataManager['swapEnemyIDs'](_0x16ab73);}}}return _0x16ab73;},DataManager['processRandomizedData']=function(_0x4f0c49){const _0x2a0d94=_0x5c342f;let _0x5eb8fc=0x0;const _0x28caa0={};for(const _0x552d6c of _0x4f0c49){if(_0x552d6c[_0x2a0d94(0xcbd)](/(.*):[ ](\d+)/i)){const _0x31ed51=String(RegExp['$1'])[_0x2a0d94(0xa5e)](),_0x375076=Number(RegExp['$2']);_0x28caa0[_0x31ed51]=_0x375076,_0x5eb8fc+=_0x375076;}else{if(_0x552d6c['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x5873d9=String(RegExp['$1'])[_0x2a0d94(0xa5e)](),_0x942557=Number(RegExp['$2']);_0x28caa0[_0x5873d9]=_0x942557,_0x5eb8fc+=_0x942557;}else _0x552d6c!==''&&(_0x28caa0[_0x552d6c]=0x1,_0x5eb8fc++);}}if(_0x5eb8fc<=0x0)return'';let _0x151b2b=Math[_0x2a0d94(0x935)]()*_0x5eb8fc;for(const _0x4bc98e in _0x28caa0){if(_0x2a0d94(0xa0a)!==_0x2a0d94(0xa0a)){if(!_0x11a42f)return![];return _0xefb99e['friendsUnit']()===this[_0x2a0d94(0xab5)]();}else{_0x151b2b-=_0x28caa0[_0x4bc98e];if(_0x151b2b<=0x0)return _0x4bc98e;}}return'';},DataManager[_0x5c342f(0xbf1)]=function(_0x51aafe){const _0x2fa63f=_0x5c342f;if(!_0x51aafe)return![];if(!VisuMZ['BattleCore'][_0x2fa63f(0xc90)][_0x2fa63f(0xb55)][_0x2fa63f(0xab9)])return![];if(_0x51aafe[_0x2fa63f(0x340)][_0x2fa63f(0xcbd)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x51aafe[_0x2fa63f(0x340)][_0x2fa63f(0xcbd)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x8eb9d3 of _0x51aafe[_0x2fa63f(0xcb8)]){if(!_0x8eb9d3)continue;if(_0x8eb9d3[_0x2fa63f(0x441)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x5c342f(0x794)]=function(_0x1d5d9a){const _0x3715cc=_0x5c342f,_0x4dfd62=$dataTroops[_0x1d5d9a];if(!_0x4dfd62)return'';let _0x13b380='';_0x13b380+=_0x4dfd62[_0x3715cc(0x25e)];for(const _0x5c8dde of _0x4dfd62[_0x3715cc(0x64a)]){for(const _0x199aec of _0x5c8dde[_0x3715cc(0x594)]){[0x6c,0x198]['includes'](_0x199aec['code'])&&(_0x13b380+='\x0a',_0x13b380+=_0x199aec[_0x3715cc(0x5c7)][0x0]);}}return _0x13b380;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x5c342f(0xb7d)]??![],ConfigManager[_0x5c342f(0x378)]=ConfigManager[_0x5c342f(0x378)]??![],ConfigManager['visualHpGauge']=ConfigManager[_0x5c342f(0xd8e)]??!![],VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xd64)]=ConfigManager['makeData'],ConfigManager[_0x5c342f(0x1b7)]=function(){const _0x58dc8d=_0x5c342f,_0x5b06d6=VisuMZ[_0x58dc8d(0xca2)][_0x58dc8d(0xd64)]['call'](this);return _0x5b06d6[_0x58dc8d(0xb7d)]=this[_0x58dc8d(0xb7d)],_0x5b06d6[_0x58dc8d(0x378)]=this[_0x58dc8d(0x378)],_0x5b06d6[_0x58dc8d(0xd8e)]=this[_0x58dc8d(0xd8e)],_0x5b06d6;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xce9)]=ConfigManager[_0x5c342f(0x3d6)],ConfigManager[_0x5c342f(0x3d6)]=function(_0x26e3a6){const _0x1af6a7=_0x5c342f;VisuMZ['BattleCore'][_0x1af6a7(0xce9)]['call'](this,_0x26e3a6);if(_0x1af6a7(0xb7d)in _0x26e3a6){if(_0x1af6a7(0x280)===_0x1af6a7(0x280))this[_0x1af6a7(0xb7d)]=_0x26e3a6[_0x1af6a7(0xb7d)];else{if(_0x447ea0[_0x1af6a7(0xbc0)](_0x13dadd))return!![];}}else this[_0x1af6a7(0xb7d)]=![];_0x1af6a7(0x378)in _0x26e3a6?this['autoBattleUseSkills']=_0x26e3a6['autoBattleUseSkills']:this['autoBattleUseSkills']=![];if(_0x1af6a7(0xd8e)in _0x26e3a6){if(_0x1af6a7(0xd4a)!=='sifmb')this[_0x1af6a7(0xd8e)]=_0x26e3a6[_0x1af6a7(0xd8e)];else{if(this[_0x1af6a7(0x4c7)][_0x1af6a7(0x6d0)]!==_0x5f10ee)return this['_cache'][_0x1af6a7(0x6d0)];return this[_0x1af6a7(0x761)]()[_0x1af6a7(0x340)][_0x1af6a7(0xcbd)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x1af6a7(0x4c7)][_0x1af6a7(0x6d0)]=_0x2993a8(_0x36fd10['$1']),this[_0x1af6a7(0x4c7)][_0x1af6a7(0xa28)]=_0x161e20(_0x2a3b51['$2'])):this[_0x1af6a7(0x4c7)][_0x1af6a7(0x6d0)]=_0x459caf['prototype'][_0x1af6a7(0xa0b)]['call'](this),this['_cache'][_0x1af6a7(0x6d0)];}}else _0x1af6a7(0x458)===_0x1af6a7(0x458)?this[_0x1af6a7(0xd8e)]=!![]:this[_0x1af6a7(0x991)]();},ImageManager[_0x5c342f(0xb2d)]=ImageManager[_0x5c342f(0xb2d)]||0x9,ImageManager['svActorVertCells']=ImageManager['svActorVertCells']||0x6,VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x1c0)]=BattleManager[_0x5c342f(0x5bd)],BattleManager['setup']=function(_0x59088b,_0x13bf38,_0x4dd85f){const _0x3faad3=_0x5c342f;VisuMZ['BattleCore'][_0x3faad3(0x1c0)][_0x3faad3(0xded)](this,_0x59088b,_0x13bf38,_0x4dd85f),this[_0x3faad3(0x302)]={};},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x1d6)]=BattleManager[_0x5c342f(0xa41)],BattleManager[_0x5c342f(0xa41)]=function(){const _0x3183f1=_0x5c342f;VisuMZ['BattleCore'][_0x3183f1(0x1d6)][_0x3183f1(0xded)](this),this['_forcedBattlers']=[];},BattleManager[_0x5c342f(0x971)]=function(){const _0x57ff79=_0x5c342f;if(!SceneManager[_0x57ff79(0x371)]())return;const _0x48235a=SceneManager[_0x57ff79(0x201)]['_statusWindow'];if(_0x48235a)_0x48235a[_0x57ff79(0xb85)]();},BattleManager[_0x5c342f(0xa08)]=function(){const _0x55757f=_0x5c342f;if(BattleManager[_0x55757f(0x84f)]())return _0x55757f(0x64b);return _0x55757f(0x952);},BattleManager[_0x5c342f(0xe0a)]=function(_0x57b7c2){const _0x370617=_0x5c342f;return _0x57b7c2=_0x57b7c2[_0x370617(0xb34)]()[_0x370617(0xa5e)](),this[_0x370617(0xa08)]()===_0x57b7c2;},BattleManager[_0x5c342f(0xa39)]=function(){return this['isBattleSys']('DTB');},BattleManager[_0x5c342f(0x71a)]=function(){const _0x4144cc=_0x5c342f;return this[_0x4144cc(0xa39)]();},BattleManager[_0x5c342f(0xceb)]=function(){const _0x2fd324=_0x5c342f;return!this[_0x2fd324(0x71a)]();},BattleManager['isTeamBased']=function(){const _0x2b36a7=_0x5c342f;return!this['isTurnBased']()&&!this[_0x2b36a7(0xceb)]();},BattleManager['getBattlerFromKey']=function(_0x28ba30){const _0x21c97f=_0x5c342f;this['_battlerKeyCache']=this[_0x21c97f(0x302)]||{};if(this['_battlerKeyCache'][_0x28ba30]!==undefined)return this[_0x21c97f(0x302)][_0x28ba30];this[_0x21c97f(0x302)][_0x28ba30]=null;const _0xd630f5=this[_0x21c97f(0x944)](),_0xf03e6b=_0xd630f5[_0x21c97f(0x195)](_0x437d05=>_0x437d05[_0x21c97f(0x51e)]()===_0x28ba30);if(_0xf03e6b)this[_0x21c97f(0x302)][_0x28ba30]=_0xf03e6b;return this[_0x21c97f(0x302)][_0x28ba30];},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x51e)]=function(){const _0x356cfc=_0x5c342f;return _0x356cfc(0x16b)[_0x356cfc(0x266)](this['isActor']()?_0x356cfc(0x761):_0x356cfc(0x455),this[_0x356cfc(0x25e)]());},Game_Action['prototype'][_0x5c342f(0xcfa)]=function(_0x14b161){const _0x5bb1ad=_0x5c342f;if(this[_0x5bb1ad(0x9bc)]!=='')return;if(typeof _0x14b161===_0x5bb1ad(0xcaf))this[_0x5bb1ad(0x9bc)]=_0x14b161[_0x5bb1ad(0xda0)]()[_0x5bb1ad(0xa5e)]();else{if(_0x5bb1ad(0x7ab)===_0x5bb1ad(0x4a5)){const _0x551fda=_0x22c917[_0x5bb1ad(0x6e4)],_0x7ca44f=_0x3c1c06['round']((_0x12cfef[_0x5bb1ad(0xba3)]-_0x551fda)/0x2),_0x50507a=this[_0x5bb1ad(0xc8c)](),_0x6b3573=(_0x4e4ee9[_0x5bb1ad(0x880)]-_0x31b056[_0x5bb1ad(0x2f9)])/-0x2;return new _0x574d29(_0x7ca44f,_0x6b3573,_0x551fda,_0x50507a);}else this[_0x5bb1ad(0x9bc)]=_0x14b161[_0x5bb1ad(0x51e)]();}},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x9a9)]=function(){const _0x2f364a=_0x5c342f;return[this[_0x2f364a(0xe3d)]()];},Game_Action[_0x5c342f(0xca4)]['getSpecificBattlerKeyTarget']=function(){const _0x337227=_0x5c342f,_0x5ce116=this[_0x337227(0x9bc)]||'',_0x36c5a2=BattleManager[_0x337227(0x709)](_0x5ce116);if(!_0x36c5a2)return this['getBattlerKeyTargetReplacement']();if(!_0x36c5a2['isAlive']())return this[_0x337227(0xdec)]();return _0x36c5a2;},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xdec)]=function(){const _0x5bdcbb=_0x5c342f,_0x113cc3=this[_0x5bdcbb(0x9bc)];if(_0x113cc3[_0x5bdcbb(0xcbd)](/ACTOR/i))return this[_0x5bdcbb(0xab5)]()[_0x5bdcbb(0x8eb)]();else{if(_0x5bdcbb(0xb15)===_0x5bdcbb(0x2a2))_0x5125ec['BattleGridSystem'][_0x5bdcbb(0xa0c)](_0x55f923);else return this[_0x5bdcbb(0x886)]()[_0x5bdcbb(0x8eb)]();}},BattleManager['selectedBattlers']=function(){const _0x38805f=_0x5c342f;return this[_0x38805f(0x944)]()[_0x38805f(0x3cd)](_0x40d531=>_0x40d531[_0x38805f(0x89c)]());},BattleManager[_0x5c342f(0x6d1)]=function(_0x39aeca){const _0x191968=_0x5c342f;_0x39aeca===_0x191968(0x9cc)&&(this[_0x191968(0xb80)]=!![]),$gameParty['processBattleCoreJS'](_0x39aeca),$gameTroop[_0x191968(0x6d1)](_0x39aeca);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xcc9)]=BattleManager[_0x5c342f(0x3ca)],BattleManager[_0x5c342f(0x3ca)]=function(){const _0x1669e6=_0x5c342f;this[_0x1669e6(0x94b)]=![],this[_0x1669e6(0x7e0)]=ConfigManager[_0x1669e6(0xb7d)],this['_endingBattle']=![],this['processBattleCoreJS'](_0x1669e6(0x41d)),VisuMZ[_0x1669e6(0xca2)][_0x1669e6(0xcc9)][_0x1669e6(0xded)](this),this['processBattleCoreJS'](_0x1669e6(0x415));},BattleManager[_0x5c342f(0xb14)]=function(_0x17a884){const _0x286e38=_0x5c342f,_0x39f8d2=VisuMZ['BattleCore'][_0x286e38(0xc90)]['Mechanics'];_0x17a884!==_0x286e38(0x4a7)&&_0x39f8d2[_0x286e38(0x3c8)]&&VisuMZ[_0x286e38(0xca2)][_0x286e38(0x202)](_0x39f8d2[_0x286e38(0x3c8)])&&$gameTemp[_0x286e38(0x580)](_0x39f8d2[_0x286e38(0x3c8)]);const _0x343801=_0x286e38(0x6b7)[_0x286e38(0x266)](_0x17a884);_0x39f8d2[_0x343801]&&VisuMZ[_0x286e38(0xca2)]['CheckMapBattleEventValid'](_0x39f8d2[_0x343801])&&$gameTemp[_0x286e38(0x580)](_0x39f8d2[_0x343801]);},VisuMZ['BattleCore'][_0x5c342f(0xcb3)]=BattleManager['abort'],BattleManager[_0x5c342f(0xa37)]=function(){const _0x4942e8=_0x5c342f;VisuMZ[_0x4942e8(0xca2)][_0x4942e8(0xcb3)][_0x4942e8(0xded)](this),BattleManager[_0x4942e8(0x9f4)]();},VisuMZ['BattleCore'][_0x5c342f(0x9c8)]=BattleManager['checkBattleEnd'],BattleManager[_0x5c342f(0x211)]=function(){const _0x155cbc=_0x5c342f;if(this['_phase']===_0x155cbc(0x523)){if($gameTemp[_0x155cbc(0x7df)]())return![];}return VisuMZ[_0x155cbc(0xca2)][_0x155cbc(0x9c8)][_0x155cbc(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x43a)]=BattleManager['processVictory'],BattleManager[_0x5c342f(0xb23)]=function(){const _0x38e58a=_0x5c342f;this[_0x38e58a(0xb80)]=!![],this[_0x38e58a(0x6d1)]('BattleVictoryJS'),VisuMZ[_0x38e58a(0xca2)][_0x38e58a(0x43a)][_0x38e58a(0xded)](this),this[_0x38e58a(0xb14)](_0x38e58a(0x575));},VisuMZ['BattleCore'][_0x5c342f(0xabb)]=BattleManager[_0x5c342f(0xb2c)],BattleManager[_0x5c342f(0xb2c)]=function(){const _0x20cbe3=_0x5c342f;this['_endingBattle']=!![],VisuMZ[_0x20cbe3(0xca2)]['BattleManager_processAbort'][_0x20cbe3(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xd24)]=BattleManager[_0x5c342f(0x82f)],BattleManager[_0x5c342f(0x82f)]=function(){const _0x2695f1=_0x5c342f;this[_0x2695f1(0xb80)]=!![],this[_0x2695f1(0x6d1)](_0x2695f1(0x21c)),VisuMZ['BattleCore'][_0x2695f1(0xd24)][_0x2695f1(0xded)](this),this[_0x2695f1(0xb14)](_0x2695f1(0x320));},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x7f9)]=BattleManager[_0x5c342f(0xdfa)],BattleManager[_0x5c342f(0xdfa)]=function(_0x4a9e17){const _0x500af6=_0x5c342f;this['_endBattle']=!![],this[_0x500af6(0x7e0)]=![],this[_0x500af6(0x6d1)](_0x500af6(0xc0a)),VisuMZ[_0x500af6(0xca2)][_0x500af6(0x7f9)][_0x500af6(0xded)](this,_0x4a9e17),this[_0x500af6(0x6d1)](_0x500af6(0xde8));},VisuMZ['BattleCore'][_0x5c342f(0xa98)]=BattleManager['startTurn'],BattleManager[_0x5c342f(0x883)]=function(){const _0x22a21d=_0x5c342f;if(this[_0x22a21d(0x71a)]())this[_0x22a21d(0x6d1)](_0x22a21d(0xb9e));VisuMZ[_0x22a21d(0xca2)][_0x22a21d(0xa98)]['call'](this);if(this[_0x22a21d(0x71a)]())this['processBattleCoreJS'](_0x22a21d(0xc6d));},BattleManager[_0x5c342f(0x28a)]=function(){const _0x3efa3f=_0x5c342f,_0x41d323=this[_0x3efa3f(0x52b)],_0x34935a=_0x41d323[_0x3efa3f(0x6cf)]();_0x34935a?(_0x34935a[_0x3efa3f(0xc68)](),_0x34935a[_0x3efa3f(0x988)]()?(this[_0x3efa3f(0x9e2)](),_0x41d323[_0x3efa3f(0x396)]()):(_0x41d323[_0x3efa3f(0x396)](),this['endAction']())):(this[_0x3efa3f(0x4d5)](),this[_0x3efa3f(0x52b)]=null);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x61c)]=BattleManager[_0x5c342f(0x9e2)],BattleManager[_0x5c342f(0x9e2)]=function(){const _0x2b5c33=_0x5c342f,_0x5d4942=this[_0x2b5c33(0x52b)]['currentAction'](),_0xaaceaa=this[_0x2b5c33(0x52b)];_0x5d4942&&_0x5d4942[_0x2b5c33(0xdda)]()===_0xaaceaa&&_0x5d4942[_0x2b5c33(0xcf3)](_0x2b5c33(0x305)),VisuMZ['BattleCore'][_0x2b5c33(0x61c)][_0x2b5c33(0xded)](this),_0x5d4942&&_0x5d4942['subject']()===_0xaaceaa&&_0x5d4942[_0x2b5c33(0xcf3)](_0x2b5c33(0xb3d));},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x8d9)]=BattleManager[_0x5c342f(0x4d5)],BattleManager[_0x5c342f(0x4d5)]=function(){const _0x270299=_0x5c342f,_0x4a01d5=this['_action'],_0xac046=this[_0x270299(0x52b)];_0x4a01d5&&_0x4a01d5!==this[_0x270299(0x8bd)]&&_0x4a01d5[_0x270299(0xdda)]()===_0xac046&&_0x4a01d5[_0x270299(0xcf3)](_0x270299(0xae9));if(this[_0x270299(0x52b)]){if(_0x270299(0x391)===_0x270299(0x1a5)){if(!_0x5cdb4a[_0x270299(0x201)])return;if(!_0x22c4ab['_scene'][_0x270299(0x3ed)])return;if(!_0x2b09fd['VisuMZ_0_CoreEngine'])return;_0x30d4d2[_0x270299(0x2ee)](_0x4f1a63,_0x58dab6);const _0x6206f5=_0xdab92c[_0x270299(0x3d1)](),_0x1366f2=_0x47453f[_0x270299(0x5c1)](_0x21ebbd[_0x270299(0xdaf)]),_0x541f84=_0x5f2506[_0x270299(0x5c1)](_0x41d39c[_0x270299(0x44b)]);_0x1459da[_0x270299(0xaaa)](_0x1366f2,_0x541f84,_0x5478d1[_0x270299(0x73c)],_0x2e4f5c[_0x270299(0x6b9)],_0x252365[_0x270299(0x351)]),_0x3b6f62[_0x270299(0xb79)]&&_0x6206f5&&(_0x4cb217[_0x270299(0x201)][_0x270299(0x3ed)][_0x270299(0xaef)](),_0x6206f5['setWaitMode'](_0x270299(0xbfb)));}else VisuMZ[_0x270299(0xca2)][_0x270299(0x8d9)][_0x270299(0xded)](this);}else this[_0x270299(0x79e)]=_0x270299(0x523);_0x4a01d5&&_0x4a01d5!==this['_lastAction']&&_0x4a01d5[_0x270299(0xdda)]()===_0xac046&&(_0x270299(0x869)===_0x270299(0x869)?_0x4a01d5[_0x270299(0xcf3)](_0x270299(0xe26)):this[_0x270299(0xd79)]()),this[_0x270299(0xdc7)](this[_0x270299(0x944)]()),this[_0x270299(0x8bd)]=this[_0x270299(0x492)];},BattleManager[_0x5c342f(0xdc7)]=function(_0x1a03d4){const _0x2633d0=_0x5c342f;for(const _0xfdca66 of _0x1a03d4){if(!_0xfdca66)continue;if(!_0xfdca66[_0x2633d0(0x9d3)]())continue;_0xfdca66[_0x2633d0(0x9d3)]()[_0x2633d0(0xc59)]();}},BattleManager[_0x5c342f(0xa3a)]=function(){!this['_logWindow']['isBusy']()&&this['endAction']();},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0xd86)]=function(){const _0x43315d=_0x5c342f;this[_0x43315d(0x431)]();if(Imported[_0x43315d(0x3e0)]){const _0xb16cfd=VisuMZ[_0x43315d(0xbcc)][_0x43315d(0xc90)][_0x43315d(0x3ae)];if(_0xb16cfd&&_0xb16cfd[_0x43315d(0xda5)]===![]){if(_0x43315d(0x460)===_0x43315d(0x6d5)){if(this['_jumpDuration']<=0x0)return;const _0xd37aee=this[_0x43315d(0x71d)]-this['_jumpDuration'],_0xba8d69=this[_0x43315d(0x71d)]/0x2,_0x44abab=this['_jumpMaxHeight'],_0x506d42=-_0x44abab/_0x455ab1[_0x43315d(0x39e)](_0xba8d69,0x2);this[_0x43315d(0x318)]=_0x506d42*_0x45fa19[_0x43315d(0x39e)](_0xd37aee-_0xba8d69,0x2)+_0x44abab,this[_0x43315d(0xddd)]--;if(this[_0x43315d(0xddd)]<=0x0)return this[_0x43315d(0x736)]();}else this['removeStatesAuto'](0x1);}}else this[_0x43315d(0xcde)](0x1);this[_0x43315d(0x991)]();},BattleManager[_0x5c342f(0x20a)]=function(){const _0x57c3ad=_0x5c342f;this['_escapeRatio']=VisuMZ[_0x57c3ad(0xca2)][_0x57c3ad(0xc90)][_0x57c3ad(0x535)][_0x57c3ad(0x954)]['call'](this);},VisuMZ[_0x5c342f(0xca2)]['BattleManager_onEscapeSuccess']=BattleManager[_0x5c342f(0x530)],BattleManager['onEscapeSuccess']=function(){const _0x510b69=_0x5c342f;this['processBattleCoreJS']('EscapeSuccessJS'),BattleManager[_0x510b69(0x3ed)][_0x510b69(0x24d)](),VisuMZ[_0x510b69(0xca2)][_0x510b69(0x5ba)]['call'](this),this[_0x510b69(0xb14)](_0x510b69(0x2db));},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x1de)]=BattleManager[_0x5c342f(0x897)],BattleManager[_0x5c342f(0x897)]=function(){const _0x212f96=_0x5c342f;this[_0x212f96(0x6d1)]('EscapeFailureJS');const _0x658b1e=this[_0x212f96(0x2f8)];VisuMZ['BattleCore'][_0x212f96(0x1de)][_0x212f96(0xded)](this),this['_escapeRatio']=_0x658b1e+VisuMZ[_0x212f96(0xca2)][_0x212f96(0xc90)][_0x212f96(0x535)][_0x212f96(0x730)][_0x212f96(0xded)](this),this[_0x212f96(0x9ce)]=![],this[_0x212f96(0xb14)](_0x212f96(0x4a7));},BattleManager['displayStartMessages']=function(){const _0x20f65b=_0x5c342f;let _0x1911e2=![];if(this['isDisplayEmergedEnemies']())for(const _0x6f9a04 of $gameTroop[_0x20f65b(0xa94)]()){this['_logWindow']['push'](_0x20f65b(0x3ff),TextManager[_0x20f65b(0x9cf)][_0x20f65b(0x266)](_0x6f9a04)),this[_0x20f65b(0x56f)][_0x20f65b(0x843)](_0x20f65b(0x630)),_0x1911e2=!![];}if(this[_0x20f65b(0xa51)])'HXdgL'!==_0x20f65b(0x53d)?(this[_0x20f65b(0x56f)][_0x20f65b(0x843)](_0x20f65b(0x3ff),TextManager[_0x20f65b(0x964)]['format']($gameParty['name']())),this[_0x20f65b(0x56f)][_0x20f65b(0x843)](_0x20f65b(0x630))):this[_0x20f65b(0x678)]();else this[_0x20f65b(0x853)]&&(this[_0x20f65b(0x56f)]['push']('addText',TextManager[_0x20f65b(0xa8d)][_0x20f65b(0x266)]($gameParty[_0x20f65b(0x25e)]())),this[_0x20f65b(0x56f)]['push'](_0x20f65b(0x630)));_0x1911e2&&(this[_0x20f65b(0x56f)][_0x20f65b(0x843)](_0x20f65b(0x630)),this['_logWindow'][_0x20f65b(0x843)](_0x20f65b(0xa52))),this[_0x20f65b(0x84f)]()&&this[_0x20f65b(0x909)]()&&(this[_0x20f65b(0x272)]=![]);},BattleManager[_0x5c342f(0x40e)]=function(){const _0x3d332d=_0x5c342f;if(BattleManager['_autoBattle'])return![];return VisuMZ['BattleCore'][_0x3d332d(0xc90)][_0x3d332d(0x4f1)][_0x3d332d(0xdd0)];},VisuMZ['BattleCore'][_0x5c342f(0x91d)]=BattleManager['startInput'],BattleManager[_0x5c342f(0x7c2)]=function(){const _0x1de828=_0x5c342f;VisuMZ[_0x1de828(0xca2)]['BattleManager_startInput']['call'](this),this[_0x1de828(0xa39)]()&&this['isSkipPartyCommandWindow']()&&!this['_surprise']&&$gameParty[_0x1de828(0xc24)]()&&(_0x1de828(0x255)!==_0x1de828(0x255)?this[_0x1de828(0xa6c)]():this[_0x1de828(0xb3e)]());},BattleManager['isSkipPartyCommandWindow']=function(){const _0x7f8e38=_0x5c342f;return VisuMZ[_0x7f8e38(0xca2)]['Settings'][_0x7f8e38(0x7e4)][_0x7f8e38(0xa4f)];},BattleManager[_0x5c342f(0x292)]=function(){this['isPartyTpbInputtable']()&&this['selectNextCommand']();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x8d4)]=Scene_Battle['prototype']['startActorCommandSelection'],Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x65b)]=function(){const _0x363263=_0x5c342f;VisuMZ['BattleCore'][_0x363263(0x8d4)][_0x363263(0xded)](this),BattleManager[_0x363263(0x84f)]()&&BattleManager[_0x363263(0x272)]&&(BattleManager[_0x363263(0x272)]=![],this[_0x363263(0x3c4)]());},BattleManager[_0x5c342f(0x7fe)]=function(_0x24227b,_0x449f82,_0x4b34a6){const _0x20206a=_0x5c342f;if(!_0x4b34a6)return;if(!_0x24227b)return;if(!_0x449f82)return;const _0x3798e4=this[_0x20206a(0x492)];this[_0x20206a(0x492)]=new Game_Action(_0x24227b);if(DataManager[_0x20206a(0x687)](_0x4b34a6))this[_0x20206a(0x492)][_0x20206a(0x2ba)](_0x4b34a6['id']);if(DataManager['isSkill'](_0x4b34a6))this['_action'][_0x20206a(0x5c6)](_0x4b34a6['id']);if(this[_0x20206a(0x492)][_0x20206a(0xa87)]())BattleManager[_0x20206a(0x798)](_0x24227b,_0x449f82);this[_0x20206a(0x492)]=_0x3798e4;},BattleManager[_0x5c342f(0x2ac)]=function(_0x445be8,_0x4a4077){const _0x74a53a=_0x5c342f;this[_0x74a53a(0x492)][_0x74a53a(0x60a)]=_0x4a4077,this['_logWindow'][_0x74a53a(0xb4d)](_0x4a4077),this[_0x74a53a(0x56f)]['displayReflectionPlayBack'](_0x445be8,this['_action']),this[_0x74a53a(0x492)][_0x74a53a(0x3fd)](_0x445be8),this[_0x74a53a(0x56f)][_0x74a53a(0xa34)](_0x445be8,_0x445be8);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xab7)]=BattleManager[_0x5c342f(0x30b)],BattleManager['makeActionOrders']=function(){const _0x470e65=_0x5c342f;VisuMZ[_0x470e65(0xca2)]['BattleManager_makeActionOrders'][_0x470e65(0xded)](this),this[_0x470e65(0x40f)]=this[_0x470e65(0x40f)][_0x470e65(0x3cd)](_0x2bf2b8=>_0x2bf2b8&&_0x2bf2b8[_0x470e65(0xba9)]());},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x308)]=BattleManager[_0x5c342f(0x58c)],BattleManager[_0x5c342f(0x58c)]=function(_0x24b671){const _0x566c6a=_0x5c342f;if(this[_0x566c6a(0x79e)]===_0x566c6a(0x558))this['updateCustomActionSequence']();else this[_0x566c6a(0x79e)]===_0x566c6a(0xd57)?this[_0x566c6a(0x94f)]():VisuMZ[_0x566c6a(0xca2)][_0x566c6a(0x308)][_0x566c6a(0xded)](this,_0x24b671);},BattleManager[_0x5c342f(0x72b)]=function(){const _0x46f8bd=_0x5c342f;this['_allTargets']=this[_0x46f8bd(0x183)][_0x46f8bd(0x645)](0x0),this[_0x46f8bd(0x788)]=0x0,this[_0x46f8bd(0x6bc)]=this[_0x46f8bd(0xad0)][0x0]||null,this[_0x46f8bd(0x79e)]=_0x46f8bd(0x558);},BattleManager[_0x5c342f(0x68f)]=function(){const _0x1cebcb=_0x5c342f;!this[_0x1cebcb(0x4e5)]()&&!this[_0x1cebcb(0x56f)][_0x1cebcb(0x203)]()&&(this[_0x1cebcb(0x79e)]=_0x1cebcb(0xcc0));},BattleManager[_0x5c342f(0xd57)]=function(_0x324744){const _0x418d6a=_0x5c342f;this[_0x418d6a(0x40f)][_0x418d6a(0x5e1)](_0x324744);if(_0x324744===this['_subject'])return;const _0x5b84c3=JsonEx[_0x418d6a(0x388)](_0x324744['currentAction']());this[_0x418d6a(0xa3e)][_0x418d6a(0x843)]([_0x324744,_0x5b84c3]);},BattleManager['processForcedAction']=function(){},BattleManager[_0x5c342f(0xb5f)]=function(){const _0x5f4af1=_0x5c342f;if(this['isTpb']())this['_phase']=_0x5f4af1(0x523);else this['_forcedBattlers'][_0x5f4af1(0xc5c)]>0x0?this[_0x5f4af1(0x79e)]='turn':this[_0x5f4af1(0x7c2)]();},BattleManager['getNextSubject']=function(){const _0x5718b9=_0x5c342f,_0x42aed0=this[_0x5718b9(0x52b)];_0x42aed0&&this[_0x5718b9(0x84f)]()&&(_0x5718b9(0x934)==='yOOhG'?this['startWeaponAnimation'](_0xf21705[_0x5718b9(0xb4f)]):_0x42aed0[_0x5718b9(0x7fa)](_0x5718b9(0xba5)));for(;;){const _0x14d68a=this[_0x5718b9(0x1fb)]();if(!_0x14d68a){if('cKcfr'===_0x5718b9(0x618))return null;else _0xc57dd0+=_0x506730;}if(_0x14d68a[_0x5718b9(0x7ba)]()&&_0x14d68a[_0x5718b9(0x920)]())return _0x14d68a;}},BattleManager[_0x5c342f(0x1fb)]=function(){const _0xd8ae2=_0x5c342f;if(this['_forcedBattlers'][_0xd8ae2(0xc5c)]>0x0){if(_0xd8ae2(0x698)===_0xd8ae2(0x5cd))return _0x46bf9a['spriteId']-_0x43f275[_0xd8ae2(0x738)];else{const _0x49fd00=this[_0xd8ae2(0xa3e)][_0xd8ae2(0x728)](),_0x7eed28=_0x49fd00[0x0];return _0x7eed28[_0xd8ae2(0xe1d)]=_0x7eed28[_0xd8ae2(0xe1d)]||[],_0x7eed28[_0xd8ae2(0xe1d)][0x0]=_0x49fd00[0x1],_0x7eed28;}}else return _0xd8ae2(0xa21)!==_0xd8ae2(0xa21)?_0x1c9fa3[_0xd8ae2(0xca2)][_0xd8ae2(0xc90)][_0xd8ae2(0xe29)]['SmoothImage']:this[_0xd8ae2(0x40f)][_0xd8ae2(0x728)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x205)]=Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0xd57)],Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0xd57)]=function(_0x3b92c5,_0x38283d){const _0x42e909=_0x5c342f;VisuMZ[_0x42e909(0xca2)]['Game_Battler_forceAction'][_0x42e909(0xded)](this,_0x3b92c5,_0x38283d),this[_0x42e909(0xe1d)][this[_0x42e909(0xe1d)]['length']-0x1][_0x42e909(0x490)]=!![];},Game_Interpreter['prototype'][_0x5c342f(0x229)]=function(_0x3ab6e8){const _0x1b8c7d=_0x5c342f;return this[_0x1b8c7d(0x538)](_0x3ab6e8[0x0],_0x3ab6e8[0x1],_0x977706=>{const _0xe922da=_0x1b8c7d;!_0x977706[_0xe922da(0x1ad)]()&&(_0x977706[_0xe922da(0xd57)](_0x3ab6e8[0x2],_0x3ab6e8[0x3]),BattleManager[_0xe922da(0xd57)](_0x977706));}),!![];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xe19)]=Game_Battler['prototype'][_0x5c342f(0x198)],Game_Battler[_0x5c342f(0xca4)]['makeSpeed']=function(){const _0x3f4e69=_0x5c342f;VisuMZ[_0x3f4e69(0xca2)][_0x3f4e69(0xe19)][_0x3f4e69(0xded)](this),this[_0x3f4e69(0xe1d)][_0x3f4e69(0xc5c)]<=0x0&&(this['_speed']=Number[_0x3f4e69(0xb9d)]);},BattleManager['shouldHideBattleEndPopups']=function(){const _0x24a8bd=_0x5c342f;if(VisuMZ[_0x24a8bd(0xca2)][_0x24a8bd(0xc90)]['Damage']['EndBattlePopups']??!![])return![];return SceneManager[_0x24a8bd(0x371)]()&&this[_0x24a8bd(0xb80)];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xdfb)]=BattleManager[_0x5c342f(0xb3e)],BattleManager[_0x5c342f(0xb3e)]=function(){const _0x18f98e=_0x5c342f;this[_0x18f98e(0x84f)]()?_0x18f98e(0xdc5)!==_0x18f98e(0xb74)?this[_0x18f98e(0x4bb)]():this[_0x18f98e(0x66f)]():VisuMZ[_0x18f98e(0xca2)][_0x18f98e(0xdfb)][_0x18f98e(0xded)](this);},BattleManager[_0x5c342f(0x4bb)]=function(){const _0x3e7c91=_0x5c342f;if(this[_0x3e7c91(0x4f5)]){if(_0x3e7c91(0x1f4)===_0x3e7c91(0x9ed))return _0x1221d2['BattleCore'][_0x3e7c91(0x43c)]['call'](this);else{if(this[_0x3e7c91(0x4f5)][_0x3e7c91(0xb3e)]()){if(_0x3e7c91(0x984)===_0x3e7c91(0x984))return;else return _0x53a4d0[_0x3e7c91(0xca2)][_0x3e7c91(0xc99)][_0x3e7c91(0xded)](this);}this[_0x3e7c91(0x76e)](),this[_0x3e7c91(0x496)](),!this[_0x3e7c91(0x52b)]&&!this['_currentActor']&&SceneManager['_scene'][_0x3e7c91(0x33b)]();}}else!this[_0x3e7c91(0x52b)]&&(_0x3e7c91(0x515)==='gciWT'?(this['push'](_0x3e7c91(0x236)),this['displayChangedStates'](_0x295c6f),this[_0x3e7c91(0xd75)](_0x50e164),this[_0x3e7c91(0x843)](_0x3e7c91(0x576))):this['selectNextActor']());},BattleManager[_0x5c342f(0x496)]=function(){const _0x596ab5=_0x5c342f;if(!this['isPartyTpbInputtable']()||this[_0x596ab5(0x4eb)]()){if(this[_0x596ab5(0x1dc)]){if(!$gameParty[_0x596ab5(0xd90)]()[_0x596ab5(0xaec)](this[_0x596ab5(0x1dc)])){if(_0x596ab5(0x410)==='rqYYv')this[_0x596ab5(0x1dc)]=null;else{if(!_0x206fee[_0x596ab5(0x371)]())return;if(!_0xe3659e['VisuMZ_2_BattleSystemPTB'])return;if(!_0x3d0623['isPTB']())return;_0x49aaf6['ConvertParams'](_0x2d55aa,_0x238502);const _0x23d5e7=_0x41c458[_0x596ab5(0x52b)]['friendsUnit'](),_0x4360db=_0x2eef03[_0x596ab5(0xb66)],_0x2d9b12=_0x392111[_0x596ab5(0xa15)]||_0x596ab5(0x199),_0x23a469=_0x5f4563[_0x596ab5(0x8b9)]||_0x596ab5(0x199),_0x360b57=_0x10f152[_0x596ab5(0x168)]||0x0,_0x506f42=_0x12fd13['alterPriority']||0x0;(_0x23d5e7[_0x596ab5(0x721)]()||_0x4360db)&&(_0x4360db&&(_0x23d5e7[_0x596ab5(0xcc6)]=_0x23d5e7['_ptbActionCost']||{},_0x23d5e7[_0x596ab5(0xcc6)]['priority']=0x0),_0x23d5e7[_0x596ab5(0xafb)](_0x2d9b12,_0x23a469,_0x360b57,_0x506f42));}}}if(!this[_0x596ab5(0x1dc)]){if(_0x596ab5(0x83f)==='fODAe')this[_0x596ab5(0xd4d)](),this[_0x596ab5(0x4f5)]=null,this['_inputting']=![];else{if(this[_0x596ab5(0x426)]===_0x1f83e1)return;this[_0x596ab5(0x426)]=_0x226d5a,this[_0x596ab5(0xa07)]=_0x3c9008,this['_opacityWholeDuration']=_0x105642,this[_0x596ab5(0x276)]=_0x311c20||'Linear';if(_0x39c806<=0x0)this[_0x596ab5(0xc0c)]=_0x382231;}}else this[_0x596ab5(0x95b)]();}},BattleManager[_0x5c342f(0x95b)]=function(){const _0x1e7d02=_0x5c342f;if(!$gameParty[_0x1e7d02(0xd90)]()['includes'](this[_0x1e7d02(0x1dc)])){if(_0x1e7d02(0x7f2)!==_0x1e7d02(0x7f2))return![];else this[_0x1e7d02(0x1dc)]=null;}if(this['_tpbSceneChangeCacheActor']){if('OwRuS'!==_0x1e7d02(0xb39)){if(this['turnCount']()<=0x0)return;}else this[_0x1e7d02(0x4f5)]=this[_0x1e7d02(0x1dc)],this[_0x1e7d02(0x4f5)][_0x1e7d02(0x80e)]=_0x1e7d02(0xa7a),this[_0x1e7d02(0x9ce)]=!![],this[_0x1e7d02(0x1dc)]=null;}else'EJWdB'!==_0x1e7d02(0x8e4)?this[_0x1e7d02(0xb29)]=_0x1e7d02(0x4e4):(this['cancelActorInput'](),this[_0x1e7d02(0x4f5)]=null,this[_0x1e7d02(0x9ce)]=![]);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x54a)]=BattleManager[_0x5c342f(0x916)],BattleManager['isTpbMainPhase']=function(){const _0x588a30=_0x5c342f;if(this[_0x588a30(0x79e)]===_0x588a30(0x558))return this[_0x588a30(0x4fc)]();else{if('VKPEs'!=='VKPEs'){let _0xbbc6c4=_0xbc2bab['value'](_0x489192[_0x588a30(0x3d7)]);_0x13a795[_0x588a30(0x81a)]>0x0&&(_0xbbc6c4+=_0x121bdc[_0x588a30(0xd81)](_0xde74cc[_0x588a30(0x81a)])),_0x5f0e8e[_0x588a30(0x5b2)](_0x3327a5[_0x588a30(0x3d7)],_0xbbc6c4);}else return VisuMZ[_0x588a30(0xca2)][_0x588a30(0x54a)][_0x588a30(0xded)](this);}},BattleManager['battleCoreTpbMainPhase']=function(){const _0x365714=_0x5c342f;return this[_0x365714(0x7a6)]();},VisuMZ['BattleCore'][_0x5c342f(0x2a1)]=BattleManager['cancelActorInput'],BattleManager[_0x5c342f(0xd4d)]=function(){const _0x4cd0a7=_0x5c342f;if(this[_0x4cd0a7(0x84f)]()&&this['_phase']===_0x4cd0a7(0x5a1)){if(_0x4cd0a7(0x4d4)!=='MDlPS')this[_0x4cd0a7(0x4f5)]=null;else{const _0x2338c6=this[_0x4cd0a7(0xe3b)]();if(_0x2338c6[_0x4cd0a7(0xc5c)]>0x0){const _0x48819f=_0x2338c6[_0x4536d2];if(_0x48819f)_0x52d09b=this[_0x4cd0a7(0xb42)]()['indexOf'](_0x48819f);}}}VisuMZ[_0x4cd0a7(0xca2)][_0x4cd0a7(0x2a1)]['call'](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x85f)]=BattleManager[_0x5c342f(0xc3f)],BattleManager[_0x5c342f(0xc3f)]=function(){const _0x2d4c2c=_0x5c342f,_0x53b769=this[_0x2d4c2c(0x4f5)];if(_0x53b769&&!_0x53b769[_0x2d4c2c(0xc3f)]()){const _0x3e359c=_0x53b769[_0x2d4c2c(0x9ab)];_0x53b769[_0x2d4c2c(0xe1d)][_0x3e359c]=new Game_Action(_0x53b769);}return VisuMZ[_0x2d4c2c(0xca2)][_0x2d4c2c(0x85f)][_0x2d4c2c(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x6e1)]=BattleManager[_0x5c342f(0x2c8)],BattleManager[_0x5c342f(0x2c8)]=function(_0x566a08){const _0x1975c4=_0x5c342f;if(this['_action'][_0x1975c4(0x719)]())return![];return VisuMZ[_0x1975c4(0xca2)][_0x1975c4(0x6e1)]['call'](this,_0x566a08);},SceneManager[_0x5c342f(0x371)]=function(){const _0x531d71=_0x5c342f;return this[_0x531d71(0x201)]&&this['_scene'][_0x531d71(0x43e)]===Scene_Battle;},SceneManager[_0x5c342f(0x9be)]=function(){const _0x4e3d79=_0x5c342f;return Spriteset_Battle[_0x4e3d79(0xca4)]['isFlipped']();},SceneManager[_0x5c342f(0x404)]=function(){const _0x2335bc=_0x5c342f;if(SceneManager[_0x2335bc(0x929)](Scene_Options))return!![];return![];},SceneManager[_0x5c342f(0xd97)]=function(){const _0x3213e5=_0x5c342f;if(SceneManager[_0x3213e5(0x9e7)](Scene_Options))return!![];return![];},SceneManager[_0x5c342f(0xd4f)]=function(_0x5cfb50){const _0x549f3f=_0x5c342f;if(!SceneManager[_0x549f3f(0x371)]())return!![];const _0x382918=[_0x549f3f(0x941),'Scene_Party'];return _0x382918[_0x549f3f(0xaec)](_0x5cfb50[_0x549f3f(0x25e)]);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x821)]=SceneManager[_0x5c342f(0x843)],SceneManager[_0x5c342f(0x843)]=function(_0x4a9f2e){const _0x9cb2c0=_0x5c342f;if(!SceneManager[_0x9cb2c0(0xd4f)](_0x4a9f2e))return this[_0x9cb2c0(0xac3)](_0x4a9f2e);VisuMZ[_0x9cb2c0(0xca2)]['SceneManager_push'][_0x9cb2c0(0xded)](this,_0x4a9f2e);},SceneManager[_0x5c342f(0xac3)]=function(_0x2e2b54){const _0x236917=_0x5c342f;if(!$gameTemp['isPlaytest']())return;if(this[_0x236917(0x3ef)])return;this[_0x236917(0x3ef)]=!![];let _0x313f6b='';_0x313f6b+=_0x236917(0x4f2),_0x313f6b+=_0x236917(0x809)[_0x236917(0x266)](_0x2e2b54['name']),alert(_0x313f6b);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x261)]=Game_Temp[_0x5c342f(0xca4)]['initialize'],Game_Temp['prototype'][_0x5c342f(0xd5a)]=function(){VisuMZ['BattleCore']['Game_Temp_initialize']['call'](this),this['_battleBalloonQueue']=[];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x86e)]=Game_Temp[_0x5c342f(0xca4)][_0x5c342f(0x299)],Game_Temp[_0x5c342f(0xca4)][_0x5c342f(0x299)]=function(_0x194d55,_0x6cf953,_0x596cf){const _0x18c51b=_0x5c342f;_0x194d55=_0x194d55[_0x18c51b(0x3cd)]((_0x544198,_0x4edab4,_0xcd9241)=>_0xcd9241[_0x18c51b(0x570)](_0x544198)===_0x4edab4),SceneManager[_0x18c51b(0x371)]()&&SceneManager['isBattleFlipped']()&&(_0x596cf=!_0x596cf),VisuMZ[_0x18c51b(0xca2)][_0x18c51b(0x86e)][_0x18c51b(0xded)](this,_0x194d55,_0x6cf953,_0x596cf),SceneManager[_0x18c51b(0x371)]()&&(_0x18c51b(0xdf2)===_0x18c51b(0xdf2)?BattleManager[_0x18c51b(0x3ed)][_0x18c51b(0x86b)]():(this['_growX']=this[_0x18c51b(0x95d)](this[_0x18c51b(0x24b)],this[_0x18c51b(0xba4)],_0x4e90b2,_0x25dec0,_0x5aa072),this[_0x18c51b(0x625)]=this[_0x18c51b(0x95d)](this[_0x18c51b(0x625)],this[_0x18c51b(0xdfd)],_0x49afb2,_0x488555,_0x60ed33)));},Game_Temp[_0x5c342f(0xca4)][_0x5c342f(0xd6f)]=function(_0xc0c2a4){this['_lastPluginCommandInterpreter']=_0xc0c2a4;},Game_Temp['prototype'][_0x5c342f(0x3d1)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp['prototype'][_0x5c342f(0x63c)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x5c342f(0xca4)]['applyForcedGameTroopSettingsBattleCore']=function(_0x2c5b27){const _0x1fdf81=_0x5c342f;$gameMap&&$dataMap&&$dataMap[_0x1fdf81(0x340)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x1fdf81(0x340)]);const _0x152fac=$dataTroops[_0x2c5b27];if(_0x152fac){let _0x341922=DataManager[_0x1fdf81(0x794)](_0x152fac['id']);this[_0x1fdf81(0xa73)](_0x341922);}},Game_Temp[_0x5c342f(0xca4)]['parseForcedGameTroopSettingsBattleCore']=function(_0x35edcd){const _0x58530c=_0x5c342f;if(!_0x35edcd)return;if(_0x35edcd['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x11e3c7=String(RegExp['$1']);if(_0x11e3c7['match'](/DEFAULT/i))this[_0x58530c(0xb29)]=_0x58530c(0x4e4);else{if(_0x11e3c7[_0x58530c(0xcbd)](/LIST/i))_0x58530c(0x43f)==='OuQQq'?this[_0x58530c(0xb29)]=_0x58530c(0x594):this[_0x58530c(0xc0c)]=0x0;else{if(_0x11e3c7['match'](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0x11e3c7[_0x58530c(0xcbd)](/PORTRAIT/i))this[_0x58530c(0xb29)]=_0x58530c(0x483);else{if(_0x11e3c7['match'](/BORDER/i))_0x58530c(0xdb8)===_0x58530c(0xcec)?(_0x5b25bf['removeImmortal'](),_0x50a3f5[_0x58530c(0x827)](_0x1742cd['deathStateId']())):this[_0x58530c(0xb29)]=_0x58530c(0x966);else{if(_0x11e3c7[_0x58530c(0xcbd)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported['VisuMZ_3_SideviewBattleUI']?_0x58530c(0x327)==='EQtwt'?this[_0x58530c(0x40a)](_0x58530c(0xa6f)):this[_0x58530c(0xb29)]='sideview_ui':this['_forcedBattleLayout']=_0x58530c(0x4e4);else{if(_0x11e3c7['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)){if(Imported['VisuMZ_3_FrontviewBattleUI']){if(_0x58530c(0x267)!==_0x58530c(0x267)){const _0x28ea92=_0x504198[_0x58530c(0xa87)]();this[_0x58530c(0x843)]('showAnimation',_0x5282ed,[_0x40acb4],_0x28ea92[_0x58530c(0xdaa)]);}else this['_forcedBattleLayout']='frontview_ui';}else this[_0x58530c(0xb29)]=_0x58530c(0x4e4);}}}}}}}}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x888)]=Game_Temp[_0x5c342f(0xca4)]['requestBalloon'],Game_Temp[_0x5c342f(0xca4)][_0x5c342f(0x1ea)]=function(_0x5abc1e,_0x1df586){const _0x3f61cc=_0x5c342f;SceneManager['isSceneBattle']()?_0x3f61cc(0x297)!==_0x3f61cc(0x297)?(!_0x18ca5d[_0x3f61cc(0xd90)]()['includes'](this['_tpbSceneChangeCacheActor'])&&(this[_0x3f61cc(0x1dc)]=null),this[_0x3f61cc(0x1dc)]?(this[_0x3f61cc(0x4f5)]=this['_tpbSceneChangeCacheActor'],this['_currentActor'][_0x3f61cc(0x80e)]=_0x3f61cc(0xa7a),this['_inputting']=!![],this['_tpbSceneChangeCacheActor']=null):(this[_0x3f61cc(0xd4d)](),this['_currentActor']=null,this[_0x3f61cc(0x9ce)]=![])):this[_0x3f61cc(0xada)](_0x5abc1e,_0x1df586):'BPpfc'===_0x3f61cc(0xa54)?VisuMZ['BattleCore']['Game_Temp_requestBalloon'][_0x3f61cc(0xded)](this,_0x5abc1e,_0x1df586):this['_active']=!![];},Game_Temp[_0x5c342f(0xca4)][_0x5c342f(0xada)]=function(_0x2d18f3,_0xd4332e){const _0xa59ae4=_0x5c342f,_0xf48576={'target':_0x2d18f3,'balloonId':_0xd4332e};this[_0xa59ae4(0x321)]=this[_0xa59ae4(0x321)]||[],this[_0xa59ae4(0x321)][_0xa59ae4(0x843)](_0xf48576);},Game_Temp[_0x5c342f(0xca4)]['retrieveBattleBalloon']=function(){const _0x102818=_0x5c342f;return this[_0x102818(0x321)]=this['_battleBalloonQueue']||[],this[_0x102818(0x321)]['shift']();},Game_Temp[_0x5c342f(0xca4)]['clearBattleBalloons']=function(){this['_battleBalloonQueue']=[];},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x5aa)]=function(){const _0x2d4fda=_0x5c342f;this[_0x2d4fda(0xd8c)]===undefined&&(this[_0x2d4fda(0xd8c)]=[]);for(const _0x280203 of this[_0x2d4fda(0xd8c)]){if('jhxry'!==_0x2d4fda(0xc6b))!_0x280203[_0x2d4fda(0xc09)]()&&this[_0x2d4fda(0xbed)](_0x280203);else{_0x509cc3[_0x2d4fda(0xbda)](_0x2a9258);if(_0x2bd1d4)_0x4a3516[_0x2d4fda(0xb36)]();}}this[_0x2d4fda(0x3e8)]();},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x3e8)]=function(){const _0x48a908=_0x5c342f;for(;;){const _0x1a83f7=$gameTemp['retrieveBattleBalloon']();if(_0x1a83f7)this['createBattleBalloon'](_0x1a83f7);else{if(_0x48a908(0x9c9)!==_0x48a908(0x9c9))_0xc6e843=_0x4adcbb['parseLocalizedText'](_0x489de6);else break;}}},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x682)]=function(_0x53c726){const _0x1dd6b2=_0x5c342f,_0x50975a=this[_0x1dd6b2(0xbdd)](_0x53c726[_0x1dd6b2(0x54e)]);if(_0x50975a){if(_0x1dd6b2(0x7b2)!==_0x1dd6b2(0x7b2)){if(!_0x52d084[_0x1dd6b2(0x201)][_0x1dd6b2(0x1b6)])return;_0x431a94[_0x1dd6b2(0x201)][_0x1dd6b2(0x1b6)][_0x1dd6b2(0x393)](_0x192f3d);}else{let _0x405eff=null;Imported[_0x1dd6b2(0x91b)]&&Array['isArray'](_0x53c726['balloonId'])?_0x405eff=new Sprite_IconBalloon():_0x405eff=new Sprite_Balloon(),_0x405eff[_0x1dd6b2(0x4bf)]=_0x53c726['target'],_0x405eff[_0x1dd6b2(0x6bc)]=_0x50975a,_0x405eff[_0x1dd6b2(0x6bc)][_0x1dd6b2(0x7d8)]=_0x50975a,_0x405eff[_0x1dd6b2(0x5bd)](_0x50975a,_0x53c726[_0x1dd6b2(0x3e6)]),BattleManager[_0x1dd6b2(0x176)](_0x405eff),this['_battleBalloonSprites'][_0x1dd6b2(0x843)](_0x405eff);}}},Spriteset_Battle['prototype']['removeBattleBalloon']=function(_0x537eec){const _0x2b84d3=_0x5c342f;this[_0x2b84d3(0xd8c)][_0x2b84d3(0x5e1)](_0x537eec),BattleManager[_0x2b84d3(0x968)](_0x537eec),_0x537eec[_0x2b84d3(0xa78)]();},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x5bf)]=function(_0x1f08cc,_0x3fff6d){},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x2e4)]=function(){return![];},Spriteset_Battle[_0x5c342f(0xca4)]['isAnyBattleBalloonPlaying']=function(){const _0xd20b5c=_0x5c342f;return this[_0xd20b5c(0xd8c)]=this['_battleBalloonSprites']||[],this['_battleBalloonSprites'][_0xd20b5c(0xc5c)]>0x0;},VisuMZ['BattleCore'][_0x5c342f(0x364)]=Game_System[_0x5c342f(0xca4)][_0x5c342f(0xd5a)],Game_System['prototype']['initialize']=function(){const _0xfd4b5e=_0x5c342f;VisuMZ['BattleCore'][_0xfd4b5e(0x364)]['call'](this),this[_0xfd4b5e(0xcda)]();},Game_System['prototype'][_0x5c342f(0xcda)]=function(){const _0x35dbc3=_0x5c342f;this[_0x35dbc3(0xb92)]=this[_0x35dbc3(0xb92)]||[];},Game_System[_0x5c342f(0xca4)][_0x5c342f(0xd39)]=function(){const _0xfb3cab=_0x5c342f;if(this[_0xfb3cab(0xb92)]===undefined)this[_0xfb3cab(0xcda)]();return this[_0xfb3cab(0xb92)];},Game_System['prototype'][_0x5c342f(0x6cc)]=function(_0x496980){const _0x2168da=_0x5c342f;if(this[_0x2168da(0xb92)]===undefined)this['initBattleCore']();if(!_0x496980)return;if(this['_defeatedEnemies'][_0x2168da(0xaec)](_0x496980))return;this['_defeatedEnemies'][_0x2168da(0x843)](_0x496980),this[_0x2168da(0xb92)]['sort']((_0x4346e0,_0x43aac6)=>_0x4346e0-_0x43aac6);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x757)]=Game_BattlerBase[_0x5c342f(0xca4)]['addNewState'],Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x444)]=function(_0x1b5b37){const _0x43e952=_0x5c342f,_0x5a97a8=this[_0x43e952(0x920)](),_0x14819b=this['stateMotionIndex']();VisuMZ[_0x43e952(0xca2)][_0x43e952(0x757)][_0x43e952(0xded)](this,_0x1b5b37);this['isEnemy']()&&_0x5a97a8&&this[_0x43e952(0x541)]()&&(this['_visualHpGauge_JustDied']=!this[_0x43e952(0x2f0)](),$gameSystem[_0x43e952(0x6cc)](this[_0x43e952(0xd9d)]()));if(SceneManager[_0x43e952(0x371)]()&&_0x14819b!==this[_0x43e952(0xd3b)]()){if(_0x43e952(0x5a5)!=='hRGZZ')return 0x1*this[_0x43e952(0x625)];else this[_0x43e952(0x9d3)]()&&(_0x43e952(0xd71)==='yOMZg'?this[_0x43e952(0x9d3)]()[_0x43e952(0xc59)]():this[_0x43e952(0x6f2)]());}},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x2f0)]=function(){const _0x3bead8=_0x5c342f;return $gameSystem[_0x3bead8(0xd39)]()[_0x3bead8(0xaec)](this[_0x3bead8(0x3c7)]);},VisuMZ['BattleCore']['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x801)],Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x801)]=function(_0x46a7bc){const _0x1df547=_0x5c342f;VisuMZ[_0x1df547(0xca2)][_0x1df547(0x744)][_0x1df547(0xded)](this,_0x46a7bc);if(this['isEnemy']()&&_0x46a7bc===this['deathStateId']()&&this[_0x1df547(0x920)]()){if(_0x1df547(0x822)===_0x1df547(0x822))this['_visualHpGauge_JustDied']=![];else return 0x24;}if(!this[_0x1df547(0x50b)]&&!this[_0x1df547(0xc56)]&&SceneManager[_0x1df547(0x371)]()){if(_0x1df547(0x399)===_0x1df547(0x399))this['requestMotionRefresh']();else{const _0x5c0f70=_0x1ec0f4[_0x13a4ae];_0x5c0f70?this[_0x1df547(0x5bd)](_0x5c0f70[_0x1df547(0x594)],0x0):this[_0x1df547(0xd3f)]();}}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x49f)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xa52)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xa52)]=function(){const _0x329e20=_0x5c342f;VisuMZ[_0x329e20(0xca2)]['Game_Action_clear'][_0x329e20(0xded)](this),this[_0x329e20(0xb97)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x329e20(0x9f7)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x329e20(0xdd2)]='default',this[_0x329e20(0x589)]();},Game_Action['prototype']['clearTargetBattlerKey']=function(){this['_targetBattlerKey']='';},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x2c5)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x7ef)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x7ef)]=function(_0x15a91a){const _0x260fb8=_0x5c342f;VisuMZ['BattleCore'][_0x260fb8(0x2c5)][_0x260fb8(0xded)](this,_0x15a91a),this[_0x260fb8(0x589)]();},VisuMZ[_0x5c342f(0xca2)]['Game_Action_setSkill']=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x5c6)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x5c6)]=function(_0x56f978){const _0x40fd3e=_0x5c342f;VisuMZ[_0x40fd3e(0xca2)][_0x40fd3e(0x357)][_0x40fd3e(0xded)](this,_0x56f978),this['clearTargetBattlerKey']();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xd34)]=Game_Action['prototype'][_0x5c342f(0x2ba)],Game_Action['prototype']['setItem']=function(_0x23a901){const _0x38cc15=_0x5c342f;VisuMZ[_0x38cc15(0xca2)][_0x38cc15(0xd34)][_0x38cc15(0xded)](this,_0x23a901),this['clearTargetBattlerKey']();},Game_Action[_0x5c342f(0xca4)]['makeDamageValue']=function(_0x234c06,_0x184aa3){const _0x4a8207=_0x5c342f;return VisuMZ['BattleCore'][_0x4a8207(0xc90)][_0x4a8207(0x603)][_0x4a8207(0x4b9)]['call'](this,_0x234c06,_0x184aa3);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x41e)]=function(_0x44289a,_0x202507){const _0x406ae9=_0x5c342f;return VisuMZ['BattleCore'][_0x406ae9(0xc90)]['Damage'][_0x406ae9(0x7b8)][_0x406ae9(0xded)](this,_0x44289a,_0x202507);},Game_Action['prototype'][_0x5c342f(0xb11)]=function(_0x3771a6,_0x124167){const _0x5dcff5=_0x5c342f;return VisuMZ[_0x5dcff5(0xca2)][_0x5dcff5(0xc90)][_0x5dcff5(0x603)][_0x5dcff5(0x206)]['call'](this,_0x3771a6,_0x124167);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xdff)]=Game_Action[_0x5c342f(0xca4)]['itemHit'],Game_Action['prototype'][_0x5c342f(0xa55)]=function(_0xc4e0d7){const _0x15e2c9=_0x5c342f,_0xdf3622=this[_0x15e2c9(0xa87)]()[_0x15e2c9(0x340)];if(_0xdf3622[_0x15e2c9(0xcbd)](/<ALWAYS HIT>/i)){if(_0x15e2c9(0x3d2)!=='UQkXE')_0xb6aa62+=_0x255026,_0x2163c0+=_0x32f12a;else return 0x1;}else{if(_0xdf3622[_0x15e2c9(0xcbd)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x55b03d=VisuMZ[_0x15e2c9(0xca2)][_0x15e2c9(0xdff)][_0x15e2c9(0xded)](this,_0xc4e0d7);return _0x55b03d=this[_0x15e2c9(0x9f7)][_0x15e2c9(0xb7a)]*_0x55b03d+this[_0x15e2c9(0x9f7)]['hitFlat'],_0x55b03d;}}},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x9a2)]=function(_0x11e09f){const _0x394d54=_0x5c342f;if(!this[_0x394d54(0xa87)]()[_0x394d54(0x8f5)][_0x394d54(0xe18)])return 0x0;let _0x6bb05d=VisuMZ[_0x394d54(0xca2)][_0x394d54(0xc90)][_0x394d54(0x603)][_0x394d54(0xa10)][_0x394d54(0xded)](this,_0x11e09f);return _0x6bb05d=this['_multipliers']['criticalHitRate']*_0x6bb05d+this[_0x394d54(0x9f7)][_0x394d54(0x8f8)],_0x6bb05d;},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x942)]=function(_0x422f55){const _0x1a3f07=_0x5c342f;return _0x422f55=VisuMZ[_0x1a3f07(0xca2)][_0x1a3f07(0xc90)][_0x1a3f07(0x603)][_0x1a3f07(0xa1f)][_0x1a3f07(0xded)](this,_0x422f55),_0x422f55=this[_0x1a3f07(0x9f7)][_0x1a3f07(0x1ff)]*_0x422f55+this[_0x1a3f07(0x9f7)][_0x1a3f07(0x174)],_0x422f55;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x528)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x4b1)],Game_Action[_0x5c342f(0xca4)]['evalDamageFormula']=function(_0x1c2c38){const _0x1660b7=_0x5c342f;if(this['_customDamageFormula']!==_0x1660b7(0x4e4))return this[_0x1660b7(0x8e7)](_0x1c2c38);else return DataManager['getDamageStyle'](this['item']())==='MANUAL'?VisuMZ[_0x1660b7(0xca2)][_0x1660b7(0x528)][_0x1660b7(0xded)](this,_0x1c2c38):this['evalDamageFormulaBattleCore'](_0x1c2c38);},Game_Action['prototype']['setCustomDamageFormula']=function(_0x252d86){const _0x21641e=_0x5c342f;this[_0x21641e(0xdd2)]=_0x252d86;},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x8e7)]=function(_0x493b1d){const _0x13a14f=_0x5c342f,_0x1aeb03=this[_0x13a14f(0xa87)](),_0x35857f=_0x1aeb03['damage'][_0x13a14f(0x6b8)];_0x1aeb03[_0x13a14f(0x8f5)]['formula']=this[_0x13a14f(0xdd2)];let _0x55a037=VisuMZ[_0x13a14f(0xca2)][_0x13a14f(0x528)]['call'](this,_0x493b1d);return _0x1aeb03[_0x13a14f(0x8f5)][_0x13a14f(0x6b8)]=_0x35857f,_0x55a037;},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x58a)]=function(){const _0x39c7a1=_0x5c342f;if(this[_0x39c7a1(0xa87)]()['note'][_0x39c7a1(0xcbd)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x39c7a1(0x4d0)===_0x39c7a1(0x4d0)){const _0x2ad01b=String(RegExp['$1'])['toUpperCase']()['trim']();return _0x2ad01b;}else this[_0x39c7a1(0xb29)]=_0x39c7a1(0xaa2);}return _0x39c7a1(0x711);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xc7b)]=function(_0x11affd){const _0x4cfcc1=_0x5c342f,_0xf4a38c=DataManager['getDamageStyle'](this[_0x4cfcc1(0xa87)]()),_0x4932f4=VisuMZ[_0x4cfcc1(0xa30)][_0xf4a38c];try{if('ZfydN'!==_0x4cfcc1(0x88a)){if(!_0x43473a[_0x4cfcc1(0x371)]())return;const _0x30635a=_0x4a3443['getLastPluginCommandInterpreter']();if(!_0x30635a)return;_0x30635a[_0x4cfcc1(0x430)](_0x4cfcc1(0xbfb));}else return _0x4932f4['Formula'][_0x4cfcc1(0xded)](this,_0x11affd);}catch(_0x25c0d){if(_0x4cfcc1(0x885)===_0x4cfcc1(0x885)){if($gameTemp[_0x4cfcc1(0x1b4)]())console[_0x4cfcc1(0x1c4)](_0x25c0d);return VisuMZ[_0x4cfcc1(0xca2)][_0x4cfcc1(0x528)][_0x4cfcc1(0xded)](this);}else{_0x4f713d=(_0x343c7f+_0x2ea550)/0x2;if(_0x4793ba[_0x4cfcc1(0x9d3)]())_0x163297+=_0x358770[_0x4cfcc1(0x9d3)]()[_0x4cfcc1(0x880)]/0x2;}}},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x18b)]=function(_0x304bec,_0x2033b3){const _0x238491=_0x5c342f;if(this['isCertainHit']())return _0x2033b3;const _0x5de131=this[_0x238491(0xdda)](),_0x467bb8=_0x304bec;let _0x3e82b4=[],_0x1007f2=[];_0x3e82b4[_0x238491(0x843)](this[_0x238491(0xb97)]['arPenFlat'],this[_0x238491(0xb97)][_0x238491(0x702)]),_0x1007f2['push'](this[_0x238491(0xb97)]['arPenRate'],this[_0x238491(0xb97)]['arRedRate']);const _0x494f04=this[_0x238491(0x5f9)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x36f8ce=this[_0x238491(0x5f9)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x3b7146=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x566a42=this[_0x238491(0x5f9)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x3e82b4=_0x3e82b4[_0x238491(0x310)](_0x467bb8[_0x238491(0xd63)]()[_0x238491(0xd08)](_0x4c6fb3=>_0x4c6fb3&&_0x4c6fb3['note'][_0x238491(0xcbd)](_0x494f04)?Number(RegExp['$1']):0x0)),_0x1007f2=_0x1007f2[_0x238491(0x310)](_0x467bb8['traitObjects']()[_0x238491(0xd08)](_0x5c6eb9=>_0x5c6eb9&&_0x5c6eb9[_0x238491(0x340)]['match'](_0x36f8ce)?Number(RegExp['$1'])/0x64:0x0)),_0x3e82b4=_0x3e82b4['concat'](_0x5de131[_0x238491(0xd63)]()[_0x238491(0xd08)](_0x24e4f2=>_0x24e4f2&&_0x24e4f2[_0x238491(0x340)][_0x238491(0xcbd)](_0x3b7146)?Number(RegExp['$1']):0x0)),_0x1007f2=_0x1007f2[_0x238491(0x310)](_0x5de131[_0x238491(0xd63)]()[_0x238491(0xd08)](_0xf28e6d=>_0xf28e6d&&_0xf28e6d[_0x238491(0x340)]['match'](_0x566a42)?Number(RegExp['$1'])/0x64:0x0));if(this['item']()[_0x238491(0x340)][_0x238491(0xcbd)](_0x3b7146)){if(_0x238491(0xd77)!=='suafg')return _0x23acb3[_0x238491(0xca2)]['Settings'][_0x238491(0x535)]['AllowRandomSpeed'];else _0x3e82b4['push'](Number(RegExp['$1']));}return this[_0x238491(0xa87)]()[_0x238491(0x340)][_0x238491(0xcbd)](_0x566a42)&&_0x1007f2[_0x238491(0x843)](Number(RegExp['$1'])),_0x2033b3=_0x3e82b4[_0x238491(0x74c)]((_0x1d1074,_0x786e67)=>_0x1d1074-_0x786e67,_0x2033b3),_0x2033b3>0x0&&(_0x2033b3=_0x1007f2['reduce']((_0x4cf5bf,_0x58c988)=>_0x4cf5bf*(0x1-_0x58c988),_0x2033b3)),_0x2033b3;},VisuMZ['BattleCore'][_0x5c342f(0x4f8)]=Game_Action['prototype'][_0x5c342f(0xe1e)],Game_Action['prototype']['executeDamage']=function(_0x4a8fe1,_0x451be2){const _0x4c35d9=_0x5c342f;_0x451be2=_0x451be2*this[_0x4c35d9(0x9f7)][_0x4c35d9(0x59a)],_0x451be2+=this[_0x4c35d9(0x9f7)][_0x4c35d9(0x983)]*(_0x451be2>=0x0?0x1:-0x1),_0x451be2=this[_0x4c35d9(0x9df)](_0x4c35d9(0x2ff),_0x4a8fe1,_0x451be2,![]),_0x451be2=this[_0x4c35d9(0x918)](_0x451be2),_0x451be2=Math[_0x4c35d9(0x5c1)](_0x451be2),this['_executedValue']=_0x451be2,this[_0x4c35d9(0x71f)]=this['_totalValue']||0x0,this[_0x4c35d9(0x71f)]+=_0x451be2,VisuMZ[_0x4c35d9(0xca2)]['Game_Action_executeDamage'][_0x4c35d9(0xded)](this,_0x4a8fe1,_0x451be2),this['applyBattleCoreJS'](_0x4c35d9(0x1ed),_0x4a8fe1,_0x451be2,!![]);},Game_Action['prototype'][_0x5c342f(0x918)]=function(_0x260fc7){const _0x1183cf=_0x5c342f;if(this['isBypassDamageCap']())return _0x260fc7;return _0x260fc7=this[_0x1183cf(0x44d)](_0x260fc7),_0x260fc7=this[_0x1183cf(0x6be)](_0x260fc7),_0x260fc7;},Game_Action['prototype'][_0x5c342f(0x5fd)]=function(){const _0x38e118=_0x5c342f,_0x1be996=/<BYPASS DAMAGE CAP>/i;if(this[_0x38e118(0xa87)]()['note'][_0x38e118(0xcbd)](_0x1be996))return!![];if(this['subject']()[_0x38e118(0xd63)]()[_0x38e118(0x967)](_0x20b394=>_0x20b394&&_0x20b394[_0x38e118(0x340)][_0x38e118(0xcbd)](_0x1be996)))return!![];return!VisuMZ[_0x38e118(0xca2)]['Settings'][_0x38e118(0x603)][_0x38e118(0x363)];},Game_Action['prototype']['applySoftDamageCap']=function(_0x100ce2){const _0x17a694=_0x5c342f;if(!VisuMZ[_0x17a694(0xca2)][_0x17a694(0xc90)][_0x17a694(0x603)][_0x17a694(0x228)])return _0x100ce2;const _0x5c403f=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x17a694(0x340)]['match'](_0x5c403f))return _0x100ce2;if(this[_0x17a694(0xdda)]()[_0x17a694(0xd63)]()[_0x17a694(0x967)](_0xa6d476=>_0xa6d476&&_0xa6d476[_0x17a694(0x340)]['match'](_0x5c403f)))return _0x100ce2;const _0x46424c=_0x100ce2<0x0?-0x1:0x1;_0x100ce2=Math[_0x17a694(0xd81)](_0x100ce2);let _0x55d790=this[_0x17a694(0xdda)]()['softDamageCapRate']();this[_0x17a694(0xa87)]()['note'][_0x17a694(0xcbd)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&('ZsXwq'===_0x17a694(0x9cd)?_0x55d790+=Number(RegExp['$1'])/0x64:this[_0x17a694(0xb29)]=_0x17a694(0x594));_0x55d790=_0x55d790[_0x17a694(0x3f8)](0.01,0x1);const _0x283efc=this[_0x17a694(0x4ea)](),_0x159362=_0x55d790*_0x283efc;if(_0x100ce2>_0x159362&&_0x283efc>_0x159362){_0x100ce2-=_0x159362;const _0x329d66=VisuMZ[_0x17a694(0xca2)][_0x17a694(0xc90)][_0x17a694(0x603)][_0x17a694(0x4ba)],_0x1bce0e=Math[_0x17a694(0xaee)](0x1-_0x100ce2/((_0x283efc-_0x159362)*_0x329d66+_0x100ce2),0.01);_0x100ce2*=_0x1bce0e,_0x100ce2+=_0x159362;}return _0x100ce2*_0x46424c;},Game_Action[_0x5c342f(0xca4)]['getHardDamageCap']=function(){const _0x11a581=_0x5c342f;if(this['item']()['note'][_0x11a581(0xcbd)](/<DAMAGE CAP:[ ](\d+)>/i)){if('VDGpw'==='hccHD'){if(!this[_0x11a581(0xd17)])return;if(!this['_shadowSprite'])return;this[_0x11a581(0xab6)](),this[_0x11a581(0x2c0)]();}else return Number(RegExp['$1']);}else{if(_0x11a581(0x1c5)==='OVRGp')return this[_0x11a581(0xdda)]()[_0x11a581(0x4e3)]();else{this['_regionBattleback1']={},this[_0x11a581(0x226)]={};if(!_0x4a2f0e)return;const _0x345f49=_0x2d2143[_0x11a581(0x340)];if(!_0x345f49)return;const _0x3dd4ad=_0x345f49[_0x11a581(0xcbd)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x3dd4ad)for(const _0x392456 of _0x3dd4ad){_0x392456['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x46f692=_0x4bd60b(_0x196a9c['$1']),_0x1d9eb4=_0x228339(_0x267f97['$2']),_0x2e4f4a=_0x1d9eb4===0x1?this['_regionBattleback1']:this['_regionBattleback2'],_0x5db305=_0x315cce(_0xbc3b37['$3']);_0x2e4f4a[_0x46f692]=_0x5db305;}}}},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x6be)]=function(_0x2e78f9){const _0x1c4761=_0x5c342f;let _0x5b9cf7=this[_0x1c4761(0x4ea)]();return _0x2e78f9[_0x1c4761(0x3f8)](-_0x5b9cf7,_0x5b9cf7);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x7e8)]=function(){const _0x543652=_0x5c342f;if(!this[_0x543652(0xa87)]())return![];if(!$gameParty[_0x543652(0xdcc)]())return![];return(this[_0x543652(0xa87)]()['note']||'')[_0x543652(0xcbd)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xc8d)]=function(_0x2f2dd5){const _0x378e56=_0x5c342f;if(this[_0x378e56(0x7e8)]()){let _0x51f852=BattleManager[_0x378e56(0x183)];_0x2f2dd5/=_0x51f852['length'],this[_0x378e56(0xc73)]()&&(_0x2f2dd5*=this[_0x378e56(0xdda)]()[_0x378e56(0xe13)]()+0x1),_0x2f2dd5=_0x2f2dd5>0x0?Math['ceil'](_0x2f2dd5):Math[_0x378e56(0x9b3)](_0x2f2dd5);}return _0x2f2dd5;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x4d2)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xc21)],Game_Action[_0x5c342f(0xca4)]['makeDamageValue']=function(_0x5731c2,_0x433ef9){const _0x2e33d6=_0x5c342f;let _0x4bab8b=VisuMZ[_0x2e33d6(0xca2)][_0x2e33d6(0x4d2)][_0x2e33d6(0xded)](this,_0x5731c2,_0x433ef9);return this['disperseDamage'](_0x4bab8b);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x4e8)]=function(_0x40208f,_0x154783){const _0x34ff9a=_0x5c342f;let _0x2f6e1c=(_0x40208f['mhp']*_0x154783[_0x34ff9a(0x63a)]+_0x154783[_0x34ff9a(0xb7c)])*_0x40208f[_0x34ff9a(0xd7e)];_0x2f6e1c=this[_0x34ff9a(0xc8d)](_0x2f6e1c);this[_0x34ff9a(0x687)]()&&(_0x2f6e1c*=this[_0x34ff9a(0xdda)]()[_0x34ff9a(0x840)]);_0x2f6e1c=Math['floor'](_0x2f6e1c);if(_0x2f6e1c!==0x0){if(_0x34ff9a(0xbb5)===_0x34ff9a(0xbb5))_0x40208f[_0x34ff9a(0xda1)](_0x2f6e1c),this[_0x34ff9a(0xc23)](_0x40208f);else return this[_0x34ff9a(0xa4e)]&&this[_0x34ff9a(0xa4e)][_0x34ff9a(0x1ab)]();}},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x769)]=function(_0x1ac6c5,_0xa58a15){const _0x42879b=_0x5c342f;let _0x4ac820=(_0x1ac6c5[_0x42879b(0x65d)]*_0xa58a15[_0x42879b(0x63a)]+_0xa58a15[_0x42879b(0xb7c)])*_0x1ac6c5[_0x42879b(0xd7e)];_0x4ac820=this['disperseDamage'](_0x4ac820),this[_0x42879b(0x687)]()&&(_0x4ac820*=this[_0x42879b(0xdda)]()[_0x42879b(0x840)]),_0x4ac820=Math['floor'](_0x4ac820),_0x4ac820!==0x0&&(_0x42879b(0xad6)===_0x42879b(0xab2)?this[_0x42879b(0x79e)]=_0x42879b(0xcc0):(_0x1ac6c5[_0x42879b(0xa1e)](_0x4ac820),this[_0x42879b(0xc23)](_0x1ac6c5)));},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x75b)]=function(_0x5b8ae6,_0x4d165e){const _0xf01691=_0x5c342f;let _0xbff9ae=Math['floor'](_0x4d165e[_0xf01691(0x63a)]);_0xbff9ae=this[_0xf01691(0xc8d)](_0xbff9ae),_0xbff9ae!==0x0&&(_0x5b8ae6[_0xf01691(0x92d)](_0xbff9ae),this[_0xf01691(0xc23)](_0x5b8ae6));},VisuMZ[_0x5c342f(0xca2)]['Game_Action_apply']=Game_Action['prototype'][_0x5c342f(0x3fd)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x3fd)]=function(_0x274e98){const _0xb17b2d=_0x5c342f;this[_0xb17b2d(0x9df)](_0xb17b2d(0x4a2),_0x274e98,0x0,!![]),VisuMZ[_0xb17b2d(0xca2)][_0xb17b2d(0x314)][_0xb17b2d(0xded)](this,_0x274e98),this[_0xb17b2d(0x9df)](_0xb17b2d(0xa06),_0x274e98,this[_0xb17b2d(0xa3f)]||0x0,!![]),this['applyResultSwitches'](_0x274e98);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x9df)]=function(_0x2373b5,_0x1dc0da,_0x29fabd,_0x90216f){const _0x294087=_0x5c342f;if(this[_0x294087(0xc56)]||this[_0x294087(0x50b)])return;_0x29fabd=_0x29fabd||0x0;const _0x2a0fdc=_0x29fabd,_0x5addfe=VisuMZ[_0x294087(0xca2)][_0x294087(0xc90)]['Mechanics'],_0x118ae8=_0x2373b5[_0x294087(0x266)]('');if(_0x5addfe[_0x118ae8]){_0x29fabd=_0x5addfe[_0x118ae8][_0x294087(0xded)](this,_0x29fabd,_0x1dc0da);if(_0x90216f)_0x29fabd=_0x2a0fdc;}let _0x1c7719=VisuMZ[_0x294087(0xca2)]['createKeyJS'](this[_0x294087(0xa87)](),_0x2373b5[_0x294087(0x266)](''));if(VisuMZ[_0x294087(0xca2)]['JS'][_0x1c7719]){if(_0x294087(0x939)!==_0x294087(0x939)){if(this[_0x294087(0x47f)]())_0x4d199c[_0x294087(0xca2)][_0x294087(0x898)][_0x294087(0xded)](this);}else{_0x29fabd=VisuMZ[_0x294087(0xca2)]['JS'][_0x1c7719][_0x294087(0xded)](this,this[_0x294087(0xdda)](),_0x1dc0da,this[_0x294087(0xa87)](),_0x29fabd);if(_0x90216f)_0x29fabd=_0x2a0fdc;}}for(const _0x40fb01 of this[_0x294087(0xdda)]()['traitObjects']()){if(!_0x40fb01)continue;_0x1c7719=VisuMZ[_0x294087(0xca2)]['createKeyJS'](_0x40fb01,_0x2373b5[_0x294087(0x266)]('AsUser'));if(VisuMZ[_0x294087(0xca2)]['JS'][_0x1c7719]){_0x29fabd=VisuMZ[_0x294087(0xca2)]['JS'][_0x1c7719][_0x294087(0xded)](this,this[_0x294087(0xdda)](),_0x1dc0da,_0x40fb01,_0x29fabd);if(_0x90216f)_0x29fabd=_0x2a0fdc;}}for(const _0x51a625 of _0x1dc0da[_0x294087(0xd63)]()){if(!_0x51a625)continue;_0x1c7719=VisuMZ[_0x294087(0xca2)]['createKeyJS'](_0x51a625,_0x2373b5['format'](_0x294087(0x663)));if(VisuMZ[_0x294087(0xca2)]['JS'][_0x1c7719]){_0x29fabd=VisuMZ['BattleCore']['JS'][_0x1c7719]['call'](this,this[_0x294087(0xdda)](),_0x1dc0da,_0x51a625,_0x29fabd);if(_0x90216f)_0x29fabd=_0x2a0fdc;}}return _0x29fabd;},Game_Action[_0x5c342f(0xca4)]['actionBattleCoreJS']=function(_0x426546){const _0x5ae05d=_0x5c342f,_0x2b3e84=this[_0x5ae05d(0x71f)]||0x0,_0x48a8ef=VisuMZ[_0x5ae05d(0xca2)][_0x5ae05d(0xc90)][_0x5ae05d(0x535)],_0x1f0720=_0x426546[_0x5ae05d(0x266)]('');_0x48a8ef[_0x1f0720]&&_0x48a8ef[_0x1f0720][_0x5ae05d(0xded)](this,_0x2b3e84);let _0x1870e3=VisuMZ[_0x5ae05d(0xca2)][_0x5ae05d(0xdd1)](this[_0x5ae05d(0xa87)](),_0x426546);VisuMZ[_0x5ae05d(0xca2)]['JS'][_0x1870e3]&&(_0x5ae05d(0xe0e)!==_0x5ae05d(0x633)?VisuMZ['BattleCore']['JS'][_0x1870e3][_0x5ae05d(0xded)](this,this['subject'](),this[_0x5ae05d(0xdda)](),this[_0x5ae05d(0xa87)](),_0x2b3e84):_0x35a6b7['setValue'](_0x3b2e81[_0x5ae05d(0x3d7)],0x0));for(const _0x2fe647 of this[_0x5ae05d(0xdda)]()[_0x5ae05d(0xd63)]()){if('Kqtlm'===_0x5ae05d(0xcf0)){if(_0xe85e6['type']===0x0)this[_0x5ae05d(0x92b)]('thrust');else{if(_0x227363[_0x5ae05d(0xb48)]===0x1)this[_0x5ae05d(0x92b)]('swing');else _0x32d506['type']===0x2&&this['requestMotion'](_0x5ae05d(0x92e));}this['startWeaponAnimation'](_0x49f2c8[_0x5ae05d(0xb4f)]);}else{if(!_0x2fe647)continue;_0x1870e3=VisuMZ[_0x5ae05d(0xca2)][_0x5ae05d(0xdd1)](_0x2fe647,_0x426546),VisuMZ[_0x5ae05d(0xca2)]['JS'][_0x1870e3]&&VisuMZ['BattleCore']['JS'][_0x1870e3][_0x5ae05d(0xded)](this,this[_0x5ae05d(0xdda)](),this['subject'](),_0x2fe647,_0x2b3e84);}}},Game_Action['prototype'][_0x5c342f(0xbb8)]=function(){const _0x6ef61=_0x5c342f;return VisuMZ[_0x6ef61(0xca2)][_0x6ef61(0xc90)][_0x6ef61(0x535)][_0x6ef61(0xc64)][_0x6ef61(0xded)](this);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x539)]=function(){const _0x2ee672=_0x5c342f;return VisuMZ[_0x2ee672(0xca2)][_0x2ee672(0xc90)][_0x2ee672(0x535)][_0x2ee672(0x28c)];},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x55f)]=function(){const _0x6fc36d=_0x5c342f;if(this[_0x6fc36d(0x9bc)]==='all\x20actors')return![];if(this[_0x6fc36d(0x9bc)]==='all\x20enemies')return![];if(!this['item']())return![];return this[_0x6fc36d(0xa87)]()[_0x6fc36d(0x340)][_0x6fc36d(0xcbd)](/<JS TARGETS>/i);},Game_Action[_0x5c342f(0xca4)]['isBattleCoreTargetScope']=function(){const _0x47bc99=_0x5c342f;if(this['_targetBattlerKey']===_0x47bc99(0x813))return![];if(this[_0x47bc99(0x9bc)]===_0x47bc99(0x332))return![];if(!this[_0x47bc99(0x661)]&&this['subject']()['isConfused']())return![];if(this['isCustomBattleScope']())return!![];if(!this[_0x47bc99(0xa87)]())return![];return typeof this[_0x47bc99(0xa87)]()['scope']===_0x47bc99(0xcaf);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xbbe)]=Game_Action['prototype'][_0x5c342f(0x932)],Game_Action['prototype']['isForOpponent']=function(){const _0x3c49be=_0x5c342f;if(this[_0x3c49be(0x9bc)]===_0x3c49be(0x813))return![];if(this['_targetBattlerKey']===_0x3c49be(0x332))return!![];if(this[_0x3c49be(0xdbd)]()&&!this[_0x3c49be(0x55f)]()){if('PZYJa'!==_0x3c49be(0xe02))_0x3b4721[_0x3c49be(0x68c)](_0x1c2712);else return this[_0x3c49be(0x2d8)]();}else{if(_0x3c49be(0x9b8)!=='GiIZg')return VisuMZ[_0x3c49be(0xca2)][_0x3c49be(0xbbe)][_0x3c49be(0xded)](this);else _0x3a5075+=_0xbc7d3c;}},Game_Action[_0x5c342f(0xca4)]['isForOpponentBattleCore']=function(){const _0x607a65=_0x5c342f,_0x4eeaf3=this['item']()[_0x607a65(0xc1c)];if(_0x4eeaf3[_0x607a65(0xcbd)](/ANY/i))return!![];return _0x4eeaf3['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore'][_0x5c342f(0x6fd)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x719)],Game_Action['prototype']['isForFriend']=function(){const _0x4bdc9a=_0x5c342f;if(this['_targetBattlerKey']==='all\x20actors')return!![];if(this[_0x4bdc9a(0x9bc)]==='all\x20enemies')return![];if(this[_0x4bdc9a(0xdbd)]()&&!this[_0x4bdc9a(0x55f)]()){if(_0x4bdc9a(0xae5)!==_0x4bdc9a(0x369))return this[_0x4bdc9a(0x8e1)]();else{this[_0x4bdc9a(0x431)]();if(_0x5ae9e5[_0x4bdc9a(0x3e0)]){const _0x5914c9=_0x506dbb[_0x4bdc9a(0xbcc)][_0x4bdc9a(0xc90)]['States'];_0x5914c9&&_0x5914c9[_0x4bdc9a(0xda5)]===![]&&this[_0x4bdc9a(0xcde)](0x1);}else this[_0x4bdc9a(0xcde)](0x1);this[_0x4bdc9a(0x991)]();}}else{if(_0x4bdc9a(0x1c1)!==_0x4bdc9a(0x1c1))this['placeGauge'](_0x443c64,'tp',_0x12efda+(_0x31cd1a['TpGaugeOffsetX']||0x0),_0x5e8eb2+this[_0x4bdc9a(0xd87)]()*0x2+(_0xb6091e['TpGaugeOffsetY']||0x0));else return VisuMZ[_0x4bdc9a(0xca2)][_0x4bdc9a(0x6fd)][_0x4bdc9a(0xded)](this);}},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x8e1)]=function(){const _0x14194e=_0x5c342f,_0x35d8ee=this[_0x14194e(0xa87)]()['scope'];return _0x35d8ee[_0x14194e(0xcbd)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x48a)]=function(){const _0x57ab6c=_0x5c342f;if(this[_0x57ab6c(0xdbd)]()&&!this[_0x57ab6c(0x55f)]()){const _0x293de0=this[_0x57ab6c(0xa87)]()[_0x57ab6c(0xc1c)];return _0x293de0[_0x57ab6c(0xcbd)](/(?:ENEMY|FOE)/i)&&_0x293de0[_0x57ab6c(0xcbd)](/OR/i)&&_0x293de0['match'](/(?:ALLY|FRIEND)/i);}else{if(_0x57ab6c(0x5a3)===_0x57ab6c(0x972)){if(_0x13ec33[_0x57ab6c(0x2b2)][_0x57ab6c(0x560)]===0x3)return![];}else return![];}},Game_Action['prototype'][_0x5c342f(0x718)]=function(){const _0x452c8c=_0x5c342f;if(this[_0x452c8c(0x48a)]()){if(_0x452c8c(0x36b)!==_0x452c8c(0x36b))this[_0x452c8c(0xcd8)]=(this['_pattern']+0x1)%0x4;else{const _0x13f0f3=this[_0x452c8c(0xa87)]()['scope'];if(_0x13f0f3[_0x452c8c(0xcbd)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}}return![];},Game_Action[_0x5c342f(0xca4)]['isForAnyoneFocusOpponents']=function(){const _0x24b894=_0x5c342f;if(this[_0x24b894(0x48a)]()){const _0x3fee83=this[_0x24b894(0xa87)]()[_0x24b894(0xc1c)];if(_0x3fee83['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ['BattleCore']['Game_Action_isForAliveFriend']=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xac4)],Game_Action[_0x5c342f(0xca4)]['isForAliveFriend']=function(){const _0x15a6fa=_0x5c342f;if(this['_targetBattlerKey']===_0x15a6fa(0x813))return!![];return this[_0x15a6fa(0xdbd)]()&&!this[_0x15a6fa(0x55f)]()?this['isForAliveFriendBattleCore']():VisuMZ[_0x15a6fa(0xca2)][_0x15a6fa(0x326)]['call'](this);},VisuMZ['BattleCore'][_0x5c342f(0xc2b)]=Game_Action['prototype'][_0x5c342f(0xd6e)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xd6e)]=function(){const _0x1970be=_0x5c342f;if(this[_0x1970be(0x9bc)]==='all\x20actors')return VisuMZ[_0x1970be(0xca2)][_0x1970be(0xc2b)][_0x1970be(0xded)](this);return VisuMZ[_0x1970be(0xca2)]['Game_Action_isForDeadFriend']['call'](this);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x48d)]=function(){const _0x4a7018=_0x5c342f;if(this[_0x4a7018(0x48a)]())return!![];return![];},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x3fe)]=function(){const _0x2f782a=_0x5c342f;return this[_0x2f782a(0xa87)]()&&this[_0x2f782a(0xa87)]()[_0x2f782a(0x340)][_0x2f782a(0xcbd)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore']['Game_Action_isForOne']=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xbca)],Game_Action['prototype'][_0x5c342f(0xbca)]=function(){const _0x282851=_0x5c342f;if(this[_0x282851(0x9bc)]===_0x282851(0x813))return![];if(this[_0x282851(0x9bc)]===_0x282851(0x332))return![];if(this[_0x282851(0xdbd)]()&&!this[_0x282851(0x55f)]()){if(_0x282851(0x8fc)!==_0x282851(0x8fc))_0x232b6b+=_0x217004[_0x282851(0x47b)]()?-_0x5a97c2:_0x5ca837,_0x53bc56+=_0x1efd7c;else return this[_0x282851(0xcb7)]();}else return VisuMZ[_0x282851(0xca2)][_0x282851(0x9c5)][_0x282851(0xded)](this);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xcb7)]=function(){const _0x460d7f=_0x5c342f;if(this[_0x460d7f(0x48a)]())return!![];return![];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x797)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x754)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x754)]=function(){const _0x170e57=_0x5c342f;if(this[_0x170e57(0x9bc)]===_0x170e57(0x813))return![];if(this[_0x170e57(0x9bc)]===_0x170e57(0x332))return![];return this[_0x170e57(0xdbd)]()&&!this['isCustomBattleScope']()?_0x170e57(0x9b1)===_0x170e57(0x9b1)?this[_0x170e57(0x67b)]():this['battlerSprites']()[_0x170e57(0x967)](_0x1856d1=>_0x1856d1[_0x170e57(0x767)]()):VisuMZ[_0x170e57(0xca2)][_0x170e57(0x797)][_0x170e57(0xded)](this);},Game_Action['prototype'][_0x5c342f(0x67b)]=function(){const _0x359242=_0x5c342f,_0x265621=this[_0x359242(0xa87)]()[_0x359242(0xc1c)];return _0x265621[_0x359242(0xcbd)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xbf7)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x9fe)],Game_Action['prototype'][_0x5c342f(0x9fe)]=function(){const _0x352e82=_0x5c342f;if(this[_0x352e82(0x9bc)]===_0x352e82(0x813))return!![];if(this['_targetBattlerKey']===_0x352e82(0x332))return!![];return VisuMZ[_0x352e82(0xca2)][_0x352e82(0xbf7)][_0x352e82(0xded)](this);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xc05)]=function(){const _0x1fa93d=_0x5c342f;if(!this['item']())return![];if(this[_0x1fa93d(0xd6e)]())return![];return(this[_0x1fa93d(0xa87)]()[_0x1fa93d(0x340)]||'')[_0x1fa93d(0xcbd)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore'][_0x5c342f(0x3f9)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x503)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x503)]=function(_0x272f05){const _0x1ae234=_0x5c342f;if(this[_0x1ae234(0x3fe)]()&&_0x272f05===this['subject']())return![];return VisuMZ['BattleCore']['Game_Action_testApply'][_0x1ae234(0xded)](this,_0x272f05);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x6f7)]=Game_Action[_0x5c342f(0xca4)]['itemTargetCandidates'],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x240)]=function(){const _0x9796dd=_0x5c342f,_0x1b525e=VisuMZ[_0x9796dd(0xca2)]['Game_Action_itemTargetCandidates'][_0x9796dd(0xded)](this);if(this[_0x9796dd(0x3fe)]())_0x1b525e[_0x9796dd(0x5e1)](this['subject']());return _0x1b525e;},VisuMZ[_0x5c342f(0xca2)]['Game_Action_needsSelection']=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xade)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xade)]=function(){const _0x199126=_0x5c342f;if(this[_0x199126(0xdbd)]()&&!this[_0x199126(0x55f)]()){if('YtZOt'!==_0x199126(0x540))return this[_0x199126(0xb1b)]();else{if(!_0xfaa7f1[_0x199126(0x371)]())return;_0xac0f3d[_0x199126(0x2ee)](_0x5013c7,_0x39c262);const _0x1f89bf=_0x3c9883['getLastPluginCommandInterpreter'](),_0x4ee557=_0x130c49[_0x199126(0x492)],_0x4e545f=_0xa0400f[_0x199126(0x52b)],_0x3d92f5=_0x1f041b[_0x199126(0xad0)]?_0x191030[_0x199126(0xad0)]['slice'](0x0):[],_0x100376=_0x24e0bb[_0x199126(0x56f)];if(!_0x1f89bf||!_0x4ee557||!_0x4e545f)return;if(!_0x4ee557[_0x199126(0xa87)]())return;if(_0x4b80a7[_0x199126(0xa9d)])_0x100376[_0x199126(0x843)]('applyImmortal',_0x4e545f,_0x3d92f5,![]);if(_0x14228f[_0x199126(0xad2)])_0x100376['push']('waitForNewLine');if(_0x529a34[_0x199126(0x40d)])_0x100376[_0x199126(0x843)](_0x199126(0x47e));if(_0x4b8411['ClearBattleLog'])_0x100376['push'](_0x199126(0xa52));if(_0x32e8bc['ActionEnd'])_0x100376[_0x199126(0x843)](_0x199126(0x71b),_0x4e545f);if(_0x571974[_0x199126(0x638)])_0x100376[_0x199126(0x843)](_0x199126(0xd27));_0x1f89bf[_0x199126(0x430)](_0x199126(0x66a));}}else return VisuMZ[_0x199126(0xca2)]['Game_Action_needsSelection']['call'](this);},Game_Action[_0x5c342f(0xca4)]['needsSelectionBattleCore']=function(){const _0x56aae3=_0x5c342f,_0x448a8b=this['item']()['scope'];if(_0x448a8b[_0x56aae3(0xcbd)](/RANDOM/i))return![];if(_0x448a8b[_0x56aae3(0xcbd)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x448a8b['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x448a8b[_0x56aae3(0xcbd)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x448a8b[_0x56aae3(0xcbd)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x56aae3(0xca2)][_0x56aae3(0x8a1)]['call'](this);},VisuMZ['BattleCore'][_0x5c342f(0x8d0)]=Game_Action[_0x5c342f(0xca4)]['makeTargets'],Game_Action[_0x5c342f(0xca4)]['makeTargets']=function(){const _0x59bbc2=_0x5c342f;let _0x2cf8bd=[];return this['isBattleCoreTargetScope']()?this[_0x59bbc2(0x55f)]()?_0x2cf8bd=this[_0x59bbc2(0x18f)]():_0x2cf8bd=this[_0x59bbc2(0x977)]():_0x2cf8bd=VisuMZ[_0x59bbc2(0xca2)][_0x59bbc2(0x8d0)]['call'](this),_0x2cf8bd=this[_0x59bbc2(0x77f)](_0x2cf8bd),_0x2cf8bd;},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x70a)]=function(){const _0x4e7f5d=_0x5c342f;return this[_0x4e7f5d(0xdda)]()[_0x4e7f5d(0x47b)]()&&!this['subject']()[_0x4e7f5d(0x1fd)]();},Game_Action['prototype'][_0x5c342f(0x18f)]=function(){const _0x3f22c7=_0x5c342f,_0x358493=VisuMZ[_0x3f22c7(0xca2)]['createKeyJS'](this[_0x3f22c7(0xa87)](),_0x3f22c7(0x63d));if(VisuMZ['BattleCore']['JS'][_0x358493]){targets=VisuMZ[_0x3f22c7(0xca2)][_0x3f22c7(0x8d0)][_0x3f22c7(0xded)](this);const _0x471bca=VisuMZ[_0x3f22c7(0xca2)]['createKeyJS'](this[_0x3f22c7(0xa87)](),'Targets');return targets=VisuMZ[_0x3f22c7(0xca2)]['JS'][_0x471bca][_0x3f22c7(0xded)](this,this['subject'](),targets),this[_0x3f22c7(0xce4)](targets);}return this[_0x3f22c7(0x977)]();},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x977)]=function(){const _0x59502d=_0x5c342f;let _0x3c9995=[];const _0x4f7a03=String(this[_0x59502d(0xa87)]()[_0x59502d(0xc1c)]);if(this[_0x59502d(0xacd)]()){if(_0x59502d(0x274)===_0x59502d(0xaf7)){if([0x6c,0x198][_0x59502d(0xaec)](_0x350150[_0x59502d(0x441)])){const _0x3a91ef=_0x365695[_0x59502d(0x5c7)][0x0];if(_0x3a91ef['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}else{if(this[_0x59502d(0x70a)]()){if(_0x59502d(0xe2d)!==_0x59502d(0xe2d)){if(_0x26786b[_0x59502d(0x3bc)])this[_0x59502d(0xcea)](_0x100e2f[_0x59502d(0x36e)],_0xa84f87,_0x29a043);}else return _0x3c9995=this['getBattlerKeyTargets'](),this['repeatTargets'](_0x3c9995);}else return this[_0x59502d(0x788)]=-0x1,_0x3c9995[_0x59502d(0x843)](...this[_0x59502d(0x556)]()),this[_0x59502d(0xce4)](_0x3c9995);}}if(this['isForAnyoneFocusFriends']()){if(this[_0x59502d(0x70a)]()){if('FoFjC'===_0x59502d(0xb65))_0x2ebaeb['BattleCore'][_0x59502d(0x73a)][_0x59502d(0xded)](this),this[_0x59502d(0xc0c)]=this[_0x59502d(0x225)]>0x0?0xff:0x0;else return _0x3c9995=this['getBattlerKeyTargets'](),this[_0x59502d(0xce4)](_0x3c9995);}else{if(_0x59502d(0x2da)!==_0x59502d(0x3c9)){if(Imported['VisuMZ_3_BattleAI']){if(VisuMZ[_0x59502d(0x9da)][_0x59502d(0xda9)]<1.19){let _0x551e6b='';_0x551e6b+=_0x59502d(0xaed),_0x551e6b+=_0x59502d(0x84d),_0x551e6b+=_0x59502d(0x395),alert(_0x551e6b),SceneManager['exit']();}}return this[_0x59502d(0x788)]=-0x1,_0x3c9995[_0x59502d(0x843)](...this[_0x59502d(0x1af)]()),this[_0x59502d(0xce4)](_0x3c9995);}else{const _0x3654a5=this[_0x59502d(0x99b)],_0x29834c=(_0x3654a5/this[_0x59502d(0x392)])['clamp'](0.8,0x1),_0x2fc193=_0xae8b8f[_0x59502d(0xd2d)]??0x30,_0x3c449a=_0x29834c*_0x2fc193;_0x347bd5['startShakeFlinch'](_0x3c449a,_0x29834c);}}}if(_0x4f7a03[_0x59502d(0xcbd)](/(\d+) RANDOM ANY/i)){if(_0x59502d(0xcf6)!==_0x59502d(0xcc8)){let _0xa5bf34=Number(RegExp['$1']);while(_0xa5bf34--){if(_0x59502d(0x5bc)!=='asKqD'){const _0x2f8bf8=_0x5496d2(_0x18bc0a['$1']);return[_0x4d0ebf[_0x59502d(0xe06)]()[_0x2f8bf8]];}else{const _0x2b643f=Math[_0x59502d(0xb47)](0x2)===0x0?this[_0x59502d(0x886)]():this[_0x59502d(0xab5)]();_0x3c9995[_0x59502d(0x843)](_0x2b643f[_0x59502d(0x8eb)]());}}return this[_0x59502d(0xce4)](_0x3c9995);}else{const _0x24d511=this['battler']();if(_0x24d511&&_0x542c44)_0x24d511[_0x59502d(0x632)]();return;}}if(_0x4f7a03[_0x59502d(0xcbd)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x1037b2=Number(RegExp['$1']);while(_0x1037b2--){_0x3c9995[_0x59502d(0x843)](this[_0x59502d(0x886)]()[_0x59502d(0x8eb)]());}return this[_0x59502d(0xce4)](_0x3c9995);}if(_0x4f7a03['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x59502d(0x207)==='cRaNY'){let _0x1b4e3b=Number(RegExp['$1']);while(_0x1b4e3b--){_0x3c9995[_0x59502d(0x843)](this[_0x59502d(0xab5)]()['trueRandomTarget']());}return this[_0x59502d(0xce4)](_0x3c9995);}else this[_0x59502d(0x759)][_0x59502d(0x9b0)]['x']=this['_targetSkewX'],this[_0x59502d(0x759)][_0x59502d(0x9b0)]['y']=this[_0x59502d(0xba1)];}if(_0x4f7a03[_0x59502d(0xcbd)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x3c9995['push'](...this['friendsUnit']()[_0x59502d(0x4e9)]()[_0x59502d(0x3cd)](_0x522b4a=>_0x522b4a!==this[_0x59502d(0xdda)]())),this[_0x59502d(0xce4)](_0x3c9995);return VisuMZ[_0x59502d(0xca2)]['Game_Action_makeTargets'][_0x59502d(0xded)](this);},Game_Action[_0x5c342f(0xca4)]['randomTargets']=function(_0x583696){const _0xa374f9=_0x5c342f,_0x240d81=[];for(let _0x57e5d2=0x0;_0x57e5d2<this[_0xa374f9(0xabe)]();_0x57e5d2++){_0x240d81[_0xa374f9(0x843)](_0x583696['trueRandomTarget']());}return _0x240d81;},Game_Action['prototype'][_0x5c342f(0x77f)]=function(_0x5104b8){const _0x563565=_0x5c342f;if(!this['item']())return _0x5104b8;const _0x82eb4=this[_0x563565(0xa87)]()[_0x563565(0x340)];if(this[_0x563565(0x3fe)]()){if(_0x563565(0xad8)===_0x563565(0x3b1)){const _0xbe78e2=_0x44b0d7[_0x563565(0x388)](_0x7d3773);_0xbe78e2[_0x563565(0x845)]=![],_0xbe78e2[_0x563565(0xdfe)]=![],_0xbe78e2[_0x563565(0xca0)]=![],this['_damagePopupArray'][_0x563565(0x843)](_0xbe78e2);}else{this[_0x563565(0x9fe)]()&&_0x5104b8[_0x563565(0x5e1)](this['subject']());if(_0x5104b8[_0x563565(0xaec)](this[_0x563565(0xdda)]())){const _0x2f4ecb=this['friendsUnit']()[_0x563565(0x4e9)]()[_0x563565(0x5e1)](this[_0x563565(0xdda)]());if(_0x2f4ecb[_0x563565(0xc5c)]>0x0){if(_0x563565(0xc22)!==_0x563565(0xc22))this[_0x563565(0xc27)](_0xd45834,_0x37f798,_0x1efbb2),this[_0x563565(0x7a7)](_0x301d36,_0x5d35da,_0x4d12d7),this['finishActionSet'](_0x4e56bb,_0x55f9f0,_0x53182f);else{_0x2f4ecb[_0x563565(0x293)]((_0x49d74f,_0x47a919)=>_0x49d74f[_0x563565(0x7eb)]()-_0x47a919[_0x563565(0x7eb)]());while(_0x5104b8['includes'](this['subject']())){const _0xba5135=_0x5104b8['indexOf'](this[_0x563565(0xdda)]());_0x5104b8[_0xba5135]=_0x2f4ecb[Math[_0x563565(0xb47)](_0x2f4ecb['length'])];}}}else _0x5104b8[_0x563565(0x5e1)](this[_0x563565(0xdda)]());}}}return _0x5104b8;},VisuMZ['BattleCore'][_0x5c342f(0x5c3)]=Game_Action['prototype']['itemEffectAddAttackState'],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x8a4)]=function(_0x363a8a,_0x54e73c){const _0x35b8c3=_0x5c342f;VisuMZ[_0x35b8c3(0xca2)][_0x35b8c3(0x5c3)][_0x35b8c3(0xded)](this,_0x363a8a,_0x54e73c);if(!_0x363a8a[_0x35b8c3(0x9e5)]())return;for(const _0x1c3319 of this[_0x35b8c3(0xdda)]()['attackStates']()){if(_0x35b8c3(0x5a0)!==_0x35b8c3(0x5a0))_0x1d9258+='\x0a',_0x33ff86+=_0x189ea7[_0x35b8c3(0x5c7)][0x0];else{if(_0x1c3319===_0x363a8a[_0x35b8c3(0xcd2)]()){let _0xf79354=_0x54e73c['value1'];_0xf79354*=_0x363a8a[_0x35b8c3(0x27d)](_0x1c3319),_0xf79354*=this[_0x35b8c3(0xdda)]()[_0x35b8c3(0x2d6)](_0x1c3319),_0xf79354*=this[_0x35b8c3(0x647)](_0x363a8a),Math['random']()<_0xf79354&&(_0x363a8a[_0x35b8c3(0x442)]=!![],this[_0x35b8c3(0xc23)](_0x363a8a));}}}},VisuMZ['BattleCore']['Game_Action_itemEffectAddNormalState']=Game_Action[_0x5c342f(0xca4)]['itemEffectAddNormalState'],Game_Action['prototype'][_0x5c342f(0x1c6)]=function(_0x43e625,_0x27f557){const _0x953d60=_0x5c342f;VisuMZ[_0x953d60(0xca2)]['Game_Action_itemEffectAddNormalState']['call'](this,_0x43e625,_0x27f557);if(!_0x43e625[_0x953d60(0x9e5)]())return;if(_0x27f557[_0x953d60(0xb1f)]!==_0x43e625[_0x953d60(0xcd2)]())return;let _0x1ae327=_0x27f557['value1'];if(!this[_0x953d60(0xd5b)]()){if(_0x953d60(0x1c2)===_0x953d60(0x1c2))_0x1ae327*=_0x43e625[_0x953d60(0x27d)](_0x27f557[_0x953d60(0xb1f)]),_0x1ae327*=this[_0x953d60(0x647)](_0x43e625);else{if(this[_0x953d60(0x4c7)][_0x953d60(0xac6)]!==_0x4f8eb8)return this[_0x953d60(0x4c7)]['softDamageCap'];let _0x5457ef=_0x33ab3e['BattleCore'][_0x953d60(0xc90)]['Damage']['DefaultSoftCap'];const _0x2e9fe2=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x1f7725=this[_0x953d60(0xd63)]()[_0x953d60(0xd08)](_0x5a1b6f=>_0x5a1b6f&&_0x5a1b6f[_0x953d60(0x340)][_0x953d60(0xcbd)](_0x2e9fe2)?_0x12e00e(_0x4d35ee['$1'])/0x64:0x0);return _0x5457ef=_0x1f7725[_0x953d60(0x74c)]((_0x249114,_0x5849a4)=>_0x249114+_0x5849a4,_0x5457ef),this['_cache'][_0x953d60(0xac6)]=_0x5457ef,this['_cache'][_0x953d60(0xac6)]['clamp'](0.01,0x1);}}Math[_0x953d60(0x935)]()<_0x1ae327&&(_0x43e625['_deathStateApplied']=!![],this['makeSuccess'](_0x43e625));},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x88d)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x9cb)],Game_Action['prototype'][_0x5c342f(0x9cb)]=function(){const _0x32544c=_0x5c342f;VisuMZ[_0x32544c(0xca2)][_0x32544c(0x88d)]['call'](this),this[_0x32544c(0x950)](),this[_0x32544c(0xa4c)]();},Game_Action[_0x5c342f(0xca4)]['applyGlobalCommonEventNotetags']=function(){const _0xe0faef=_0x5c342f;if(!SceneManager[_0xe0faef(0x371)]())return;const _0x9fe0c1=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x44f215=this[_0xe0faef(0xa87)]()[_0xe0faef(0x340)][_0xe0faef(0xcbd)](_0x9fe0c1);if(_0x44f215)for(const _0x59f5ff of _0x44f215){if(!_0x59f5ff)continue;_0x59f5ff[_0xe0faef(0xcbd)](_0x9fe0c1);const _0x53ed62=String(RegExp['$1'])[_0xe0faef(0x68e)](',')['map'](_0x4fcd75=>String(_0x4fcd75)['trim']()),_0x4457f3=_0x53ed62[_0xe0faef(0xd08)](_0x31ec1d=>DataManager[_0xe0faef(0x76f)](_0x31ec1d));for(const _0x285f4e of _0x4457f3){if(_0xe0faef(0xb41)!==_0xe0faef(0xa44)){const _0x188e65=$dataCommonEvents[_0x285f4e];_0x188e65&&$gameTemp[_0xe0faef(0x580)](_0x285f4e);}else this[_0xe0faef(0xcb9)]=this[_0xe0faef(0xcb9)]||[],this['_onceParallelInterpreters'][_0xe0faef(0x5e1)](_0x1c0a06);}}},DataManager[_0x5c342f(0x76f)]=function(_0x1d66a4){const _0x53e911=_0x5c342f;_0x1d66a4=_0x1d66a4[_0x53e911(0xb34)]()['trim'](),this['_commonEventIDs']=this[_0x53e911(0x7ad)]||{};if(this['_commonEventIDs'][_0x1d66a4])return this[_0x53e911(0x7ad)][_0x1d66a4];for(const _0x2332ef of $dataCommonEvents){if(!_0x2332ef)continue;let _0x8f5e40=_0x2332ef['name'];_0x8f5e40=_0x8f5e40[_0x53e911(0xbc8)](/\x1I\[(\d+)\]/gi,''),_0x8f5e40=_0x8f5e40[_0x53e911(0xbc8)](/\\I\[(\d+)\]/gi,''),this[_0x53e911(0x7ad)][_0x8f5e40[_0x53e911(0xb34)]()[_0x53e911(0xa5e)]()]=_0x2332ef['id'];}return this[_0x53e911(0x7ad)][_0x1d66a4]||0x0;},Game_Action[_0x5c342f(0xca4)]['resetResultSwitches']=function(){const _0x31d22a=_0x5c342f;if(!SceneManager['isSceneBattle']())return;const _0x45796a=VisuMZ[_0x31d22a(0xca2)]['Settings'][_0x31d22a(0x535)];_0x45796a['SwitchCritical']&&(_0x31d22a(0x453)!==_0x31d22a(0x453)?_0x349819['isNextSceneBattleTransitionable']()?_0x3b0abd[_0x31d22a(0xca4)][_0x31d22a(0xbeb)][_0x31d22a(0xded)](this):_0x311593[_0x31d22a(0xca2)][_0x31d22a(0xc52)][_0x31d22a(0xded)](this):$gameSwitches[_0x31d22a(0x5b2)](_0x45796a[_0x31d22a(0x3e7)],![]));_0x45796a[_0x31d22a(0x785)]&&$gameSwitches[_0x31d22a(0x5b2)](_0x45796a[_0x31d22a(0x785)],![]);if(_0x45796a[_0x31d22a(0x3d7)]){if(_0x31d22a(0x8c9)!==_0x31d22a(0x8c9)){const _0x4b3158={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x25fa9a=_0x4d0df0[_0x31d22a(0x594)]['pop']();_0x3adde7[_0x31d22a(0x594)][_0x31d22a(0xc82)](_0x4b3158),_0x194d7e[_0x31d22a(0x594)]['unshift'](_0x25fa9a);}else $gameVariables['setValue'](_0x45796a[_0x31d22a(0x3d7)],0x0);}_0x45796a['VariableHeal']&&$gameVariables[_0x31d22a(0x5b2)](_0x45796a['VariableHeal'],0x0);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xa3b)]=function(_0x5e51b7){const _0x1d8423=_0x5c342f;if(!SceneManager[_0x1d8423(0x371)]())return;if(!_0x5e51b7)return;const _0x579fc3=_0x5e51b7[_0x1d8423(0xcb2)](),_0x47468f=VisuMZ['BattleCore']['Settings']['Mechanics'];_0x47468f[_0x1d8423(0x3e7)]&&_0x579fc3['critical']&&(_0x1d8423(0xb9f)===_0x1d8423(0xbbb)?(_0x47c21a[_0x1d8423(0xca2)]['BattleManager_abort'][_0x1d8423(0xded)](this),_0x658df8[_0x1d8423(0x9f4)]()):$gameSwitches[_0x1d8423(0x5b2)](_0x47468f['SwitchCritical'],!![]));_0x47468f['SwitchMissEvade']&&(_0x579fc3[_0x1d8423(0x845)]||_0x579fc3[_0x1d8423(0xdfe)])&&(_0x1d8423(0x6ab)==='sTjiQ'?(_0x44e8cf['BattleCore'][_0x1d8423(0x750)][_0x1d8423(0xded)](this),this[_0x1d8423(0x1b8)]()):$gameSwitches[_0x1d8423(0x5b2)](_0x47468f['SwitchMissEvade'],!![]));if(_0x47468f[_0x1d8423(0x3d7)]){let _0x57c969=$gameVariables[_0x1d8423(0xbc0)](_0x47468f[_0x1d8423(0x3d7)]);_0x579fc3['hpDamage']>0x0&&(_0x1d8423(0xde7)!==_0x1d8423(0xde7)?(_0x5e5d04[_0x1d8423(0x68a)](_0x15824a),[_0x1d8423(0x774),_0x1d8423(0x784),_0x1d8423(0x92e)][_0x1d8423(0xaec)](_0x3c44a4)&&this[_0x1d8423(0x1cd)]()):_0x57c969+=Math[_0x1d8423(0xd81)](_0x579fc3[_0x1d8423(0x81a)])),$gameVariables['setValue'](_0x47468f[_0x1d8423(0x3d7)],_0x57c969);}if(_0x47468f['VariableHeal']){if(_0x1d8423(0xcc1)!=='bSNSU'){if(this[_0x1d8423(0x4f5)][_0x1d8423(0xb3e)]())return;this[_0x1d8423(0x76e)](),this[_0x1d8423(0x496)](),!this['_subject']&&!this['_currentActor']&&_0x3d67b4['_scene'][_0x1d8423(0x33b)]();}else{let _0x4154fd=$gameVariables['value'](_0x47468f[_0x1d8423(0x595)]);_0x579fc3[_0x1d8423(0x81a)]<0x0&&(_0x1d8423(0x169)!==_0x1d8423(0x169)?_0x47d584[_0x1d8423(0xca2)][_0x1d8423(0xc52)][_0x1d8423(0xded)](this):_0x4154fd+=Math[_0x1d8423(0xd81)](_0x579fc3[_0x1d8423(0x81a)])),$gameVariables[_0x1d8423(0x5b2)](_0x47468f['VariableHeal'],_0x4154fd);}}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc5a)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc57)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x42a)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x42a)]=function(_0x514544,_0xef6e66){const _0x4bf0a5=_0x5c342f;VisuMZ['BattleCore'][_0x4bf0a5(0xc57)]['call'](this,_0x514544,_0xef6e66);if(!this[_0x4bf0a5(0x382)]()&&_0x514544&&_0x514544[_0x4bf0a5(0xcb2)]()[_0x4bf0a5(0x81a)]>0x0){if(_0x4bf0a5(0x307)===_0x4bf0a5(0x307))this[_0x4bf0a5(0xe39)]('HP',_0x514544,_0x514544[_0x4bf0a5(0xcb2)]()[_0x4bf0a5(0x81a)]);else return _0x404cfe;}if(_0x514544){this['_executeHpDamage']=this[_0x4bf0a5(0xa72)]||{};const _0x525635=_0x514544['battlerKey']();this[_0x4bf0a5(0xa72)][_0x525635]=_0xef6e66;}},Game_Action['prototype'][_0x5c342f(0xc11)]=function(_0x54adbf){const _0x2a9275=_0x5c342f;this[_0x2a9275(0xa72)]=this['_executeHpDamage']||{};const _0xb7fb11=_0x54adbf['battlerKey']();return this[_0x2a9275(0xa72)][_0xb7fb11]||0x0;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x242)]=Game_Action['prototype'][_0x5c342f(0xc58)],Game_Action[_0x5c342f(0xca4)]['executeMpDamage']=function(_0x266bd7,_0x14ae46){const _0x3ec317=_0x5c342f;VisuMZ[_0x3ec317(0xca2)][_0x3ec317(0x242)]['call'](this,_0x266bd7,_0x14ae46);if(!this[_0x3ec317(0x382)]()&&_0x266bd7&&_0x266bd7['result']()[_0x3ec317(0xce5)]>0x0){if('NChHc'!==_0x3ec317(0xd93)){const _0x3be0e5=_0x18fa10[_0x3ec317(0xc9d)](_0x2e908c[_0x3ec317(0x6e4)]/0x3),_0x3de4eb=_0x58ef2f[_0x3ec317(0x5c1)]((_0x34c936[_0x3ec317(0xba3)]-_0x3be0e5)/0x2),_0x3380ab=this[_0x3ec317(0x194)](),_0x13db9f=_0x3380ab['y'],_0x2cbbc3=_0x3380ab[_0x3ec317(0x880)];return new _0x476016(_0x3de4eb,_0x13db9f,_0x3be0e5,_0x2cbbc3);}else this[_0x3ec317(0xe39)]('MP',_0x266bd7,_0x266bd7['result']()[_0x3ec317(0xce5)]);}},Game_Action[_0x5c342f(0xca4)]['performLifeSteal']=function(_0x3cd3a5,_0x3e937c,_0x4918cc){const _0x5248b1=_0x5c342f;_0x3cd3a5=_0x3cd3a5[_0x5248b1(0xb34)]()[_0x5248b1(0xa5e)]();const _0x5bc3f0=this['lifeStealRate'](_0x3cd3a5,_0x3e937c);if(_0x5bc3f0<=0x0)return;const _0x34a3fa=Math['round'](_0x4918cc*_0x5bc3f0);if(_0x34a3fa<=0x0)return;let _0x993347=this[_0x5248b1(0xdda)]();if(this[_0x5248b1(0x60a)])_0x993347=this[_0x5248b1(0x60a)];const _0x4e7634=_0x3e937c['isNegativeLifeSteal'](_0x3cd3a5)?-0x1:0x1;if(_0x3cd3a5==='HP')_0x993347[_0x5248b1(0xda1)](_0x4e7634*_0x34a3fa);if(_0x3cd3a5==='MP')_0x993347[_0x5248b1(0xa1e)](_0x4e7634*_0x34a3fa);},Game_Action['prototype']['lifeStealRate']=function(_0x5ada2b,_0xb0fd5a){const _0x39bcc3=_0x5c342f;if(this[_0x39bcc3(0x4c6)](_0x5ada2b))return 0x0;if(this['subject']()[_0x39bcc3(0x375)](_0x5ada2b))return 0x0;if(_0xb0fd5a[_0x39bcc3(0xc79)](_0x5ada2b))return 0x0;let _0x42df12=0x0;return _0x42df12+=this[_0x39bcc3(0xa62)](_0x5ada2b),_0x42df12+=this['subject']()[_0x39bcc3(0xb2e)](_0x5ada2b,this[_0x39bcc3(0xa87)]()[_0x39bcc3(0xc80)]),_0x42df12[_0x39bcc3(0x3f8)](0x0,0x1);},Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x4c6)]=function(_0xd0cdbf){const _0x2c6705=_0x5c342f;_0xd0cdbf=_0xd0cdbf[_0x2c6705(0xb34)]()[_0x2c6705(0xa5e)]();const _0x4d3919=VisuMZ['BattleCore'][_0x2c6705(0xc5a)],_0x441e4b=this[_0x2c6705(0xa87)]()[_0x2c6705(0x340)]||'';if(_0x441e4b[_0x2c6705(0xcbd)](_0x4d3919['cancelLifeSteal']))return!![];if(_0xd0cdbf==='HP'&&_0x441e4b[_0x2c6705(0xcbd)](_0x4d3919[_0x2c6705(0xc1b)]))return!![];if(_0xd0cdbf==='MP'&&_0x441e4b[_0x2c6705(0xcbd)](_0x4d3919[_0x2c6705(0x1cf)]))return!![];return![];},Game_Action[_0x5c342f(0xca4)]['itemLifeStealRate']=function(_0x2e5bbe){const _0x1186eb=_0x5c342f,_0x5e00ab=VisuMZ[_0x1186eb(0xca2)][_0x1186eb(0xc5a)],_0x54762e=this[_0x1186eb(0xa87)]()[_0x1186eb(0x340)]||'';_0x2e5bbe=_0x2e5bbe[_0x1186eb(0xb34)]()[_0x1186eb(0xa5e)]();const _0x326a9b=_0x54762e[_0x1186eb(0xcbd)](_0x5e00ab['lifeSteaItem']);if(_0x326a9b)for(const _0x47f7dc of _0x326a9b){_0x47f7dc[_0x1186eb(0xcbd)](_0x5e00ab[_0x1186eb(0x21a)]);const _0x4babb4=String(RegExp['$1'])['toUpperCase']()[_0x1186eb(0xa5e)](),_0x4b2cb3=Number(RegExp['$2'])*0.01;if(_0x4babb4!==_0x2e5bbe)continue;return _0x4b2cb3;}return 0x0;},Game_BattlerBase['prototype'][_0x5c342f(0xb2e)]=function(_0x330cbc,_0x4f93ff){const _0x5cee27=_0x5c342f,_0x10a063=VisuMZ['BattleCore'][_0x5cee27(0xc5a)];let _0xc5225c=0x0;_0x330cbc=_0x330cbc[_0x5cee27(0xb34)]()[_0x5cee27(0xa5e)]();for(const _0x10c7a2 of this[_0x5cee27(0xd63)]()){if(!_0x10c7a2)continue;const _0xa6adf2=_0x10c7a2[_0x5cee27(0x340)]||'',_0x1cedb3=_0xa6adf2['match'](_0x10a063['lifeStealTrait']);if(_0x1cedb3)for(const _0x32eb1b of _0x1cedb3){if(_0x5cee27(0x5d4)!==_0x5cee27(0x9f8)){_0x32eb1b[_0x5cee27(0xcbd)](_0x10a063['lifeStealTrait']);const _0x35957c=String(RegExp['$1'])[_0x5cee27(0xb34)]()[_0x5cee27(0xa5e)](),_0x318e78=String(RegExp['$2']),_0x3090fb=Number(RegExp['$3'])*0.01;if(_0x35957c!==_0x330cbc)continue;if(_0x4f93ff===Game_Action['HITTYPE_CERTAIN']&&_0x318e78[_0x5cee27(0xcbd)](/CERTAIN/i))_0xc5225c+=_0x3090fb;else{if(_0x4f93ff===Game_Action[_0x5cee27(0xa1b)]&&_0x318e78[_0x5cee27(0xcbd)](/PHYS/i))_0xc5225c+=_0x3090fb;else{if(_0x4f93ff===Game_Action[_0x5cee27(0x1a1)]&&_0x318e78[_0x5cee27(0xcbd)](/MAGIC/i)){if('jTIdf'!==_0x5cee27(0xe10)){if(_0x4f7bc8['BattleCore'][_0x5cee27(0xc90)][_0x5cee27(0xb55)][_0x5cee27(0xd65)]){const _0x320363=_0x26c80e[_0x5cee27(0xa87)]();this[_0x5cee27(0x843)](_0x5cee27(0x22a),_0x147abe,[_0x57fa41],_0x320363['animationId']);}}else _0xc5225c+=_0x3090fb;}}}}else _0x840417[_0x5cee27(0xca4)]['onMoveEnd'][_0x5cee27(0xded)](this);}}return _0xc5225c;},Game_BattlerBase['prototype'][_0x5c342f(0x375)]=function(_0x34e9d4){const _0x1ea257=_0x5c342f;_0x34e9d4=_0x34e9d4[_0x1ea257(0xb34)]()[_0x1ea257(0xa5e)]();const _0x30af24=VisuMZ['BattleCore'][_0x1ea257(0xc5a)];for(const _0x537997 of this[_0x1ea257(0xd63)]()){if(!_0x537997)continue;const _0x1326ff=_0x537997[_0x1ea257(0x340)]||'';if(_0x1326ff[_0x1ea257(0xcbd)](_0x30af24['disarmLifeSteal']))return!![];if(_0x34e9d4==='HP'&&_0x1326ff['match'](_0x30af24[_0x1ea257(0xba0)]))return _0x1ea257(0xdea)!==_0x1ea257(0xa8e)?!![]:_0x51fb27['BattleCore']['Settings'][_0x1ea257(0x831)][_0x1ea257(0xbf5)]['call'](this);if(_0x34e9d4==='MP'&&_0x1326ff[_0x1ea257(0xcbd)](_0x30af24[_0x1ea257(0xd23)])){if(_0x1ea257(0x86a)!=='wVIkO')return!![];else _0x2e3be3=_0x354a3f(_0x180af5['$1']);}}return![];},Game_BattlerBase['prototype'][_0x5c342f(0x4f3)]=function(_0x3508e2){const _0x5ad6af=_0x5c342f;_0x3508e2=_0x3508e2[_0x5ad6af(0xb34)]()[_0x5ad6af(0xa5e)]();const _0x278b93=VisuMZ['BattleCore']['LifeStealRegExp'];for(const _0xadfe57 of this[_0x5ad6af(0xd63)]()){if(!_0xadfe57)continue;const _0x3d0f3f=_0xadfe57[_0x5ad6af(0x340)]||'';if(_0x3d0f3f[_0x5ad6af(0xcbd)](_0x278b93[_0x5ad6af(0x85e)])){if(_0x5ad6af(0xa1c)===_0x5ad6af(0xa1c))return!![];else{if(this['isForAnyone']())return!![];return![];}}if(_0x3508e2==='HP'&&_0x3d0f3f[_0x5ad6af(0xcbd)](_0x278b93['negativeHpLifeSteal'])){if('SoCjp'===_0x5ad6af(0x866))this[_0x5ad6af(0x832)]();else return!![];}if(_0x3508e2==='MP'&&_0x3d0f3f[_0x5ad6af(0xcbd)](_0x278b93[_0x5ad6af(0x231)]))return!![];}return![];},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0xc79)]=function(_0x5e7822){const _0x14f99b=_0x5c342f;_0x5e7822=_0x5e7822['toUpperCase']()['trim']();const _0xe46f58=VisuMZ[_0x14f99b(0xca2)]['LifeStealRegExp'];for(const _0x370d3c of this['traitObjects']()){if(!_0x370d3c)continue;const _0x3ea18d=_0x370d3c[_0x14f99b(0x340)]||'';if(_0x3ea18d[_0x14f99b(0xcbd)](_0xe46f58[_0x14f99b(0xc47)])){if(_0x14f99b(0x2c3)===_0x14f99b(0x2c3))return!![];else{const _0x44683b=_0x5d251b[_0x14f99b(0xc3f)]();if(_0x44683b)_0x44683b[_0x14f99b(0xcfa)](_0x14f99b(0x813));this['processOk']();}}if(_0x5e7822==='HP'&&_0x3ea18d[_0x14f99b(0xcbd)](_0xe46f58['guardHpLifeSteal'])){if(_0x14f99b(0xaa1)==='FjMms')return!![];else _0x170603[_0x14f99b(0xe29)][_0x14f99b(0x7b1)]=!![];}if(_0x5e7822==='MP'&&_0x3ea18d[_0x14f99b(0xcbd)](_0xe46f58[_0x14f99b(0xc15)]))return _0x14f99b(0x2ce)!=='stEaF'?!![]:_0x565ec8;}return![];},VisuMZ['BattleCore']['Game_BattlerBase_initMembers']=Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0xa41)],Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0xa41)]=function(){const _0x2d3b9f=_0x5c342f;VisuMZ[_0x2d3b9f(0xca2)][_0x2d3b9f(0x28e)][_0x2d3b9f(0xded)](this),this[_0x2d3b9f(0xd03)]();},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0xd03)]=function(){this['_immortal']=![];},VisuMZ[_0x5c342f(0xca2)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x4af)],Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x4af)]=function(){const _0x505d72=_0x5c342f;this[_0x505d72(0x4c7)]={},VisuMZ[_0x505d72(0xca2)][_0x505d72(0x78f)][_0x505d72(0xded)](this);},Game_BattlerBase['prototype']['checkCacheKey']=function(_0x26c7c6){const _0x29ff21=_0x5c342f;return this[_0x29ff21(0x4c7)]=this['_cache']||{},this['_cache'][_0x26c7c6]!==undefined;},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x4e3)]=function(){const _0xf8234a=_0x5c342f;if(this['_cache']['hardDamageCap']!==undefined)return this['_cache'][_0xf8234a(0x4e3)];const _0x2e13b2=/<DAMAGE CAP:[ ](\d+)>/i,_0x27d2a2=this['traitObjects']()[_0xf8234a(0xd08)](_0x5b54dc=>_0x5b54dc&&_0x5b54dc['note'][_0xf8234a(0xcbd)](_0x2e13b2)?Number(RegExp['$1']):0x0);let _0x24d39c=_0x27d2a2['length']>0x0?Math[_0xf8234a(0xaee)](..._0x27d2a2):0x0;if(_0x24d39c<=0x0)_0x24d39c=VisuMZ[_0xf8234a(0xca2)][_0xf8234a(0xc90)][_0xf8234a(0x603)][_0xf8234a(0x2e2)];return this['_cache'][_0xf8234a(0x4e3)]=_0x24d39c,this['_cache'][_0xf8234a(0x4e3)];},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x564)]=function(){const _0x457b2d=_0x5c342f;if(this[_0x457b2d(0x4c7)][_0x457b2d(0xac6)]!==undefined)return this['_cache'][_0x457b2d(0xac6)];let _0x36d039=VisuMZ[_0x457b2d(0xca2)][_0x457b2d(0xc90)][_0x457b2d(0x603)]['DefaultSoftCap'];const _0xaf6318=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4cd782=this[_0x457b2d(0xd63)]()[_0x457b2d(0xd08)](_0x309964=>_0x309964&&_0x309964[_0x457b2d(0x340)][_0x457b2d(0xcbd)](_0xaf6318)?Number(RegExp['$1'])/0x64:0x0);return _0x36d039=_0x4cd782[_0x457b2d(0x74c)]((_0x25a54f,_0x35f43a)=>_0x25a54f+_0x35f43a,_0x36d039),this[_0x457b2d(0x4c7)]['softDamageCap']=_0x36d039,this[_0x457b2d(0x4c7)][_0x457b2d(0xac6)][_0x457b2d(0x3f8)](0.01,0x1);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x1fa)]=Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x678)],Game_BattlerBase[_0x5c342f(0xca4)]['die']=function(){const _0xfebf74=_0x5c342f;VisuMZ[_0xfebf74(0xca2)][_0xfebf74(0x1fa)][_0xfebf74(0xded)](this),SceneManager[_0xfebf74(0x371)]()&&(this[_0xfebf74(0x92b)](_0xfebf74(0x59e)),this[_0xfebf74(0x3d3)]=undefined);},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x9d3)]=function(){const _0x55691b=_0x5c342f;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0x55691b(0x201)][_0x55691b(0x3ed)])return null;return SceneManager[_0x55691b(0x201)][_0x55691b(0x3ed)][_0x55691b(0xbdd)](this);},Game_BattlerBase['prototype'][_0x5c342f(0xa0b)]=function(){const _0x158355=_0x5c342f;return VisuMZ[_0x158355(0xca2)][_0x158355(0xc90)][_0x158355(0xe29)][_0x158355(0x90f)];},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x553)]=function(){const _0x593c8f=_0x5c342f;return VisuMZ[_0x593c8f(0xca2)]['Settings'][_0x593c8f(0xe29)][_0x593c8f(0xc71)];},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0xe3a)]=function(){const _0x2bc471=_0x5c342f;if(this[_0x2bc471(0x47b)]&&this[_0x2bc471(0x47b)]())return VisuMZ[_0x2bc471(0xca2)]['Settings'][_0x2bc471(0xe29)][_0x2bc471(0xcff)];else{if(_0x2bc471(0x421)!=='ETZgO')return VisuMZ[_0x2bc471(0xca2)][_0x2bc471(0xc90)][_0x2bc471(0x4f1)][_0x2bc471(0xcff)];else this[_0x2bc471(0x84a)]()?delete _0x4c2ca5[_0x2bc471(0xdc2)][_0x2bc471(0x1a9)]:_0x3747c6[_0x2bc471(0x286)](_0x2bc471(0x1a9),this[_0x2bc471(0x3c4)][_0x2bc471(0x5c9)](this));}},Game_BattlerBase[_0x5c342f(0xca4)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase['prototype']['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x5c342f(0xca4)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0xe05)]=function(_0x1dc9ad){const _0x3d0e74=_0x5c342f;if(!_0x1dc9ad)return 0x0;let _0x14ce73=0x0;const _0x34a895=_0x1dc9ad[_0x3d0e74(0x340)];return _0x34a895[_0x3d0e74(0xcbd)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x14ce73+=Number(RegExp['$1'])),_0x34a895[_0x3d0e74(0xcbd)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x14ce73+=Number(RegExp['$1'])),_0x14ce73;},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x657)]=function(_0x2ff4cb){const _0x19cba1=_0x5c342f;if(!_0x2ff4cb)return 0x0;let _0x189946=0x0;const _0x235879=_0x2ff4cb[_0x19cba1(0x340)];if(_0x235879[_0x19cba1(0xcbd)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x19cba1(0x958)!==_0x19cba1(0x328))_0x189946+=Number(RegExp['$1']);else{if(!_0x3adc26)return;if(!_0x136f84)return;if(!_0x25a703)return;const _0x2a0b2c=this['_action'];this[_0x19cba1(0x492)]=new _0x3c99fc(_0xce0be9);if(_0x5a508e[_0x19cba1(0x687)](_0x417064))this[_0x19cba1(0x492)][_0x19cba1(0x2ba)](_0x312959['id']);if(_0xf51d7[_0x19cba1(0x334)](_0x922d02))this[_0x19cba1(0x492)][_0x19cba1(0x5c6)](_0x2470eb['id']);if(this[_0x19cba1(0x492)][_0x19cba1(0xa87)]())_0x530c34[_0x19cba1(0x798)](_0x18d447,_0x348fd2);this[_0x19cba1(0x492)]=_0x2a0b2c;}}if(_0x235879['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('ZmmnQ'==='ZmmnQ')_0x189946+=Number(RegExp['$2']);else return!![];}return _0x189946;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x8bb)]=Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x356)],Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x356)]=function(_0x15bb17){const _0x3abc89=_0x5c342f;if(_0x15bb17===this[_0x3abc89(0xcd2)]()&&this[_0x3abc89(0x9e5)]()){if(_0x3abc89(0xdb6)===_0x3abc89(0x6cb))_0x5e0dad+=_0x5973e7[_0x3abc89(0x4f1)][_0x3abc89(0x6f0)]||0x0,_0x4071eb+=_0x5ed74d['Enemy'][_0x3abc89(0xdb0)]||0x0;else return!![];}return VisuMZ[_0x3abc89(0xca2)]['Game_BattlerBase_isStateResist']['call'](this,_0x15bb17);},Game_BattlerBase['prototype'][_0x5c342f(0x9e5)]=function(){const _0x3612e4=_0x5c342f;return this[_0x3612e4(0xdf4)];},Game_BattlerBase[_0x5c342f(0xca4)]['setImmortal']=function(_0xc4bdf){const _0x5357ae=_0x5c342f;_0xc4bdf?this[_0x5357ae(0x924)]():'pDYlO'!==_0x5357ae(0x5fc)?this[_0x5357ae(0x1b9)]():this['_currentActor']=null;},Game_BattlerBase[_0x5c342f(0xca4)]['addImmortal']=function(){const _0x231418=_0x5c342f;if(this[_0x231418(0x541)]())return;this['_immortal']=!![],this[_0x231418(0x442)]=![];},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x1b9)]=function(){const _0x1b0fb6=_0x5c342f,_0x34a457=this[_0x1b0fb6(0x920)]();this[_0x1b0fb6(0xdf4)]=![];if(_0x34a457&&this[_0x1b0fb6(0x442)]){if(_0x1b0fb6(0x927)===_0x1b0fb6(0xe2a)){if(!_0x3b0067['isSideView']())return;this[_0x1b0fb6(0x882)]=_0x57305e;const _0x48a2bd=this[_0x1b0fb6(0x9d3)]();if(_0x48a2bd)_0x48a2bd[_0x1b0fb6(0xd61)]();}else this[_0x1b0fb6(0x678)]();}this[_0x1b0fb6(0x442)]=![],this[_0x1b0fb6(0x4af)](),this['isDead']()&&_0x34a457&&('LQYml'===_0x1b0fb6(0x65c)?(this[_0x1b0fb6(0xa5f)]=_0x5bd3f5,this[_0x1b0fb6(0x6ef)]=_0x26794a,this[_0x1b0fb6(0x459)]=_0xdd26e9,this[_0x1b0fb6(0x76d)]=_0x9743b1,this[_0x1b0fb6(0x861)]=_0x31f7b2,_0x1227ef<=0x0&&this[_0x1b0fb6(0x543)]()):(this[_0x1b0fb6(0x5b6)](),this[_0x1b0fb6(0x1b2)]()));},VisuMZ['BattleCore'][_0x5c342f(0xa14)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x9c3)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x9c3)]=function(){const _0x3b71c1=_0x5c342f;return this[_0x3b71c1(0xa87)]()?VisuMZ[_0x3b71c1(0xca2)]['Game_Action_numRepeats'][_0x3b71c1(0xded)](this):_0x3b71c1(0xc06)!==_0x3b71c1(0xc06)?!![]:0x0;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xb51)]=Game_Action['prototype'][_0x5c342f(0x4a0)],Game_Action[_0x5c342f(0xca4)][_0x5c342f(0x4a0)]=function(){const _0x3bf690=_0x5c342f;this[_0x3bf690(0xdda)]()&&this['subject']()[_0x3bf690(0x856)]()?VisuMZ[_0x3bf690(0xca2)][_0x3bf690(0xb51)][_0x3bf690(0xded)](this):_0x3bf690(0x4bd)!==_0x3bf690(0xd30)?this[_0x3bf690(0xa52)]():(_0x25cc78+=_0x31c4d9,_0x297e9d+=_0x307d99['isActor']()?-_0x5ef9ee:_0x4570aa);},VisuMZ[_0x5c342f(0xca2)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x856)],Game_BattlerBase['prototype'][_0x5c342f(0x856)]=function(){const _0x287014=_0x5c342f;if(!this[_0x287014(0x6b2)]())return![];return VisuMZ['BattleCore']['Game_BattlerBase_canAttack']['call'](this);},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x6b2)]=function(){const _0x16d33e=_0x5c342f;for(const _0x119e75 of this[_0x16d33e(0xd63)]()){if(!_0x119e75)continue;if(_0x119e75['note']['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x9fa)]=Game_Action[_0x5c342f(0xca4)][_0x5c342f(0xc01)],Game_Action[_0x5c342f(0xca4)]['setGuard']=function(){const _0x1b889b=_0x5c342f;this['subject']()[_0x1b889b(0xbce)]()&&VisuMZ[_0x1b889b(0xca2)][_0x1b889b(0x9fa)][_0x1b889b(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xcd5)]=Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0xbce)],Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0xbce)]=function(){const _0x4af532=_0x5c342f;if(!this[_0x4af532(0x9a4)]())return![];return VisuMZ[_0x4af532(0xca2)][_0x4af532(0xcd5)][_0x4af532(0xded)](this);},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x9a4)]=function(){const _0x3296dd=_0x5c342f;for(const _0x5d0b6e of this['traitObjects']()){if(!_0x5d0b6e)continue;if(_0x5d0b6e[_0x3296dd(0x340)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x3be)]=function(){const _0x41391e=_0x5c342f;for(const _0x58780f of this[_0x41391e(0xd63)]()){if(_0x41391e(0xd45)!==_0x41391e(0xd45)){if(!_0x5ae09f['isSceneBattle']())return;_0x40d030['ConvertParams'](_0x4ffc5d,_0x28130d);const _0xf07aa0=_0xe020c1[_0x41391e(0x175)](_0x22a237[_0x41391e(0xd1d)]);if(_0xf07aa0<=0x0)return;const _0x255f27=_0x249149['getLastPluginCommandInterpreter'](),_0xe020c1=_0x5acc0f['_subject'],_0x4b77f0=_0x2a8393[_0x41391e(0x432)](_0x1a8836['Targets']),_0x1e43b4=_0x28a727[_0x41391e(0x6b9)],_0x562d7c=_0x49ca2e[_0x41391e(0x56f)];if(!_0x255f27||!_0xe020c1)return;_0x27eae4[_0x41391e(0x299)](_0x4b77f0,_0xf07aa0,_0x1e43b4),_0x12bf9c['WaitForAnimation']&&_0x255f27[_0x41391e(0x430)](_0x41391e(0xbfb));}else{if(!_0x58780f)continue;if(_0x58780f['note'][_0x41391e(0xcbd)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}}return!![];},VisuMZ[_0x5c342f(0xca2)]['Game_BattlerBase_meetsUsableItemConditions']=Game_BattlerBase[_0x5c342f(0xca4)]['meetsUsableItemConditions'],Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x3a1)]=function(_0x36ba63){const _0x197056=_0x5c342f;if(_0x36ba63&&_0x36ba63[_0x197056(0x340)][_0x197056(0xcbd)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x197056(0x3f6)===_0x197056(0x3f6)){const _0x263224=this[_0x197056(0xab5)]()[_0x197056(0x4e9)]();if(_0x263224['length']===0x1&&_0x263224[0x0]===this)return![];}else _0x91ff66['wtypeId']=_0x594389[_0x197056(0xb0a)](_0x3ee192['$1']);}return VisuMZ[_0x197056(0xca2)]['Game_BattlerBase_meetsUsableItemConditions']['call'](this,_0x36ba63);},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x539)]=function(){const _0xc2ed7b=_0x5c342f;return VisuMZ[_0xc2ed7b(0xca2)][_0xc2ed7b(0xc90)][_0xc2ed7b(0x535)][_0xc2ed7b(0x28c)];},VisuMZ['BattleCore']['Game_Battler_regenerateAll']=Game_Battler['prototype'][_0x5c342f(0x219)],Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x219)]=function(){const _0x3a7b73=_0x5c342f;if(SceneManager['isSceneBattle']()){if(BattleManager['isTpb']()){if(_0x3a7b73(0x789)===_0x3a7b73(0x789)){if(this[_0x3a7b73(0x89a)]()<=0x0)return;}else this[_0x3a7b73(0x475)]['_stateSprite'][_0x3a7b73(0x339)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x3a7b73(0x475)][_0x3a7b73(0x604)][_0x3a7b73(0x339)]['y']=0x1/(this[_0x3a7b73(0x339)]['y']||0.001);}else{if($gameTroop['turnCount']()<=0x0){if(_0x3a7b73(0x78e)!==_0x3a7b73(0x839))return;else{const _0x481869=this[_0x3a7b73(0x7a3)](this[_0x3a7b73(0x759)]);this[_0x3a7b73(0x619)](this[_0x3a7b73(0x811)],_0x481869),this[_0x3a7b73(0xab6)]();}}}}if(SceneManager[_0x3a7b73(0x371)]()&&BattleManager[_0x3a7b73(0x84f)]()&&this[_0x3a7b73(0x751)]===Graphics['frameCount'])return;this[_0x3a7b73(0x751)]=Graphics['frameCount'];if(SceneManager[_0x3a7b73(0x371)]()){if('lbDgA'!==_0x3a7b73(0x708))this['processBattleCoreJS'](_0x3a7b73(0x557));else return this[_0x3a7b73(0x525)];}VisuMZ['BattleCore'][_0x3a7b73(0xdad)][_0x3a7b73(0xded)](this),SceneManager[_0x3a7b73(0x371)]()&&(_0x3a7b73(0xacb)===_0x3a7b73(0xacb)?(this['regenerateAllBattleCore'](),this[_0x3a7b73(0x6d1)](_0x3a7b73(0xd58))):(_0x8fac18['BattleCore'][_0x3a7b73(0x4ee)]['call'](this),this[_0x3a7b73(0x465)]&&(this[_0x3a7b73(0x69d)](),this[_0x3a7b73(0x57d)]())));},Game_Battler[_0x5c342f(0xca4)]['regenerateAllBattleCore']=function(){const _0x4533da=_0x5c342f;if(SceneManager['isSceneBattle']()){if(_0x4533da(0x7ae)!==_0x4533da(0x7ae)){if(_0x2b1e34['_battler']['isActor']()&&_0x33e82e[_0x4533da(0xca5)]['isEnemy']())return 0x1;else{if(_0x9daa87[_0x4533da(0xca5)][_0x4533da(0x47b)]()&&_0xc8808d[_0x4533da(0xca5)][_0x4533da(0x796)]())return-0x1;}}else for(const _0x1f4196 of this[_0x4533da(0xd63)]()){if(!_0x1f4196)continue;this[_0x4533da(0xdd7)](_0x1f4196);}}},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0xdd7)]=function(_0x5892b9){const _0x1241f5=_0x5c342f;if(!Imported[_0x1241f5(0xad9)])return;if(!SceneManager[_0x1241f5(0x371)]())return;if(this[_0x1241f5(0x541)]())return;if(this[_0x1241f5(0xadc)]())return;if(_0x5892b9[_0x1241f5(0x340)][_0x1241f5(0xcbd)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x2bf059=Number(RegExp['$1']);$gameTemp[_0x1241f5(0x434)]([this],_0x2bf059,![],![]);}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x9b6)]=Game_Battler[_0x5c342f(0xca4)]['startTpbTurn'],Game_Battler['prototype'][_0x5c342f(0xc3a)]=function(){const _0x808faa=_0x5c342f;this[_0x808faa(0x6d1)](_0x808faa(0xb9e)),VisuMZ[_0x808faa(0xca2)][_0x808faa(0x9b6)][_0x808faa(0xded)](this),this[_0x808faa(0x6d1)](_0x808faa(0xc6d));},VisuMZ[_0x5c342f(0xca2)]['Game_Battler_onTurnEnd']=Game_Battler[_0x5c342f(0xca4)]['onTurnEnd'],Game_Battler['prototype'][_0x5c342f(0x5ce)]=function(){const _0x5de5b0=_0x5c342f;this[_0x5de5b0(0x6d1)]('PreEndTurnJS'),VisuMZ[_0x5de5b0(0xca2)][_0x5de5b0(0x39a)]['call'](this),VisuMZ[_0x5de5b0(0xca2)][_0x5de5b0(0xc90)][_0x5de5b0(0x535)][_0x5de5b0(0xc49)]&&(_0x5de5b0(0xdb3)==='vjfHW'?this[_0x5de5b0(0x991)]():this[_0x5de5b0(0x440)]['addChild'](_0x4759e9)),this[_0x5de5b0(0x6d1)](_0x5de5b0(0x649));},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x6d1)]=function(_0x1d53f8){const _0xd3c77d=_0x5c342f;if(this[_0xd3c77d(0xc56)]||this[_0xd3c77d(0x50b)])return;const _0x300e92=VisuMZ['BattleCore'][_0xd3c77d(0xc90)][_0xd3c77d(0x535)];if(_0x300e92[_0x1d53f8])_0x300e92[_0x1d53f8][_0xd3c77d(0xded)](this);for(const _0x544eea of this[_0xd3c77d(0xd63)]()){if(!_0x544eea)continue;key=VisuMZ[_0xd3c77d(0xca2)][_0xd3c77d(0xdd1)](_0x544eea,_0x1d53f8),VisuMZ[_0xd3c77d(0xca2)]['JS'][key]&&(_0xd3c77d(0x5ec)!=='wMMtt'?(_0x4e209f['BattleCore']['Game_Action_setSubject'][_0xd3c77d(0xded)](this,_0x2aab3b),this[_0xd3c77d(0x589)]()):VisuMZ[_0xd3c77d(0xca2)]['JS'][key][_0xd3c77d(0xded)](this,this,this,_0x544eea,0x0));}},Game_Battler['prototype'][_0x5c342f(0x1a7)]=function(){const _0x4f9b0e=_0x5c342f;return VisuMZ['BattleCore'][_0x4f9b0e(0xc90)]['Actor']['ChantStyle']||![];},Game_Battler[_0x5c342f(0xca4)]['isChanting']=function(){const _0x53f678=_0x5c342f;if(this['isWaiting']()){if(_0x53f678(0xb16)!==_0x53f678(0x44c)){if(this[_0x53f678(0x1a7)]()){if(_0x53f678(0x22e)===_0x53f678(0x22e)){if(this[_0x53f678(0xe1d)][_0x53f678(0x967)](_0x22c370=>_0x22c370[_0x53f678(0xa87)]()&&_0x22c370['isMagical']()))return!![];}else return _0x29c437[_0x53f678(0xca2)][_0x53f678(0xc90)][_0x53f678(0x831)]['MessageWait'];}else{if(_0x53f678(0x756)!==_0x53f678(0x756))return![];else{if(this['_actions']['some'](_0x2717dd=>_0x2717dd[_0x53f678(0xa87)]()&&_0x2717dd['isMagicSkill']()))return!![];}}}else this[_0x53f678(0x1e1)]['x']=-this[_0x53f678(0x1e1)][_0x53f678(0x6e4)]-0x4;}if(BattleManager[_0x53f678(0x84f)]()&&this['_tpbState']===_0x53f678(0xb96)){if(this['chantStyle']()){if(_0x53f678(0x21e)==='DQZle')return this[_0x53f678(0x6cf)]()&&this['currentAction']()[_0x53f678(0xa87)]()&&this['currentAction']()[_0x53f678(0xa5c)]();else{const _0x2569be=this[_0x53f678(0x5b7)](),_0x46af81=_0x55bf9a['BattleCore']['Settings']['PartyCmd'][_0x53f678(0x86d)],_0x223d5f=_0x2569be===_0x53f678(0x911)?_0x4f54a4['autoBattle']:_0x53f678(0x973)[_0x53f678(0x266)](_0x46af81,_0x3d06f6['autoBattle']),_0x56ec1d=this[_0x53f678(0x1cc)]();this[_0x53f678(0xb75)](_0x223d5f,'autoBattle',_0x56ec1d);}}else return this[_0x53f678(0x6cf)]()&&this['currentAction']()[_0x53f678(0xa87)]()&&this['currentAction']()[_0x53f678(0x58d)]();}return![];},Game_Battler['prototype'][_0x5c342f(0x98e)]=function(){const _0x510e99=_0x5c342f;if(BattleManager[_0x510e99(0x84f)]()&&this['_tpbState']===_0x510e99(0xb96)){if(_0x510e99(0x3a6)!=='uOGrR')return this[_0x510e99(0x1a7)]()?this[_0x510e99(0x6cf)]()&&this[_0x510e99(0x6cf)]()['item']()&&!this[_0x510e99(0x6cf)]()[_0x510e99(0xa5c)]():_0x510e99(0x617)!==_0x510e99(0x617)?this[_0x510e99(0xd51)]():this[_0x510e99(0x6cf)]()&&this['currentAction']()[_0x510e99(0xa87)]()&&!this[_0x510e99(0x6cf)]()[_0x510e99(0x58d)]();else{_0xf51fbc=_0x594718||0x1,_0x36b5fd--;const _0x3b1905=this[_0x510e99(0xe3b)](),_0x59b638=_0x3b1905[_0x2a6be4]?_0x3b1905[_0x23b08b][_0x510e99(0x989)]:0x0;return _0x274424[_0x510e99(0xb5c)][_0x59b638];}}return![];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x316)]=Game_Battler['prototype'][_0x5c342f(0xb3c)],Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0xb3c)]=function(){const _0x6ef611=_0x5c342f;VisuMZ[_0x6ef611(0xca2)][_0x6ef611(0x316)][_0x6ef611(0xded)](this),this['_damagePopupArray']=[];},Game_Battler['prototype'][_0x5c342f(0x2b6)]=function(){const _0x4c7a05=_0x5c342f;if(!this[_0x4c7a05(0x8c2)])this['clearDamagePopup']();return this[_0x4c7a05(0x8c2)]['length']>0x0;},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0xc61)]=function(){const _0x1c1e47=_0x5c342f;if(!SceneManager[_0x1c1e47(0x371)]())return;if(BattleManager[_0x1c1e47(0x49b)]())return;if(!this[_0x1c1e47(0x8c2)])this[_0x1c1e47(0xb3c)]();this[_0x1c1e47(0xce7)]();const _0x3d59df=this[_0x1c1e47(0x9d3)]();if(_0x3d59df)_0x3d59df[_0x1c1e47(0x562)]();},Game_Battler['prototype'][_0x5c342f(0xce7)]=function(){const _0x1bf6e1=_0x5c342f,_0x4454b8=this['result']();if(_0x4454b8[_0x1bf6e1(0x845)]||_0x4454b8[_0x1bf6e1(0xdfe)]){const _0x4f99ee=JsonEx[_0x1bf6e1(0x388)](_0x4454b8);_0x4f99ee['hpAffected']=![],_0x4f99ee[_0x1bf6e1(0xce5)]=0x0,this['_damagePopupArray']['push'](_0x4f99ee);}if(_0x4454b8[_0x1bf6e1(0xca0)]){if('nfMiq'===_0x1bf6e1(0x5fe)){const _0x1a8f41=JsonEx['makeDeepCopy'](_0x4454b8);_0x1a8f41[_0x1bf6e1(0x845)]=![],_0x1a8f41[_0x1bf6e1(0xdfe)]=![],_0x1a8f41[_0x1bf6e1(0xce5)]=0x0,this[_0x1bf6e1(0x8c2)][_0x1bf6e1(0x843)](_0x1a8f41);}else this[_0x1bf6e1(0x9bc)]='';}if(_0x4454b8[_0x1bf6e1(0xce5)]!==0x0){if(_0x1bf6e1(0x69c)!==_0x1bf6e1(0x69c))this['_skillWindow']['open'](),this[_0x1bf6e1(0x62b)]['active']&&this[_0x1bf6e1(0x62b)][_0x1bf6e1(0x828)](),this[_0x1bf6e1(0xd5d)][_0x1bf6e1(0x3bd)](),this[_0x1bf6e1(0xd5d)][_0x1bf6e1(0x344)]&&this['_itemWindow'][_0x1bf6e1(0x828)]();else{const _0x13ae69=JsonEx[_0x1bf6e1(0x388)](_0x4454b8);_0x13ae69[_0x1bf6e1(0x845)]=![],_0x13ae69[_0x1bf6e1(0xdfe)]=![],_0x13ae69['hpAffected']=![],this[_0x1bf6e1(0x8c2)][_0x1bf6e1(0x843)](_0x13ae69);}}},Game_Battler['prototype'][_0x5c342f(0x1d0)]=function(){const _0x1c6e22=_0x5c342f;if(!this[_0x1c6e22(0x8c2)])this[_0x1c6e22(0xb3c)]();if(VisuMZ[_0x1c6e22(0xca2)]['Settings']['Damage'][_0x1c6e22(0x9ea)]){if(_0x1c6e22(0x5b0)!==_0x1c6e22(0x79a))return this[_0x1c6e22(0x8c2)][_0x1c6e22(0x728)]();else{_0x555e6d('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x441e3e[_0x1c6e22(0x549)]();return;}}else return this[_0x1c6e22(0x8c2)][_0x1c6e22(0xbb2)]();},Game_Battler[_0x5c342f(0xca4)]['setupTextPopup']=function(_0x4ec831,_0x1ad29f){const _0x127a59=_0x5c342f;if(!SceneManager[_0x127a59(0x371)]())return;if(BattleManager[_0x127a59(0x49b)]())return;if(!this['battler']())return;if(_0x4ec831['length']<=0x0)return;_0x1ad29f=_0x1ad29f||{},_0x1ad29f[_0x127a59(0xcba)]=_0x1ad29f[_0x127a59(0xcba)]||_0x127a59(0xc6f),_0x1ad29f['flashColor']=_0x1ad29f[_0x127a59(0x519)]||[0x0,0x0,0x0,0x0],_0x1ad29f[_0x127a59(0xd28)]=_0x1ad29f[_0x127a59(0xd28)]||0x0,this[_0x127a59(0x9d3)]()[_0x127a59(0x84b)](_0x4ec831,_0x1ad29f);},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x73b)]=function(_0x1f5d5e,_0x26537a,_0x4e5349){const _0x5a8392=_0x5c342f;if(!SceneManager[_0x5a8392(0x371)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x5a8392(0x9d3)]())return;if(_0x26537a['length']<=0x0)return;_0x4e5349=_0x4e5349||{},_0x4e5349['textColor']=_0x4e5349[_0x5a8392(0xcba)]||'#ffffff',_0x4e5349[_0x5a8392(0x519)]=_0x4e5349['flashColor']||[0x0,0x0,0x0,0x0],_0x4e5349[_0x5a8392(0xd28)]=_0x4e5349[_0x5a8392(0xd28)]||0x0,this['battler']()[_0x5a8392(0x73b)](_0x1f5d5e,_0x26537a,_0x4e5349);},Game_Battler[_0x5c342f(0xca4)]['notFocusValid']=function(){const _0x517414=_0x5c342f;if(this[_0x517414(0xadc)]())return![];if(this[_0x517414(0x920)]()&&this['isAppeared']())return!![];if(this[_0x517414(0x796)]()&&this[_0x517414(0x1ab)]()){if(this[_0x517414(0x541)]()&&this['allowCollapse']())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x750)]=Game_Battler[_0x5c342f(0xca4)]['clearMotion'],Game_Battler[_0x5c342f(0xca4)]['clearMotion']=function(){const _0x5ec451=_0x5c342f;VisuMZ[_0x5ec451(0xca2)][_0x5ec451(0x750)][_0x5ec451(0xded)](this),this[_0x5ec451(0x1b8)]();},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x1db)]=function(){return!![];},Game_Battler['prototype'][_0x5c342f(0x902)]=function(){return![];},VisuMZ[_0x5c342f(0xca2)]['Game_Battler_onBattleStart']=Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x7dc)],Game_Battler['prototype'][_0x5c342f(0x7dc)]=function(_0x3057f8){const _0x24139a=_0x5c342f;VisuMZ[_0x24139a(0xca2)][_0x24139a(0x6ee)][_0x24139a(0xded)](this,_0x3057f8),this[_0x24139a(0xbe3)](_0x3057f8),this[_0x24139a(0xb3c)]();},Game_Battler['prototype'][_0x5c342f(0xbe3)]=function(_0x21a47a){const _0x46f4e9=_0x5c342f;this[_0x46f4e9(0x933)](![]),this[_0x46f4e9(0x755)]=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x5c342f(0xca2)]['Game_Battler_onBattleEnd']=Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0xa05)],Game_Battler['prototype'][_0x5c342f(0xa05)]=function(){const _0x29b684=_0x5c342f;VisuMZ[_0x29b684(0xca2)][_0x29b684(0x61a)][_0x29b684(0xded)](this),this['onBattleEndBattleCore']();},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x6f4)]=function(){const _0x3c4ea0=_0x5c342f;this['_forcedHomeX']=undefined,this[_0x3c4ea0(0x953)]=undefined;},VisuMZ['BattleCore']['Game_Battler_performActionStart']=Game_Battler['prototype'][_0x5c342f(0x551)],Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x551)]=function(_0x4cc721){const _0x1e328b=_0x5c342f;VisuMZ[_0x1e328b(0xca2)][_0x1e328b(0x599)][_0x1e328b(0xded)](this,_0x4cc721);if(!_0x4cc721[_0x1e328b(0x9d0)]()){const _0x33828c=this['battler']();_0x33828c&&(_0x1e328b(0x1ef)==='lAZpS'?_0x33828c['stepForward']():this[_0x1e328b(0x3d3)]=!![]);}this[_0x1e328b(0x933)](![]);},Game_Battler[_0x5c342f(0xca4)]['performActionEndMembers']=function(){const _0x2cc02b=_0x5c342f,_0x15caa9=this[_0x2cc02b(0xd80)];this[_0x2cc02b(0xd80)]=![];if(BattleManager[_0x2cc02b(0x7a6)]()&&this[_0x2cc02b(0xa83)]()){const _0x57ba41=this[_0x2cc02b(0x9d3)]();if(_0x57ba41&&_0x15caa9)_0x57ba41[_0x2cc02b(0x632)]();return;}const _0x4cf5bb=this[_0x2cc02b(0x9d3)]();if(_0x4cf5bb)_0x4cf5bb['stepBack']();this[_0x2cc02b(0x933)](![]),this[_0x2cc02b(0x1b2)]();},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x93b)]=function(_0x11eece){const _0xe5a3eb=_0x5c342f;if(_0x11eece[_0xe5a3eb(0xc73)]())this[_0xe5a3eb(0xe23)]();else{if(_0x11eece[_0xe5a3eb(0x9d0)]())this[_0xe5a3eb(0x92b)](_0xe5a3eb(0xc98));else{if(_0x11eece['isMagical']())this[_0xe5a3eb(0x92b)](_0xe5a3eb(0x2eb));else{if(_0x11eece['isSkill']()){if(_0xe5a3eb(0x4ac)===_0xe5a3eb(0x4ac))[0x1,0x2,0x5,0x6]['includes'](_0x11eece[_0xe5a3eb(0xa87)]()[_0xe5a3eb(0x8f5)][_0xe5a3eb(0xb48)])?this[_0xe5a3eb(0xe23)]():this['requestMotion'](_0xe5a3eb(0x802));else return this[_0xe5a3eb(0x67b)]();}else _0x11eece[_0xe5a3eb(0x687)]()&&this[_0xe5a3eb(0x92b)](_0xe5a3eb(0xa87));}}}},Game_Battler['prototype'][_0x5c342f(0x1d4)]=function(){const _0x198d94=_0x5c342f;return $dataSystem[_0x198d94(0xb5c)][0x0];},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x53e)]=function(){const _0x7e6015=_0x5c342f,_0x2348fd=this[_0x7e6015(0x1d4)]();return _0x2348fd?_0x2348fd[_0x7e6015(0xb4f)]:0x0;},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x330)]=function(_0x5a38f2){const _0x7f2598=_0x5c342f;if(!$gameSystem['isSideView']())return;const _0x19d908=this[_0x7f2598(0x9d3)](),_0x5c5252=_0x5a38f2[_0x7f2598(0x9d3)]();if(!_0x19d908||!_0x5c5252)return;const _0x59036d=_0x5c5252[_0x7f2598(0xda2)],_0x37df55=_0x5c5252[_0x7f2598(0x256)];this[_0x7f2598(0x28f)](_0x59036d,_0x37df55,0x0,![],_0x7f2598(0x7bc),-0x1),_0x19d908['updatePosition']();const _0x4b62e8=VisuMZ[_0x7f2598(0xca2)][_0x7f2598(0xc90)][_0x7f2598(0xb55)];let _0x12100e=(_0x5c5252['width']+_0x19d908[_0x7f2598(0x6e4)])/0x2;_0x12100e*=this[_0x7f2598(0x47b)]()?0x1:-0x1;let _0x3ac41a=_0x4b62e8['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0x5a38f2['moveBattlerDistance'](_0x12100e,_0x3ac41a,0x0,![],_0x7f2598(0x7bc)),_0x5c5252[_0x7f2598(0xb40)]();},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x92b)]=function(_0x1e6fae){const _0x2b4383=_0x5c342f;if(SceneManager['isSceneBattle']()){if(_0x2b4383(0x423)!==_0x2b4383(0xdbf)){const _0xda24a4=this[_0x2b4383(0x9d3)]();_0xda24a4&&(_0xda24a4[_0x2b4383(0x68a)](_0x1e6fae),[_0x2b4383(0x774),'thrust','missile'][_0x2b4383(0xaec)](_0x1e6fae)&&(_0x2b4383(0x9c1)===_0x2b4383(0x9f2)?this[_0x2b4383(0xb30)](_0x44648e,_0x112d0d['x'],_0x5c9c31['y'],_0x3ddfe8):this[_0x2b4383(0x1cd)]()));}else this['addFightCommand'](),this[_0x2b4383(0x2c4)](),this[_0x2b4383(0x80b)](),this['addOptionsCommand'](),this[_0x2b4383(0x6f2)]();}this[_0x2b4383(0x1b8)]();},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x1cd)]=function(){},Game_Battler[_0x5c342f(0xca4)]['startWeaponAnimation']=function(_0x13764f){const _0x45202a=_0x5c342f;if(SceneManager[_0x45202a(0x371)]()){const _0x218a0c=this[_0x45202a(0x9d3)]();if(_0x218a0c)_0x218a0c['forceWeaponAnimation'](_0x13764f);}},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x2e0)]=function(){const _0x1034f9=_0x5c342f;if(SceneManager['isSceneBattle']()){if('dyLhM'!==_0x1034f9(0x42b)){const _0x6990e8=this['getAttackWeaponAnimationId']();this[_0x1034f9(0x69f)](_0x6990e8);}else this[_0x1034f9(0x251)](_0x249589,_0x424c9d);}},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x96e)]=function(_0x26e9b8,_0x2a4792){const _0x599e37=_0x5c342f;if(!_0x26e9b8)return;if(!_0x26e9b8[_0x599e37(0xa87)]())return;if(_0x26e9b8[_0x599e37(0xc73)]())return;if(_0x26e9b8[_0x599e37(0x9d0)]())return;if(_0x26e9b8['isItem']())return;if($gameTemp[_0x599e37(0x29d)])return;let _0x2de0b7=0x0;const _0x4ed312=VisuMZ[_0x599e37(0xca2)][_0x599e37(0xc90)][_0x599e37(0xb55)],_0x11ab8a=_0x26e9b8['item']()[_0x599e37(0x340)];if(_0x11ab8a[_0x599e37(0xcbd)](/<CAST ANIMATION: (\d+)>/i))_0x599e37(0x62a)===_0x599e37(0xdd5)?_0x307d6b[_0x599e37(0x812)]=_0xab520a[_0x599e37(0x429)](_0x5bc7ce):_0x2de0b7=Number(RegExp['$1']);else{if(_0x11ab8a[_0x599e37(0xcbd)](/<NO CAST ANIMATION>/i))return;else{if(_0x26e9b8[_0x599e37(0xd5b)]())_0x2de0b7=_0x4ed312[_0x599e37(0xdc1)];else{if(_0x26e9b8[_0x599e37(0x5f9)]())_0x2de0b7=_0x4ed312[_0x599e37(0x2d4)];else _0x26e9b8[_0x599e37(0xa5c)]()&&(_0x2de0b7=_0x4ed312[_0x599e37(0xa33)]);}}}_0x2de0b7>0x0&&$gameTemp[_0x599e37(0x299)]([this],_0x2de0b7,!!_0x2a4792);},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x8d5)]=function(){const _0x3acd6d=_0x5c342f;SoundManager[_0x3acd6d(0x298)]();let _0x3dda9d=VisuMZ['BattleCore'][_0x3acd6d(0xc90)]['ActionSequence'][_0x3acd6d(0xb01)];if(_0x3dda9d>0x0){if(Imported['VisuMZ_0_CoreEngine']){if(_0x3acd6d(0x82d)!=='usQeE')$gameTemp[_0x3acd6d(0x434)]([this],_0x3dda9d);else return _0x32e868[_0x3acd6d(0xca2)][_0x3acd6d(0x8a1)]['call'](this);}else'GNqtk'===_0x3acd6d(0x5d1)?(_0x495aaa['_deathStateApplied']=!![],this[_0x3acd6d(0xc23)](_0x3f09bb)):$gameTemp[_0x3acd6d(0x299)]([this],_0x3dda9d);}},Game_Battler['prototype'][_0x5c342f(0x6e6)]=function(){const _0x163cdd=_0x5c342f;if(!$gameSystem[_0x163cdd(0x9a3)]())return![];if(!BattleManager[_0x163cdd(0x7a6)]())return![];if(!this[_0x163cdd(0x920)]())return![];if(this[_0x163cdd(0xa83)]())return!![];if(this[_0x163cdd(0x57a)]())return!![];if(this[_0x163cdd(0x3f5)]>=0x1)return!![];return![];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x87b)]=Game_Battler['prototype']['performDamage'],Game_Battler[_0x5c342f(0xca4)]['performDamage']=function(){const _0x4c4a71=_0x5c342f;this['isActiveTpbReady']()&&(this[_0x4c4a71(0x3d3)]=!![]),VisuMZ[_0x4c4a71(0xca2)][_0x4c4a71(0x87b)][_0x4c4a71(0xded)](this),this[_0x4c4a71(0xb35)](),this[_0x4c4a71(0xcc5)]();},VisuMZ[_0x5c342f(0xca2)]['Game_Battler_performMiss']=Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x380)],Game_Battler['prototype']['performMiss']=function(){const _0x41c7c6=_0x5c342f;this[_0x41c7c6(0x6e6)]()&&(this[_0x41c7c6(0x3d3)]=!![]),VisuMZ['BattleCore'][_0x41c7c6(0x946)][_0x41c7c6(0xded)](this),this[_0x41c7c6(0xb35)]();},VisuMZ['BattleCore'][_0x5c342f(0x572)]=Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x22c)],Game_Battler['prototype'][_0x5c342f(0x22c)]=function(){const _0x5463b6=_0x5c342f;if(this[_0x5463b6(0x6e6)]()){if(_0x5463b6(0xcc4)==='gpSDk')this[_0x5463b6(0x3d3)]=!![];else return this[_0x5463b6(0xe0a)]('DTB');}VisuMZ[_0x5463b6(0xca2)][_0x5463b6(0x572)][_0x5463b6(0xded)](this),this['performFlinch']();},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0xb35)]=function(){const _0x357e9a=_0x5c342f;if(!$gameSystem[_0x357e9a(0x9a3)]())return;if(this['_flinched'])return;this[_0x357e9a(0xd80)]=!![];const _0x4471f7=this[_0x357e9a(0x9d3)]();if(_0x4471f7)_0x4471f7['stepFlinch']();},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0xcc5)]=function(){const _0x5a9f21=_0x5c342f;if(!this[_0x5a9f21(0x1db)]())return;const _0x344079=VisuMZ[_0x5a9f21(0xca2)]['Settings'][_0x5a9f21(0xe29)];if(!(_0x344079['ShakeFlinch']??![]))return;if(this[_0x5a9f21(0x99b)]<=0x0)return;const _0x597ef1=this[_0x5a9f21(0x9d3)]();if(_0x597ef1){const _0x3d0626=this['_lastHpDamage'],_0x51436c=(_0x3d0626/this[_0x5a9f21(0x392)])[_0x5a9f21(0x3f8)](0.8,0x1),_0x2a74c2=_0x344079[_0x5a9f21(0xd2d)]??0x30,_0x5bf56a=_0x51436c*_0x2a74c2;_0x597ef1[_0x5a9f21(0xac1)](_0x5bf56a,_0x51436c);}},Game_Battler[_0x5c342f(0xca4)]['requestMotionRefresh']=function(){const _0x4b3f9c=_0x5c342f;if(this['isDead']()&&this[_0x4b3f9c(0xa2e)]!==_0x4b3f9c(0x59e)){this[_0x4b3f9c(0x92b)](_0x4b3f9c(0x59e));return;}if(this[_0x4b3f9c(0x541)]()&&this[_0x4b3f9c(0xa2e)]==='dead')return;if(!!this[_0x4b3f9c(0x499)])return;if(this[_0x4b3f9c(0x796)]()){if(!this[_0x4b3f9c(0x741)]()&&this!==BattleManager['_subject']){if(this[_0x4b3f9c(0x9d3)]())this[_0x4b3f9c(0x9d3)]()['refreshMotion']();}this[_0x4b3f9c(0x1b8)]();return;}if(this[_0x4b3f9c(0xa2e)]==='victory')return;if(this[_0x4b3f9c(0xa2e)]===_0x4b3f9c(0xa5a)&&!BattleManager[_0x4b3f9c(0xa83)]())return;if(this[_0x4b3f9c(0xa2e)]==='guard'&&!BattleManager[_0x4b3f9c(0xa83)]())return;this[_0x4b3f9c(0x6ca)]();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x4b3f9c(0x52b)])return;if(this[_0x4b3f9c(0x9d3)]()&&BattleManager[_0x4b3f9c(0xa83)]()){if(_0x4b3f9c(0x191)!==_0x4b3f9c(0x725)){this['battler']()[_0x4b3f9c(0xc59)](),this[_0x4b3f9c(0x1b8)]();return;}else return _0x16b63f['filter'](_0x725f77=>_0x725f77[_0x4b3f9c(0x920)]()&&_0x725f77!==_0xbe9cb6);}},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x741)]=function(){const _0xc91c4=_0x5c342f;if(!this[_0xc91c4(0x1ab)]())return![];const _0x16cd1f=this[_0xc91c4(0x9d3)]();if(!_0x16cd1f)return![];const _0x379431=_0x16cd1f[_0xc91c4(0x475)];if(!_0x379431)return![];const _0x5d1ac7=_0x379431[_0xc91c4(0xb56)];return _0x5d1ac7&&!_0x5d1ac7[_0xc91c4(0x981)];},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x40b)]=function(){const _0x51c87d=_0x5c342f;return this[_0x51c87d(0x882)];},Game_Battler['prototype']['setBattlerFlip']=function(_0x4f2a75){const _0x365f5e=_0x5c342f;if(!$gameSystem['isSideView']())return;this[_0x365f5e(0x882)]=_0x4f2a75;const _0xcf75f9=this[_0x365f5e(0x9d3)]();if(_0xcf75f9)_0xcf75f9[_0x365f5e(0xd61)]();},Game_Battler['prototype'][_0x5c342f(0x9e3)]=function(_0x5ee526,_0x56662f,_0x60c9e3){const _0x27c8f0=_0x5c342f;if(!$gameSystem['isSideView']())return;const _0x1d276f=this['battler']();if(!_0x1d276f)return;if(_0x5ee526===_0x1d276f['_baseX'])return;let _0x24238d=![];if(this['isActor']()){if(_0x5ee526>_0x1d276f[_0x27c8f0(0xda2)])_0x24238d=!![];if(_0x5ee526<_0x1d276f[_0x27c8f0(0xda2)])_0x24238d=![];}else{if(this['isEnemy']()){if(_0x5ee526>_0x1d276f[_0x27c8f0(0xda2)])_0x24238d=![];if(_0x5ee526<_0x1d276f[_0x27c8f0(0xda2)])_0x24238d=!![];}};this['setBattlerFlip'](_0x60c9e3?!_0x24238d:_0x24238d),_0x1d276f[_0x27c8f0(0xd61)]();},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x895)]=function(_0x58ab4a,_0x4ef05a,_0x48a83b,_0x37ec27,_0x1ff8b6){const _0x2510ba=_0x5c342f;if(!$gameSystem[_0x2510ba(0x9a3)]())return;const _0x2b6499=this['battler']();if(!_0x2b6499)return;if(_0x37ec27)this[_0x2510ba(0x9e3)](_0x58ab4a+_0x2b6499[_0x2510ba(0xda2)],_0x4ef05a+_0x2b6499[_0x2510ba(0x256)],![]);_0x58ab4a+=_0x2b6499[_0x2510ba(0xda2)]-_0x2b6499[_0x2510ba(0x301)],_0x4ef05a+=_0x2b6499[_0x2510ba(0x256)]-_0x2b6499[_0x2510ba(0x3f1)],_0x2b6499[_0x2510ba(0x217)](_0x58ab4a,_0x4ef05a,_0x48a83b);if(Imported[_0x2510ba(0xad9)])_0x2b6499[_0x2510ba(0x8bc)](_0x1ff8b6||_0x2510ba(0x7bc));},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x28f)]=function(_0x25f699,_0x44208b,_0xc2bc2c,_0x3d6ecd,_0x11e4c1,_0x193d5){const _0x5e30dd=_0x5c342f;if(!$gameSystem['isSideView']())return;const _0x51498e=this[_0x5e30dd(0x9d3)]();if(!_0x51498e)return;if(_0x25f699===Infinity||_0x44208b===Infinity)return;if(isNaN(_0x25f699)||isNaN(_0x44208b))return;_0x193d5=_0x193d5||0x0;if(_0x193d5>0x0){if(_0x51498e['_baseX']>_0x25f699)_0x25f699+=_0x51498e[_0x5e30dd(0x6e4)]/0x2+_0x193d5;if(_0x51498e['_baseX']<_0x25f699)_0x25f699-=_0x51498e[_0x5e30dd(0x6e4)]/0x2+_0x193d5;}if(_0x3d6ecd)this[_0x5e30dd(0x9e3)](_0x25f699,_0x44208b,![]);_0x25f699-=_0x51498e[_0x5e30dd(0x301)],_0x44208b-=_0x51498e[_0x5e30dd(0x3f1)],_0x51498e[_0x5e30dd(0x217)](_0x25f699,_0x44208b,_0xc2bc2c);if(Imported[_0x5e30dd(0xad9)])_0x51498e['setMoveEasingType'](_0x11e4c1||_0x5e30dd(0x7bc));},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x2e9)]=function(_0x456714,_0x3fc4c9,_0x14cd58,_0x4e3283,_0xd5c5eb){const _0x70cc37=_0x5c342f;if(!$gameSystem[_0x70cc37(0x9a3)]())return;const _0x5df447=this[_0x70cc37(0x9d3)]();if(!_0x5df447)return;if(_0x4e3283)this[_0x70cc37(0x9e3)](_0x456714+_0x5df447['_baseX'],_0x3fc4c9+_0x5df447['_baseY'],![]);_0x456714+=_0x5df447[_0x70cc37(0x301)],_0x3fc4c9+=_0x5df447['_homeY'],_0x5df447['startHomeMove'](_0x456714,_0x3fc4c9,_0x14cd58,_0xd5c5eb),this['_forcedHomeX']=_0x456714,this[_0x70cc37(0x953)]=_0x3fc4c9;},Game_Battler['prototype'][_0x5c342f(0x526)]=function(_0x201a67,_0xdeece2,_0x543a5b,_0x56865a,_0x56e581,_0x1ceb52){const _0x1be5c8=_0x5c342f;if(!$gameSystem[_0x1be5c8(0x9a3)]())return;const _0x51e6bc=this[_0x1be5c8(0x9d3)]();if(!_0x51e6bc)return;_0x1ceb52=_0x1ceb52||0x0;if(_0x1ceb52>0x0){if(_0x1be5c8(0xa38)===_0x1be5c8(0x26e)){const _0xaab9e1=this[_0x1be5c8(0xde1)];_0xaab9e1[_0x1be5c8(0x524)](_0x3b5594,0x0,_0x163ea1['y'],_0xaab9e1[_0x1be5c8(0x178)],_0x1be5c8(0x83a));}else{if(_0x51e6bc['_baseX']>_0x201a67)_0x201a67+=_0x51e6bc[_0x1be5c8(0x6e4)]/0x2+_0x1ceb52;if(_0x51e6bc[_0x1be5c8(0xda2)]<_0x201a67)_0x201a67-=_0x51e6bc[_0x1be5c8(0x6e4)]/0x2+_0x1ceb52;}}if(_0x56865a)this[_0x1be5c8(0x9e3)](_0x201a67,_0xdeece2,![]);_0x51e6bc['startHomeMove'](_0x201a67,_0xdeece2,_0x543a5b,_0x56e581),this[_0x1be5c8(0x755)]=_0x201a67,this[_0x1be5c8(0x953)]=_0xdeece2;},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x1be)]=function(_0x5ab56a,_0x31d144,_0x5cdedc){const _0x4a1569=_0x5c342f;if(!$gameSystem[_0x4a1569(0x9a3)]())return;const _0x3a48d9=this[_0x4a1569(0x9d3)]();if(!_0x3a48d9)return;_0x3a48d9['startFloat'](_0x5ab56a,_0x31d144,_0x5cdedc);},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x545)]=function(_0x1c110e,_0x5923e8){const _0x14c063=_0x5c342f;if(!$gameSystem['isSideView']())return;const _0x587be0=this['battler']();if(!_0x587be0)return;_0x587be0[_0x14c063(0x8f3)](_0x1c110e,_0x5923e8);},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x2c1)]=function(_0x5bab41,_0x3abb1f,_0x3343e8,_0x7b1810){const _0x3d421a=_0x5c342f;if(!$gameSystem[_0x3d421a(0x9a3)]())return;const _0x30e78f=this[_0x3d421a(0x9d3)]();if(!_0x30e78f)return;_0x30e78f[_0x3d421a(0x7ec)](_0x5bab41,_0x3abb1f,_0x3343e8,_0x7b1810);},Game_Battler['prototype']['skewBattler']=function(_0x3f64b9,_0x1fb5a4,_0x4e2b96,_0x350b37){const _0x4321f6=_0x5c342f;if(!$gameSystem[_0x4321f6(0x9a3)]())return;const _0x4c2d37=this[_0x4321f6(0x9d3)]();if(!_0x4c2d37)return;this[_0x4321f6(0x47b)]()&&(_0x3f64b9*=-0x1,_0x1fb5a4*=-0x1),_0x4c2d37[_0x4321f6(0xd6c)](_0x3f64b9,_0x1fb5a4,_0x4e2b96,_0x350b37);},Game_Battler['prototype'][_0x5c342f(0x6bd)]=function(_0x1b6887,_0x57c340,_0x29a1db,_0x3df1dc){const _0x2ad92a=_0x5c342f;if(!$gameSystem[_0x2ad92a(0x9a3)]())return;const _0x1a29d0=this['battler']();if(!_0x1a29d0)return;_0x1a29d0[_0x2ad92a(0x605)](_0x1b6887,_0x57c340,_0x29a1db,_0x3df1dc);},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x5a8)]=function(_0x228249,_0x4578af,_0x2bf42a){const _0x16adab=_0x5c342f;if(!$gameSystem[_0x16adab(0x9a3)]())return;const _0x17c06c=this[_0x16adab(0x9d3)]();if(!_0x17c06c)return;_0x17c06c['startOpacity'](_0x228249,_0x4578af,_0x2bf42a);},Game_Battler[_0x5c342f(0xca4)]['clearFreezeMotion']=function(){const _0x4e735b=_0x5c342f,_0x3e2b4d=!!this[_0x4e735b(0x499)];this[_0x4e735b(0x499)]=undefined,_0x3e2b4d&&(this['requestMotionRefresh'](),this[_0x4e735b(0x98c)]());},Game_Battler[_0x5c342f(0xca4)]['clearFreezeMotionForWeapons']=function(){const _0x9d0022=_0x5c342f;if(!SceneManager[_0x9d0022(0x371)]())return;const _0x43f075=this[_0x9d0022(0x9d3)]();if(!_0x43f075)return;let _0x2e4aa0=this[_0x9d0022(0x47b)]()?_0x43f075[_0x9d0022(0x7c5)]:_0x43f075[_0x9d0022(0x475)]['_weaponSprite'];_0x2e4aa0&&_0x2e4aa0[_0x9d0022(0x5bd)](0x0);},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x6ed)]=function(_0x1f78df,_0x34f6a2,_0x1e898b){const _0xe3066e=_0x5c342f;if(this[_0xe3066e(0x796)]()&&!this[_0xe3066e(0x1ab)]())return;let _0x3cda4d=0x0,_0x881de1=0x0;if(_0x1f78df[_0xe3066e(0xcbd)](/ATTACK[ ](\d+)/i)){if('DBIPA'==='cFlfZ'){let _0x7c6cea=_0x2189b6['value'](_0x571fe8['VariableHeal']);_0x163e9c['hpDamage']<0x0&&(_0x7c6cea+=_0x36de0f[_0xe3066e(0xd81)](_0x56dfe7[_0xe3066e(0x81a)])),_0x190828[_0xe3066e(0x5b2)](_0x447442['VariableHeal'],_0x7c6cea);}else _0x881de1=Number(RegExp['$1']),_0x881de1--;}if(this['isActor']()){const _0x2df53a=this['weapons']();_0x3cda4d=_0x2df53a[_0x881de1]?_0x2df53a[_0x881de1][_0xe3066e(0x989)]:0x0;}else{if(this['isEnemy']()){if(_0xe3066e(0x6d6)==='bMdQs')_0x3cda4d=this['svBattlerData']()['wtypeId']||0x0;else{const _0x27568b=this[_0xe3066e(0x811)][_0xe3066e(0x812)];this[_0xe3066e(0x811)]['setFrame'](0x0,0x0,_0x27568b[_0xe3066e(0x6e4)],_0x27568b[_0xe3066e(0x880)]);}}}const _0x5dbc02=$dataSystem['attackMotions'][_0x3cda4d];_0x1f78df[_0xe3066e(0xcbd)](/attack/i)&&(_0x1f78df=[_0xe3066e(0x784),'swing','missile'][_0x5dbc02[_0xe3066e(0xb48)]]||_0xe3066e(0x774)),this['_freezeMotionData']={'motionType':_0x1f78df,'weaponImageId':_0x34f6a2?_0x5dbc02['weaponImageId']:0x0,'pattern':_0x1e898b};},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x969)]=function(_0x2c9a7b){const _0xd1e29b=_0x5c342f;if(!_0x2c9a7b)return![];return _0x2c9a7b[_0xd1e29b(0xab5)]()===this[_0xd1e29b(0xab5)]();},Game_Battler['prototype']['isOpponent']=function(_0x236dde){const _0x1fe6b3=_0x5c342f;if(!_0x236dde)return![];return _0x236dde[_0x1fe6b3(0x886)]()===this[_0x1fe6b3(0xab5)]();},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0x9b2)]=function(){return![];},Game_Actor['prototype']['hasStaticSvBattler']=function(){const _0x448ce5=_0x5c342f;return this['battlerName']()[_0x448ce5(0xcbd)](/\$/i);},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x9b2)]=function(){const _0x23365b=_0x5c342f;return this[_0x23365b(0x1ab)]()&&this[_0x23365b(0x1df)]()[_0x23365b(0xcbd)](/\$/i);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xa42)]=Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x5bd)],Game_Actor['prototype']['setup']=function(_0x14d822){const _0x4a51b3=_0x5c342f;VisuMZ[_0x4a51b3(0xca2)]['Game_Actor_setup']['call'](this,_0x14d822),this[_0x4a51b3(0x854)]();},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x854)]=function(){const _0x4ada2b=_0x5c342f;this[_0x4ada2b(0x985)]='',this[_0x4ada2b(0x761)]()&&this[_0x4ada2b(0x761)]()[_0x4ada2b(0x340)][_0x4ada2b(0xcbd)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&('ABjiO'!==_0x4ada2b(0xd66)?_0x3c541e=_0x5b0cbc[_0x4ada2b(0xd14)](_0x4f26d9):this[_0x4ada2b(0x985)]=String(RegExp['$1']));},Game_Actor['prototype']['getBattlePortraitFilename']=function(){const _0x2dacc3=_0x5c342f;if(this[_0x2dacc3(0xd92)]()!=='')return this['getBattlePortrait']();else{if(Imported[_0x2dacc3(0xb2a)]&&this[_0x2dacc3(0x6dc)]()!=='')return this[_0x2dacc3(0x6dc)]();}return'';},Game_Actor[_0x5c342f(0xca4)]['getBattlePortrait']=function(){const _0x4a34fe=_0x5c342f;if(this['_battlePortrait']===undefined)this[_0x4a34fe(0x854)]();return this[_0x4a34fe(0x985)];},Game_Actor[_0x5c342f(0xca4)]['setBattlePortrait']=function(_0x124866){const _0x50050b=_0x5c342f;if(this[_0x50050b(0x985)]===undefined)this['initBattlePortrait']();this[_0x50050b(0x985)]=_0x124866;if(SceneManager[_0x50050b(0x371)]()&&$gameParty[_0x50050b(0xd90)]()[_0x50050b(0xaec)](this)){if(_0x50050b(0x31a)===_0x50050b(0x31a)){const _0x1d0b26=SceneManager[_0x50050b(0x201)]['_statusWindow'];_0x1d0b26&&_0x1d0b26[_0x50050b(0x493)](this);}else return;}},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x867)]=function(){return!![];},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x1fd)]=function(){const _0x3c487c=_0x5c342f;if(!this[_0x3c487c(0xaf9)]()&&BattleManager[_0x3c487c(0x7e0)])return!![];return Game_Battler[_0x3c487c(0xca4)]['isAutoBattle'][_0x3c487c(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x438)]=Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x353)],Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x353)]=function(){const _0x9199c1=_0x5c342f;if(BattleManager['_autoBattle']&&!ConfigManager[_0x9199c1(0x378)])return this[_0x9199c1(0x66e)]();else{if(_0x9199c1(0x479)===_0x9199c1(0x479)){return VisuMZ[_0x9199c1(0xca2)][_0x9199c1(0x438)]['call'](this);;}else this[_0x9199c1(0x6a7)]['visible']=![];}},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x66e)]=function(){const _0xab4103=_0x5c342f,_0x107caa=[],_0x3f85b0=new Game_Action(this);return _0x3f85b0[_0xab4103(0x4a0)](),_0x107caa[_0xab4103(0x843)](_0x3f85b0),_0x107caa;},Game_Actor[_0x5c342f(0xca4)]['battleCommands']=function(){const _0x31efe2=_0x5c342f;if(this['currentClass']()[_0x31efe2(0x340)][_0x31efe2(0xcbd)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i))return String(RegExp['$1'])['split'](/[\r\n]+/);else{if(_0x31efe2(0x39c)!==_0x31efe2(0xc18))return VisuMZ[_0x31efe2(0xca2)][_0x31efe2(0xc90)][_0x31efe2(0x890)]['BattleCmdList'];else _0x1c3deb[_0x31efe2(0x8b4)]=_0x556ca8,_0x379fa4[_0x31efe2(0xb89)](this);}},Game_Actor['prototype'][_0x5c342f(0xa0b)]=function(){const _0x1cc444=_0x5c342f;if(this[_0x1cc444(0x4c7)][_0x1cc444(0x6d0)]!==undefined)return this[_0x1cc444(0x4c7)][_0x1cc444(0x6d0)];return this[_0x1cc444(0x761)]()[_0x1cc444(0x340)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache']['svAnchorX']=eval(RegExp['$1']),this[_0x1cc444(0x4c7)][_0x1cc444(0xa28)]=eval(RegExp['$2'])):this[_0x1cc444(0x4c7)]['svAnchorX']=Game_Battler[_0x1cc444(0xca4)][_0x1cc444(0xa0b)]['call'](this),this['_cache'][_0x1cc444(0x6d0)];},Game_Actor[_0x5c342f(0xca4)]['svBattlerAnchorY']=function(){const _0x5de248=_0x5c342f;if(this[_0x5de248(0x4c7)]['svAnchorY']!==undefined)return this[_0x5de248(0x4c7)][_0x5de248(0xa28)];return this[_0x5de248(0x761)]()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?_0x5de248(0x651)===_0x5de248(0xd67)?(_0x47db4c+=_0x1c96dc,_0x51091b+=_0x201e10):(this[_0x5de248(0x4c7)]['svAnchorX']=eval(RegExp['$1']),this[_0x5de248(0x4c7)][_0x5de248(0xa28)]=eval(RegExp['$2'])):this[_0x5de248(0x4c7)]['svAnchorY']=Game_Battler[_0x5de248(0xca4)]['svBattlerAnchorY'][_0x5de248(0xded)](this),this[_0x5de248(0x4c7)]['svAnchorY'];},Game_Actor['prototype'][_0x5c342f(0xe3a)]=function(){const _0x9bf223=_0x5c342f;if(this[_0x9bf223(0x4c7)][_0x9bf223(0x36d)]!==undefined)return this[_0x9bf223(0x4c7)][_0x9bf223(0x36d)];if(this[_0x9bf223(0x761)]()[_0x9bf223(0x340)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0x9bf223(0x4c7)][_0x9bf223(0x36d)]=!![];else this[_0x9bf223(0x761)]()[_0x9bf223(0x340)][_0x9bf223(0xcbd)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x9bf223(0x4c7)]['svShadow']=![]:_0x9bf223(0x9bf)===_0x9bf223(0x45f)?_0x3c04a6[_0x9bf223(0xca2)][_0x9bf223(0x3b5)](_0x28ccce,_0x2b27e3):this[_0x9bf223(0x4c7)]['svShadow']=Game_Battler[_0x9bf223(0xca4)][_0x9bf223(0xe3a)][_0x9bf223(0xded)](this);return this[_0x9bf223(0x4c7)][_0x9bf223(0x36d)];},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0xc46)]=function(){const _0x474888=_0x5c342f;return VisuMZ['BattleCore']['Settings']['Actor'][_0x474888(0x6af)];},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x1cd)]=function(){const _0x1b4dc3=_0x5c342f,_0x53fe48=this[_0x1b4dc3(0xe3b)](),_0x1de712=_0x53fe48[0x0]?_0x53fe48[0x0]['wtypeId']:0x0,_0x41c0b2=$dataSystem['attackMotions'][_0x1de712];_0x41c0b2&&this[_0x1b4dc3(0x69f)](_0x41c0b2[_0x1b4dc3(0xb4f)]);},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x7d1)]=function(_0x4bc4b7){const _0x25e6de=_0x5c342f;Game_Battler[_0x25e6de(0xca4)][_0x25e6de(0x7d1)][_0x25e6de(0xded)](this,_0x4bc4b7),this['performActionMotions'](_0x4bc4b7);},Game_Actor[_0x5c342f(0xca4)]['getAttackMotion']=function(){const _0x4361cb=_0x5c342f,_0x3f43ab=this[_0x4361cb(0xe3b)](),_0x6dfb9=_0x3f43ab[0x0]?_0x3f43ab[0x0][_0x4361cb(0x989)]:0x0;return $dataSystem[_0x4361cb(0xb5c)][_0x6dfb9];},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x175)]=function(_0x454c81){const _0x11a1fa=_0x5c342f;_0x454c81=_0x454c81||0x1,_0x454c81--;const _0x2a1711=this['weapons']();return _0x2a1711[_0x454c81]?_0x2a1711[_0x454c81][_0x11a1fa(0xdaa)]:0x0;},Game_Actor[_0x5c342f(0xca4)]['getAttackMotionSlot']=function(_0x3c74e8){const _0x9f5a26=_0x5c342f;_0x3c74e8=_0x3c74e8||0x1,_0x3c74e8--;const _0x2fe74d=this[_0x9f5a26(0xe3b)](),_0x5cdb07=_0x2fe74d[_0x3c74e8]?_0x2fe74d[_0x3c74e8]['wtypeId']:0x0;return $dataSystem[_0x9f5a26(0xb5c)][_0x5cdb07];},Game_Actor['prototype'][_0x5c342f(0x7ee)]=function(_0x322364){const _0x3e8d0a=_0x5c342f;_0x322364=_0x322364||0x1,_0x322364--;const _0x27bc06=this[_0x3e8d0a(0xe3b)](),_0x44f1a8=_0x27bc06[_0x322364]?_0x27bc06[_0x322364][_0x3e8d0a(0x989)]:0x0,_0x425c73=$dataSystem['attackMotions'][_0x44f1a8];if(_0x425c73){if(_0x425c73[_0x3e8d0a(0xb48)]===0x0)this[_0x3e8d0a(0x92b)]('thrust');else{if(_0x425c73[_0x3e8d0a(0xb48)]===0x1)this['requestMotion'](_0x3e8d0a(0x774));else _0x425c73[_0x3e8d0a(0xb48)]===0x2&&this[_0x3e8d0a(0x92b)]('missile');}this[_0x3e8d0a(0x69f)](_0x425c73[_0x3e8d0a(0xb4f)]);}},Game_Battler['prototype'][_0x5c342f(0xb3f)]=function(_0x1be5ac){const _0x157acb=_0x5c342f;if(this[_0x157acb(0x47b)]()){const _0x4e6144=this[_0x157acb(0xe3b)]();if(_0x4e6144[_0x157acb(0xc5c)]>0x0){const _0x4f0ad8=_0x4e6144[_0x1be5ac];if(_0x4f0ad8)_0x1be5ac=this[_0x157acb(0xb42)]()[_0x157acb(0x570)](_0x4f0ad8);}}this[_0x157acb(0x697)]=_0x1be5ac||0x0,this[_0x157acb(0x4c7)]={};},Game_Battler['prototype']['nextActiveWeaponSlot']=function(){const _0x205727=_0x5c342f;this[_0x205727(0x697)]=this[_0x205727(0x697)]||0x0,this[_0x205727(0x697)]++,this[_0x205727(0x4c7)]={};},Game_Battler[_0x5c342f(0xca4)][_0x5c342f(0xd31)]=function(){this['_activeWeaponSlot']=undefined,this['_cache']={};},VisuMZ['BattleCore'][_0x5c342f(0x884)]=Game_Actor[_0x5c342f(0xca4)]['equips'],Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0xb42)]=function(){const _0x5589f7=_0x5c342f;let _0x21ddcf=VisuMZ['BattleCore'][_0x5589f7(0x884)]['call'](this);if(this[_0x5589f7(0xdf6)])return _0x21ddcf;if(this['_activeWeaponSlot']!==undefined){this[_0x5589f7(0xdf6)]=!![];const _0x2c3cc2=this[_0x5589f7(0x9c0)]();for(let _0x890f1a=0x0;_0x890f1a<_0x2c3cc2[_0x5589f7(0xc5c)];_0x890f1a++){if(_0x2c3cc2[_0x890f1a]===0x1&&this[_0x5589f7(0x697)]!==_0x890f1a){if(_0x5589f7(0x6ba)!==_0x5589f7(0x336))_0x21ddcf[_0x890f1a]=null;else return _0x5b5212['BattleCore'][_0x5589f7(0xc90)][_0x5589f7(0xaa5)][_0x5589f7(0x894)];}}this['_tempEquipCheck']=undefined;}return _0x21ddcf;},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x86c)]=function(_0x519b14){const _0x467544=_0x5c342f;if(_0x519b14[_0x467544(0x47b)]())return _0x519b14['weapons']()[_0x467544(0xc5c)]||0x1;else{if('jZRQB'===_0x467544(0x628))return 0x1;else _0x15f782[_0x467544(0xca2)][_0x467544(0xd78)][_0x467544(0xded)](this),this[_0x467544(0x7be)]();}},Window_BattleLog['prototype'][_0x5c342f(0x5d2)]=function(_0x557e15,_0x66d97a){const _0x59bd4b=_0x5c342f;if(_0x557e15&&_0x557e15[_0x59bd4b(0x47b)]()){if(_0x59bd4b(0x30c)===_0x59bd4b(0x30c))_0x557e15[_0x59bd4b(0xb3f)](_0x66d97a);else{if(!this[_0x59bd4b(0x8c2)])this[_0x59bd4b(0xb3c)]();return _0x4c7640[_0x59bd4b(0xca2)]['Settings'][_0x59bd4b(0x603)][_0x59bd4b(0x9ea)]?this[_0x59bd4b(0x8c2)][_0x59bd4b(0x728)]():this[_0x59bd4b(0x8c2)][_0x59bd4b(0xbb2)]();}}this[_0x59bd4b(0x24a)]();},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x852)]=function(_0x3d031c){const _0x11b1a8=_0x5c342f;_0x3d031c&&_0x3d031c['isActor']()&&_0x3d031c['clearActiveWeaponSlot'](),this[_0x11b1a8(0x24a)]();},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0x489)]=function(){const _0x419c55=_0x5c342f;let _0x3aab79=_0x419c55(0x489);if(this[_0x419c55(0x3a3)](_0x3aab79))return this[_0x419c55(0x4c7)][_0x3aab79];return this[_0x419c55(0x4c7)][_0x3aab79]=this['createBattleUIOffsetX'](this[_0x419c55(0x761)]()),this['_cache'][_0x3aab79];},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0xc32)]=function(){const _0x15f77c=_0x5c342f;let _0x4c0302=_0x15f77c(0xc32);if(this['checkCacheKey'](_0x4c0302))return this['_cache'][_0x4c0302];return this['_cache'][_0x4c0302]=this[_0x15f77c(0x657)](this['actor']()),this[_0x15f77c(0x4c7)][_0x4c0302];},VisuMZ['BattleCore'][_0x5c342f(0x2b5)]=Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x5bd)],Game_Enemy['prototype'][_0x5c342f(0x5bd)]=function(_0x4ac36c,_0x12aa67,_0x4b38e5){const _0x547ef1=_0x5c342f;_0x4ac36c=DataManager[_0x547ef1(0x5ca)](_0x4ac36c),VisuMZ['BattleCore'][_0x547ef1(0x2b5)][_0x547ef1(0xded)](this,_0x4ac36c,_0x12aa67,_0x4b38e5),Imported[_0x547ef1(0x518)]&&this[_0x547ef1(0x832)](),this['clearBattleCoreData'](),this[_0x547ef1(0xc7e)](),Imported[_0x547ef1(0x518)]&&this[_0x547ef1(0x8fe)]();},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x3b0)]=function(){const _0x40183c=_0x5c342f,_0x1aefb5=VisuMZ[_0x40183c(0xca2)]['Settings']['Enemy'];this['_attackAnimationId']=_0x1aefb5[_0x40183c(0x366)],this[_0x40183c(0xd72)]={};},Game_Enemy[_0x5c342f(0xca4)]['setupBattleCoreData']=function(){const _0x532a69=_0x5c342f,_0x3e75dc=VisuMZ[_0x532a69(0xca2)]['Settings']['Enemy'],_0x397b37=this[_0x532a69(0x455)]()[_0x532a69(0x340)];this[_0x532a69(0xd72)]={'name':'','wtypeId':_0x3e75dc[_0x532a69(0x243)],'collapse':_0x3e75dc[_0x532a69(0xe1c)],'motionIdle':_0x3e75dc[_0x532a69(0xb13)],'width':_0x3e75dc[_0x532a69(0x571)]||0x40,'height':_0x3e75dc[_0x532a69(0x9d2)]||0x40,'anchorX':_0x3e75dc[_0x532a69(0x90f)]||0x0,'anchorY':_0x3e75dc[_0x532a69(0xc71)]||0x0,'shadow':_0x3e75dc[_0x532a69(0xcff)]};if(_0x397b37['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)){if(_0x532a69(0xb5b)!==_0x532a69(0xb5b))return!![];else this['_attackAnimationId']=Number(RegExp['$1']);}const _0x57b425=this[_0x532a69(0xd72)];if(_0x397b37[_0x532a69(0xcbd)](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x532a69(0xe34)===_0x532a69(0xb64))return[_0x31ddcd]['concat'](_0x215f07);else _0x57b425[_0x532a69(0x25e)]=String(RegExp['$1']);}else{if(_0x397b37[_0x532a69(0xcbd)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if('uXnMF'===_0x532a69(0xccd)){const _0x280807=String(RegExp['$1'])[_0x532a69(0x68e)](/[\r\n]+/)[_0x532a69(0x5e1)]('');_0x57b425[_0x532a69(0x25e)]=DataManager[_0x532a69(0xd84)](_0x280807);}else{const _0x245cff=_0x29c1e6[_0x532a69(0xca8)](_0x710da3['x'],_0x1c8997['y']);if(this['_regionBattleback1']&&this['_regionBattleback1'][_0x245cff])return this[_0x532a69(0x817)][_0x245cff];}}}_0x397b37[_0x532a69(0xcbd)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x57b425['anchorX']=eval(RegExp['$1']),_0x57b425[_0x532a69(0xbe1)]=eval(RegExp['$2']));if(_0x397b37[_0x532a69(0xcbd)](/<SIDEVIEW COLLAPSE>/i))_0x57b425[_0x532a69(0xdb5)]=!![];else _0x397b37['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x57b425['collapse']=![]);if(_0x397b37[_0x532a69(0xcbd)](/<SIDEVIEW SHOW SHADOW>/i))_0x57b425['shadow']=!![];else{if(_0x397b37['match'](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x532a69(0xb1e)!==_0x532a69(0x484))_0x57b425[_0x532a69(0x62c)]=![];else return _0x15a485;}}if(_0x397b37['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x57b425[_0x532a69(0x2be)]=String(RegExp['$1'])[_0x532a69(0xda0)]()[_0x532a69(0xa5e)]();else{if(_0x397b37['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x33d655=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x532a69(0x5e1)]('');_0x57b425[_0x532a69(0x2be)]=DataManager[_0x532a69(0xd84)](_0x33d655);}}_0x397b37['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x532a69(0x7ff)!=='CHLnn'?this[_0x532a69(0xb81)]=(this[_0x532a69(0xb81)]*(_0x5a329b-0x1)+this['_targetAngle'])/_0x124cd5:(_0x57b425['width']=Number(RegExp['$1']),_0x57b425[_0x532a69(0x880)]=Number(RegExp['$2'])));if(_0x397b37['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x57b425[_0x532a69(0x989)]=DataManager[_0x532a69(0xb0a)](RegExp['$1']);else{if(_0x397b37[_0x532a69(0xcbd)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x48b889=String(RegExp['$1'])[_0x532a69(0x68e)](/[\r\n]+/)['remove'](''),_0x1b979c=DataManager[_0x532a69(0xd84)](_0x48b889);_0x57b425[_0x532a69(0x989)]=DataManager[_0x532a69(0xb0a)](_0x1b979c);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x4f3901=this['getTraitSetKeys']();for(const _0x52cca0 of _0x4f3901){const _0x264433=this[_0x532a69(0x9f0)](_0x52cca0)[_0x532a69(0xc8a)][_0x532a69(0xb34)]()[_0x532a69(0xa5e)](),_0x5a2f30=_0x52cca0[_0x532a69(0xb34)]()[_0x532a69(0xa5e)]();if(_0x397b37[_0x532a69(0xcbd)](VisuMZ[_0x532a69(0xe31)]['RegExp'][_0x532a69(0x514)[_0x532a69(0x266)](_0x5a2f30,_0x264433)]))_0x57b425[_0x532a69(0x25e)]=String(RegExp['$1']);else{if(_0x397b37[_0x532a69(0xcbd)](VisuMZ[_0x532a69(0xe31)][_0x532a69(0x8d3)]['SvBattlerMass-%1-%2'[_0x532a69(0x266)](_0x5a2f30,_0x264433)])){const _0x1b4974=String(RegExp['$1'])[_0x532a69(0x68e)](/[\r\n]+/)['remove']('');_0x57b425['name']=DataManager[_0x532a69(0xd84)](_0x1b4974);}}if(_0x397b37[_0x532a69(0xcbd)](VisuMZ[_0x532a69(0xe31)][_0x532a69(0x8d3)]['SvWeaponSolo-%1-%2'[_0x532a69(0x266)](_0x5a2f30,_0x264433)]))_0x57b425[_0x532a69(0x989)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x397b37[_0x532a69(0xcbd)](VisuMZ['ElementStatusCore'][_0x532a69(0x8d3)][_0x532a69(0xadf)[_0x532a69(0x266)](_0x5a2f30,_0x264433)])){const _0x2be9a7=String(RegExp['$1'])[_0x532a69(0x68e)](/[\r\n]+/)['remove'](''),_0x567660=DataManager[_0x532a69(0xd84)](_0x2be9a7);_0x57b425[_0x532a69(0x989)]=DataManager['getWtypeIdWithName'](_0x567660);}}if(_0x397b37[_0x532a69(0xcbd)](VisuMZ[_0x532a69(0xe31)][_0x532a69(0x8d3)][_0x532a69(0xc30)[_0x532a69(0x266)](_0x5a2f30,_0x264433)]))_0x57b425[_0x532a69(0x2be)]=String(RegExp['$1'])[_0x532a69(0xda0)]()['trim']();else{if(_0x397b37[_0x532a69(0xcbd)](VisuMZ['ElementStatusCore'][_0x532a69(0x8d3)][_0x532a69(0xd69)[_0x532a69(0x266)](_0x5a2f30,_0x264433)])){if('TFYNR'===_0x532a69(0xdb1)){const _0x1f9277=String(RegExp['$1'])[_0x532a69(0x68e)](/[\r\n]+/)[_0x532a69(0x5e1)]('');_0x57b425[_0x532a69(0x2be)]=DataManager[_0x532a69(0xd84)](_0x1f9277);}else{if(!this[_0x532a69(0x465)])return;const _0x1c3e06=this[_0x532a69(0x465)][_0x532a69(0xbe0)]();for(const _0x275cfd of _0x1c3e06){this[_0x532a69(0x900)](_0x275cfd[_0x532a69(0xb34)]()[_0x532a69(0xa5e)]());}}}}}}},Game_Enemy[_0x5c342f(0xca4)]['attackAnimationId1']=function(){const _0x50849d=_0x5c342f;return this[_0x50849d(0x7da)]||0x0;},Game_Enemy[_0x5c342f(0xca4)]['attackAnimationId2']=function(){const _0x14715b=_0x5c342f;return this[_0x14715b(0x8fd)]();},Game_Enemy['prototype'][_0x5c342f(0x175)]=function(_0x269953){const _0x486065=_0x5c342f;return this[_0x486065(0x8fd)]();},Game_Enemy[_0x5c342f(0xca4)]['canBattlerMove']=function(){const _0x36f5fc=_0x5c342f;if(this['enemy']()['note'][_0x36f5fc(0xcbd)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype']['canBattlerMove']['call'](this);},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x902)]=function(){const _0x5cf3b9=_0x5c342f;if(this['enemy']()[_0x5cf3b9(0x340)][_0x5cf3b9(0xcbd)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x5c342f(0xca4)]['skills']=function(){const _0x47a859=_0x5c342f,_0xad4790=[];for(const _0x5f3834 of this[_0x47a859(0x455)]()[_0x47a859(0xccc)]){const _0x56241b=$dataSkills[_0x5f3834[_0x47a859(0x8d8)]];if(_0x56241b&&!_0xad4790[_0x47a859(0xaec)](_0x56241b))_0xad4790[_0x47a859(0x843)](_0x56241b);}return _0xad4790;},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x489)]=function(){const _0x1b9747=_0x5c342f;let _0x8382be=_0x1b9747(0x489);if(this[_0x1b9747(0x3a3)](_0x8382be))return this[_0x1b9747(0x4c7)][_0x8382be];return this[_0x1b9747(0x4c7)][_0x8382be]=this[_0x1b9747(0xe05)](this[_0x1b9747(0x455)]()),this[_0x1b9747(0x4c7)][_0x8382be];},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0xc32)]=function(){const _0x586878=_0x5c342f;let _0x1f030a=_0x586878(0xc32);if(this['checkCacheKey'](_0x1f030a))return this[_0x586878(0x4c7)][_0x1f030a];return this[_0x586878(0x4c7)][_0x1f030a]=this['createBattleUIOffsetY'](this[_0x586878(0x455)]()),this['_cache'][_0x1f030a];},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x5d5)]=function(){const _0x446d8d=_0x5c342f;if(this['_svBattlerData']!==undefined)return this[_0x446d8d(0xd72)];return this[_0x446d8d(0xc7e)](),this[_0x446d8d(0xd72)];},Game_Enemy[_0x5c342f(0xca4)]['hasSvBattler']=function(){const _0x5ae2f2=_0x5c342f;return this[_0x5ae2f2(0x5d5)]()['name']!=='';},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x1df)]=function(){const _0x159da2=_0x5c342f;return this['svBattlerData']()[_0x159da2(0x25e)];},Game_Enemy[_0x5c342f(0xca4)]['battlerSmoothImage']=function(){const _0xcdec73=_0x5c342f;if(this[_0xcdec73(0x1ab)]()){if(_0xcdec73(0x650)==='aJvon')return VisuMZ['BattleCore'][_0xcdec73(0xc90)]['Actor'][_0xcdec73(0x6af)];else _0x3a3bda-=_0x34b23c[_0xcdec73(0x5d7)]();}else return VisuMZ['BattleCore'][_0xcdec73(0xc90)][_0xcdec73(0x4f1)][_0xcdec73(0x6af)];},Game_Enemy['prototype']['performAction']=function(_0xa89d13){const _0x2c4f56=_0x5c342f;Game_Battler[_0x2c4f56(0xca4)]['performAction']['call'](this,_0xa89d13);if(this[_0x2c4f56(0x1ab)]())this[_0x2c4f56(0x93b)](_0xa89d13);},Game_Enemy['prototype'][_0x5c342f(0xe23)]=function(){const _0x35136b=_0x5c342f,_0x3274a1=this['svBattlerData']()[_0x35136b(0x989)]||0x0,_0xcc75ab=$dataSystem[_0x35136b(0xb5c)][_0x3274a1];if(_0xcc75ab){if(_0x35136b(0x664)!==_0x35136b(0x7c6)){if(_0xcc75ab[_0x35136b(0xb48)]===0x0)this[_0x35136b(0x92b)](_0x35136b(0x784));else{if(_0xcc75ab[_0x35136b(0xb48)]===0x1)this['requestMotion']('swing');else _0xcc75ab['type']===0x2&&this[_0x35136b(0x92b)]('missile');}}else this[_0x35136b(0xd5a)](...arguments);}},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x1cd)]=function(){const _0x564b81=_0x5c342f,_0x3a29c8=this[_0x564b81(0x5d5)]()[_0x564b81(0x989)]||0x0,_0x445789=$dataSystem[_0x564b81(0xb5c)][_0x3a29c8];_0x445789&&this[_0x564b81(0x69f)](_0x445789[_0x564b81(0xb4f)]);},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x1d4)]=function(){const _0x2e9c1a=_0x5c342f,_0x117f8d=this[_0x2e9c1a(0x5d5)]()[_0x2e9c1a(0x989)]||0x0;return $dataSystem[_0x2e9c1a(0xb5c)][_0x117f8d];},Game_Enemy[_0x5c342f(0xca4)]['getAttackMotionSlot']=function(_0x4c1d07){return this['getAttackMotion']();},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x2bc)]=function(){const _0x4fd361=_0x5c342f;Game_Battler[_0x4fd361(0xca4)][_0x4fd361(0x2bc)]['call'](this),this[_0x4fd361(0x867)]()&&this[_0x4fd361(0x1ab)]()&&this['requestMotion'](_0x4fd361(0x8f5)),SoundManager[_0x4fd361(0xd95)]();},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x22c)]=function(){const _0x30b72c=_0x5c342f;Game_Battler['prototype'][_0x30b72c(0x22c)][_0x30b72c(0xded)](this),this[_0x30b72c(0x92b)]('evade');},Game_Enemy['prototype'][_0x5c342f(0xbbd)]=function(){const _0x46e8f2=_0x5c342f;Game_Battler['prototype'][_0x46e8f2(0xbbd)][_0x46e8f2(0xded)](this),this[_0x46e8f2(0x92b)](_0x46e8f2(0xd5c));},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x6fe)]=function(){const _0x525d6a=_0x5c342f;Game_Battler[_0x525d6a(0xca4)][_0x525d6a(0x6fe)][_0x525d6a(0xded)](this),this[_0x525d6a(0xe23)]();},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x47f)]=function(){const _0x5f561c=_0x5c342f;if(this[_0x5f561c(0x1ab)]()){if('GJeRn'==='GJeRn'){if(this['collapseType']()>=0x1)return!![];return this[_0x5f561c(0x5d5)]()[_0x5f561c(0xdb5)];}else{if(!_0x484541['isSideView']())return;const _0x5e9bd8=this[_0x5f561c(0x9d3)]();if(!_0x5e9bd8)return;if(_0xe37d04===_0x4d4f75||_0x30cf89===_0xc29781)return;if(_0x3ce672(_0x39482c)||_0x29b9c4(_0x3eb8e3))return;_0xfacfbb=_0x194da7||0x0;if(_0x726bfb>0x0){if(_0x5e9bd8[_0x5f561c(0xda2)]>_0x31bf2b)_0x3de650+=_0x5e9bd8[_0x5f561c(0x6e4)]/0x2+_0x340149;if(_0x5e9bd8['_baseX']<_0x87c88f)_0x4e98eb-=_0x5e9bd8[_0x5f561c(0x6e4)]/0x2+_0x387231;}if(_0x59bd3c)this[_0x5f561c(0x9e3)](_0x2620ea,_0x4b82a5,![]);_0x2a67da-=_0x5e9bd8['_homeX'],_0x2847da-=_0x5e9bd8[_0x5f561c(0x3f1)],_0x5e9bd8[_0x5f561c(0x217)](_0x5bfe5a,_0x1f10f8,_0x2a5249);if(_0xed3e7c['VisuMZ_0_CoreEngine'])_0x5e9bd8[_0x5f561c(0x8bc)](_0x27bad2||_0x5f561c(0x7bc));}}else return!![];},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0xa0b)]=function(){const _0x583b68=_0x5c342f;return this[_0x583b68(0x5d5)]()['anchorX'];},Game_Enemy['prototype'][_0x5c342f(0x553)]=function(){const _0x16688c=_0x5c342f;return this['svBattlerData']()[_0x16688c(0xbe1)];},Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0xe3a)]=function(){const _0x789416=_0x5c342f;return this[_0x789416(0x5d5)]()[_0x789416(0x62c)];},VisuMZ[_0x5c342f(0xca2)]['Game_Enemy_transform']=Game_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x781)],Game_Enemy['prototype'][_0x5c342f(0x781)]=function(_0x5b06b5){const _0x23d2d5=_0x5c342f;VisuMZ['BattleCore'][_0x23d2d5(0xc97)][_0x23d2d5(0xded)](this,_0x5b06b5),this['clearBattleCoreData'](),this['setupBattleCoreData']();const _0x53f056=this[_0x23d2d5(0x9d3)]();_0x53f056&&(_0x23d2d5(0x95c)!==_0x23d2d5(0x95c)?(_0x368f3f+=_0x33d553[_0x23d2d5(0xe29)]['OffsetX']||0x0,_0x2e5df0+=_0xef432e['Actor'][_0x23d2d5(0xdb0)]||0x0):(_0x53f056[_0x23d2d5(0x8b4)]=undefined,_0x53f056['setBattler'](this)));},Game_Unit[_0x5c342f(0xca4)]['processBattleCoreJS']=function(_0x563de2){const _0x1f35d6=_0x5c342f;for(const _0x16af9e of this[_0x1f35d6(0xe06)]()){if(_0x1f35d6(0x5f3)===_0x1f35d6(0x29f))return _0x5f3a73[_0x1f35d6(0x66b)]();else{if(_0x16af9e)_0x16af9e[_0x1f35d6(0x6d1)](_0x563de2);}}},Game_Unit['prototype'][_0x5c342f(0x8eb)]=function(){const _0x11f80c=_0x5c342f,_0x13d65e=this['aliveMembers']();return _0x13d65e[Math[_0x11f80c(0xb47)](_0x13d65e['length'])];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc44)]=Game_Party[_0x5c342f(0xca4)][_0x5c342f(0x98d)],Game_Party['prototype'][_0x5c342f(0x98d)]=function(_0x321e2d){const _0x5e2f7f=_0x5c342f;VisuMZ[_0x5e2f7f(0xca2)][_0x5e2f7f(0xc44)]['call'](this,_0x321e2d),BattleManager[_0x5e2f7f(0x971)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc67)]=Game_Party[_0x5c342f(0xca4)][_0x5c342f(0xc1e)],Game_Party['prototype'][_0x5c342f(0xc1e)]=function(_0x2d4f1e){VisuMZ['BattleCore']['Game_Party_removeActor']['call'](this,_0x2d4f1e),BattleManager['refreshStatusWindow']();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x568)]=Game_Troop[_0x5c342f(0xca4)][_0x5c342f(0x5bd)],Game_Troop[_0x5c342f(0xca4)][_0x5c342f(0x5bd)]=function(_0x261c11){const _0x3d0a40=_0x5c342f;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x3d0a40(0x88b)](_0x261c11),VisuMZ[_0x3d0a40(0xca2)]['Game_Troop_setup']['call'](this,_0x261c11),this[_0x3d0a40(0x776)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xbd3)]=Game_Troop[_0x5c342f(0xca4)][_0x5c342f(0x5ab)],Game_Troop[_0x5c342f(0xca4)][_0x5c342f(0x5ab)]=function(){const _0x2d929b=_0x5c342f;let _0x5e379f=VisuMZ['BattleCore'][_0x2d929b(0xbd3)][_0x2d929b(0xded)](this);return this[_0x2d929b(0x406)]&&(_0x5e379f*=this[_0x2d929b(0x406)]()),Math[_0x2d929b(0xc9d)](_0x5e379f);},Game_Troop[_0x5c342f(0xca4)][_0x5c342f(0x406)]=function(){return 0x1;},Game_Troop['prototype']['extendTroopMembers']=function(){const _0x1c2b46=_0x5c342f,_0x4015ba=DataManager['createTroopNote'](this[_0x1c2b46(0x5dc)]()['id']);if(_0x4015ba[_0x1c2b46(0xcbd)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x30241a=RegExp['$1']['split'](',')[_0x1c2b46(0xd08)](_0x58e5bf=>Number(_0x58e5bf));this[_0x1c2b46(0x63b)](),this['processExtendTroopMembers'](_0x30241a);}},Game_Troop[_0x5c342f(0xca4)][_0x5c342f(0x63b)]=function(){const _0x52eec1=_0x5c342f;let _0x5a3e96=_0x52eec1(0x2cc)+'\x0a';_0x5a3e96+=_0x52eec1(0x962);if(Imported[_0x52eec1(0xc4a)]){if(VisuMZ[_0x52eec1(0x53c)][_0x52eec1(0xda9)]<1.11){if(_0x52eec1(0x60b)!==_0x52eec1(0x60b)){if(!_0x1ee8c4[_0x52eec1(0x371)]())return;if(!_0x327d75['VisuMZ_3_ActSeqCamera'])return;_0x1d4bb0[_0x52eec1(0x2ee)](_0x48a3d8,_0x108e66);const _0x5b548a=_0x54b85f[_0x52eec1(0x3d1)](),_0xa19fc4=_0xd6c7b7[_0x52eec1(0x432)](_0x1d3c1d['Targets']),_0x53e09c=_0x32475a[_0x52eec1(0x289)];_0x2d4a8a[_0x52eec1(0x2d1)](_0xa19fc4,_0x139d53['Duration'],_0x404177[_0x52eec1(0xd70)]);if(_0x53e09c)_0x5b548a[_0x52eec1(0x430)](_0x52eec1(0x613));}else alert(_0x5a3e96['format'](_0x52eec1(0x4b0))),SceneManager['exit']();}}if(Imported[_0x52eec1(0x82e)]){if(VisuMZ['BattleSystemCTB'][_0x52eec1(0xda9)]<1.19){if(_0x52eec1(0xdf8)==='MpmRG'){if(_0x953c81[_0x52eec1(0x9e7)](_0x4db35a))return!![];return![];}else alert(_0x5a3e96[_0x52eec1(0x266)]('CTB')),SceneManager['exit']();}}Imported[_0x52eec1(0xdd6)]&&(VisuMZ['BattleSystemSTB'][_0x52eec1(0xda9)]<1.15&&(_0x52eec1(0xadd)===_0x52eec1(0x279)?this[_0x52eec1(0xd94)]():(alert(_0x5a3e96[_0x52eec1(0x266)](_0x52eec1(0x94c))),SceneManager[_0x52eec1(0x549)]())));},Game_Troop[_0x5c342f(0xca4)][_0x5c342f(0x829)]=function(_0x18d0a6){const _0x2aa114=_0x5c342f;this[_0x2aa114(0x2ca)]={};for(const _0x4bdaf6 of this[_0x2aa114(0xe06)]()){if(!_0x4bdaf6)continue;_0x4bdaf6['setLetter']('');}for(const _0x2ae239 of _0x18d0a6){const _0x378199=$dataTroops[_0x2ae239];if(_0x378199)this[_0x2aa114(0x72a)](_0x378199);}this[_0x2aa114(0x847)]();},Game_Troop[_0x5c342f(0xca4)][_0x5c342f(0x72a)]=function(_0x35fe49){const _0x302c82=_0x5c342f;for(const _0x54c31c of _0x35fe49['members']){if('YSptp'===_0x302c82(0x9d1)){if($dataEnemies[_0x54c31c[_0x302c82(0xd9d)]]){if(_0x302c82(0x495)!==_0x302c82(0xaa7)){const _0x21d640=_0x54c31c[_0x302c82(0xd9d)],_0x293b9b=_0x54c31c['x'],_0x4f121e=_0x54c31c['y'],_0x31fd09=new Game_Enemy(_0x21d640,_0x293b9b,_0x4f121e);if(_0x54c31c['hidden']){if(_0x302c82(0xccf)!==_0x302c82(0xccf))return!![];else _0x31fd09[_0x302c82(0xa29)]();}this[_0x302c82(0x96a)][_0x302c82(0x843)](_0x31fd09);}else this[_0x302c82(0xdda)]()&&this[_0x302c82(0xdda)]()[_0x302c82(0x856)]()?_0x3c1648[_0x302c82(0xca2)][_0x302c82(0xb51)][_0x302c82(0xded)](this):this['clear']();}}else _0x127a3c-=_0x392860[_0x302c82(0x5d7)]()/0x2;}},VisuMZ[_0x5c342f(0xca2)]['Game_Map_setupBattleback']=Game_Map[_0x5c342f(0xca4)]['setupBattleback'],Game_Map['prototype']['setupBattleback']=function(){const _0x400a5b=_0x5c342f;VisuMZ[_0x400a5b(0xca2)][_0x400a5b(0x5ae)][_0x400a5b(0xded)](this),this[_0x400a5b(0x19a)]();},Game_Map['prototype']['setupBattlebackBattleCore']=function(){const _0x148ec0=_0x5c342f;this[_0x148ec0(0x817)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x516c81=$dataMap[_0x148ec0(0x340)];if(!_0x516c81)return;const _0x4bec58=_0x516c81[_0x148ec0(0xcbd)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x4bec58)for(const _0x6c087d of _0x4bec58){_0x6c087d[_0x148ec0(0xcbd)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x116f31=Number(RegExp['$1']),_0x1885ad=Number(RegExp['$2']),_0x57b1e6=_0x1885ad===0x1?this[_0x148ec0(0x817)]:this['_regionBattleback2'],_0x42512f=String(RegExp['$3']);_0x57b1e6[_0x116f31]=_0x42512f;}},VisuMZ['BattleCore'][_0x5c342f(0xe27)]=Game_Map[_0x5c342f(0xca4)][_0x5c342f(0xd8b)],Game_Map[_0x5c342f(0xca4)][_0x5c342f(0xd8b)]=function(){const _0x27750e=_0x5c342f;if(!BattleManager[_0x27750e(0xc7a)]()){const _0x5963ad=$gamePlayer[_0x27750e(0xca8)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x27750e(0x817)]&&this['_regionBattleback1'][_0x5963ad])return this[_0x27750e(0x817)][_0x5963ad];}return VisuMZ[_0x27750e(0xca2)][_0x27750e(0xe27)][_0x27750e(0xded)](this);},VisuMZ[_0x5c342f(0xca2)]['Game_Map_battleback2Name']=Game_Map[_0x5c342f(0xca4)][_0x5c342f(0xe2c)],Game_Map[_0x5c342f(0xca4)][_0x5c342f(0xe2c)]=function(){const _0x27eaf3=_0x5c342f;if(!BattleManager['isBattleTest']()){const _0x207a50=$gamePlayer[_0x27eaf3(0xca8)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x27eaf3(0x817)]&&this[_0x27eaf3(0x226)][_0x207a50])return this['_regionBattleback2'][_0x207a50];}return VisuMZ['BattleCore'][_0x27eaf3(0xc55)][_0x27eaf3(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x34d)]=Game_Map[_0x5c342f(0xca4)][_0x5c342f(0x8fb)],Game_Map[_0x5c342f(0xca4)][_0x5c342f(0x8fb)]=function(){const _0x4369cb=_0x5c342f;let _0x35a077=JsonEx[_0x4369cb(0x388)](VisuMZ[_0x4369cb(0xca2)]['Game_Map_encounterList'][_0x4369cb(0xded)](this));return VisuMZ[_0x4369cb(0xca2)][_0x4369cb(0x597)](_0x35a077);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x597)]=function(_0x4f4f00){const _0x5cff4e=_0x5c342f;var _0x17cd79,_0x1f913f,_0x32fcda;for(_0x32fcda=_0x4f4f00[_0x5cff4e(0xc5c)]-0x1;_0x32fcda>0x0;_0x32fcda--){_0x17cd79=Math['floor'](Math[_0x5cff4e(0x935)]()*(_0x32fcda+0x1)),_0x1f913f=_0x4f4f00[_0x32fcda],_0x4f4f00[_0x32fcda]=_0x4f4f00[_0x17cd79],_0x4f4f00[_0x17cd79]=_0x1f913f;}return _0x4f4f00;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x58f)]=Game_Interpreter[_0x5c342f(0xca4)]['command357'],Game_Interpreter[_0x5c342f(0xca4)][_0x5c342f(0x7e7)]=function(_0x2eaf98){const _0x362f93=_0x5c342f;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ[_0x362f93(0xca2)][_0x362f93(0x58f)][_0x362f93(0xded)](this,_0x2eaf98);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x8a9)]=Game_Interpreter[_0x5c342f(0xca4)][_0x5c342f(0x4b2)],Game_Interpreter[_0x5c342f(0xca4)][_0x5c342f(0x4b2)]=function(){const _0x469999=_0x5c342f;if(SceneManager[_0x469999(0x371)]()){if(_0x469999(0x57f)!=='LDJwI')switch(this[_0x469999(0xcd7)]){case _0x469999(0xd07):if(Imported[_0x469999(0xb02)]){if($gameScreen[_0x469999(0x3d0)]()[_0x469999(0xb0d)]>0x0)return!![];this['_waitMode']='';}break;case _0x469999(0xbfb):if(BattleManager[_0x469999(0x3ed)][_0x469999(0x197)]())return!![];this[_0x469999(0xcd7)]='';break;case'battleBalloon':if(BattleManager[_0x469999(0x3ed)]['isAnyBattleBalloonPlaying']())return!![];this['_waitMode']='';break;case _0x469999(0x613):if(Imported[_0x469999(0xb02)]){if(_0x469999(0xd8a)!==_0x469999(0xd8a))this['startMotion'](_0x469999(0x79c));else{if($gameScreen[_0x469999(0x3d0)]()[_0x469999(0xcd9)]>0x0)return!![];if($gameScreen[_0x469999(0x3d0)]()[_0x469999(0xd37)]>0x0)return!![];this['_waitMode']='';}}break;case _0x469999(0x472):if(BattleManager['_spriteset'][_0x469999(0xe3f)]())return!![];this['_waitMode']='';break;case _0x469999(0xce3):if(BattleManager[_0x469999(0x3ed)][_0x469999(0xbdf)]())return!![];this[_0x469999(0xcd7)]='';break;case _0x469999(0x559):if(BattleManager['_spriteset'][_0x469999(0x9dd)]())return!![];this[_0x469999(0xcd7)]='';break;case _0x469999(0x66a):if(BattleManager['_logWindow'][_0x469999(0x203)]())return!![];this['_waitMode']='';break;case _0x469999(0xdc6):if(BattleManager[_0x469999(0x3ed)][_0x469999(0x943)]())return!![];this[_0x469999(0xcd7)]='';break;case _0x469999(0xd76):if(BattleManager['_spriteset'][_0x469999(0x361)]())return!![];this[_0x469999(0xcd7)]='';break;case _0x469999(0xd7d):if(BattleManager[_0x469999(0x3ed)]['isAnyoneGrowing']())return!![];this['_waitMode']='';break;case _0x469999(0xdd4):if(BattleManager[_0x469999(0x3ed)][_0x469999(0xe40)]())return!![];this[_0x469999(0xcd7)]='';break;case _0x469999(0x5e5):if(Imported[_0x469999(0x34a)]){if(_0x469999(0x208)===_0x469999(0xb91)){if(_0x2f5bb8===_0x390297['actor']())return![];}else{if(BattleManager[_0x469999(0x3ed)]['isAnyProjectilePresent']())return!![];this['_waitMode']='';}}break;case'battleSkew':if(Imported[_0x469999(0xb02)]){if($gameScreen[_0x469999(0x3d0)]()['skewDuration']>0x0)return!![];this[_0x469999(0xcd7)]='';}break;case'battleSpin':if(BattleManager['_spriteset']['isAnyoneSpinning']())return!![];this[_0x469999(0xcd7)]='';break;case'battleZoom':if(Imported[_0x469999(0xb02)]){if(_0x469999(0xc2a)!==_0x469999(0x67e)){if($gameScreen[_0x469999(0x3d0)]()[_0x469999(0xc35)]>0x0)return!![];this[_0x469999(0xcd7)]='';}else{if(_0x14d92d[_0x469999(0xda2)]>_0x41bcb5)_0x52d04b+=_0x584c8d['width']/0x2+_0x3de26a;if(_0x47214b['_baseX']<_0x607731)_0x87fc6e-=_0x5d2e5b[_0x469999(0x6e4)]/0x2+_0x1c9e93;}}break;case _0x469999(0xb1a):if(Imported[_0x469999(0x654)]){if(BattleManager['_spriteset'][_0x469999(0xaf3)]){if(_0x469999(0x536)!==_0x469999(0x868)){if(BattleManager[_0x469999(0x3ed)][_0x469999(0xaf3)]())return!![];this[_0x469999(0xcd7)]=_0x469999(0x26c);}else _0x54d2f2+=_0x53fe3e;}else'LIkTd'===_0x469999(0x51f)?this[_0x469999(0xcd7)]='':_0x4aeaab=_0x5596a2;break;}break;case'battleInjectAni':if(Imported['VisuMZ_3_ActSeqImpact']){if('YWmyj'!==_0x469999(0x9d5)){if(BattleManager['_spriteset']['isAnyoneInjectAnimating']())return!![];this[_0x469999(0xcd7)]='';}else _0x21a70a[_0x469999(0x843)](_0x495e0a);}break;}else this[_0x469999(0x452)](_0x408297,_0x37366f,_0x2d31a0);}return VisuMZ[_0x469999(0xca2)][_0x469999(0x8a9)][_0x469999(0xded)](this);},VisuMZ['BattleCore'][_0x5c342f(0x7e2)]=Game_Interpreter[_0x5c342f(0xca4)][_0x5c342f(0x331)],Game_Interpreter['prototype']['command301']=function(_0x46ca75){const _0x46e034=_0x5c342f;if(!$gameParty[_0x46e034(0xdcc)]()){if(_0x46e034(0x1d5)!==_0x46e034(0x1d5))this[_0x46e034(0xd3f)]();else return this['command301_PreBattleEvent'](_0x46ca75);}else return VisuMZ[_0x46e034(0xca2)]['Game_Interpreter_command301'][_0x46e034(0xded)](this,_0x46ca75);},Game_Interpreter[_0x5c342f(0xca4)][_0x5c342f(0x64e)]=function(_0x2277e0){const _0x3e9461=_0x5c342f;return VisuMZ[_0x3e9461(0xca2)][_0x3e9461(0x7e2)][_0x3e9461(0xded)](this,_0x2277e0),BattleManager['setEventCallback'](_0x4ba87a=>{const _0xa52453=_0x3e9461;this[_0xa52453(0x2ec)][this[_0xa52453(0xc41)]]=_0x4ba87a;}),!![];},VisuMZ[_0x5c342f(0xca2)]['CheckMapBattleEventValid']=function(_0x97e4e6){const _0x46a89d=_0x5c342f,_0x43c952=$dataCommonEvents[_0x97e4e6];if(!_0x43c952)return![];if(_0x43c952[_0x46a89d(0x594)][_0x46a89d(0xc5c)]<=0x1)return![];return!![];},Game_Interpreter[_0x5c342f(0xca4)]['command301_PreBattleEvent']=function(_0x5047d1){const _0x14ba15=_0x5c342f,_0x372d4f=VisuMZ[_0x14ba15(0xca2)][_0x14ba15(0xc90)][_0x14ba15(0x535)],_0x5a0f47=_0x372d4f[_0x14ba15(0x5b1)],_0x263f04=$dataCommonEvents[_0x5a0f47];if(_0x263f04&&VisuMZ[_0x14ba15(0xca2)][_0x14ba15(0x202)](_0x5a0f47)){const _0x362d19=this[_0x14ba15(0x8a8)]()?this[_0x14ba15(0x59d)]:0x0,_0x42d113=_0x263f04[_0x14ba15(0x594)];this[_0x14ba15(0x99f)](_0x42d113,_0x362d19),this[_0x14ba15(0xb77)]=JsonEx[_0x14ba15(0x388)](this[_0x14ba15(0xb77)]);const _0xded25e={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx['makeDeepCopy'](_0x5047d1)};return this['_list'][_0x14ba15(0x482)](this['_index']+0x1,0x0,_0xded25e),!![];}else{if('pMJxO'==='QDnHV'){if(this['isTurnBased']())this['processBattleCoreJS'](_0x14ba15(0xb9e));_0xd92ba5[_0x14ba15(0xca2)]['BattleManager_startTurn'][_0x14ba15(0xded)](this);if(this[_0x14ba15(0x71a)]())this[_0x14ba15(0x6d1)](_0x14ba15(0xc6d));}else return VisuMZ['BattleCore'][_0x14ba15(0x7e2)][_0x14ba15(0xded)](this,_0x5047d1);}},VisuMZ['BattleCore'][_0x5c342f(0x77a)]=BattleManager['onEncounter'],BattleManager[_0x5c342f(0x448)]=function(){const _0x3f032=_0x5c342f;VisuMZ[_0x3f032(0xca2)][_0x3f032(0x77a)]['call'](this),this[_0x3f032(0x335)]();},BattleManager['onEncounterBattleCore']=function(){const _0x226e2e=_0x5c342f,_0x11fe20=VisuMZ[_0x226e2e(0xca2)]['Settings'][_0x226e2e(0x535)],_0x323e13=_0x11fe20[_0x226e2e(0x5b1)];_0x323e13&&VisuMZ[_0x226e2e(0xca2)][_0x226e2e(0x202)](_0x323e13)&&(this[_0x226e2e(0x269)]=!![],$gameTemp['reserveCommonEvent'](_0x11fe20['BattleStartEvent']),$gameMap[_0x226e2e(0x8c5)](),$gameMap[_0x226e2e(0xb7e)][_0x226e2e(0xbae)]=!![]),_0x11fe20[_0x226e2e(0x3aa)]>0x0&&(_0x226e2e(0x6b4)!==_0x226e2e(0xc8f)?this[_0x226e2e(0xd2a)]=!![]:this['startMove'](0x0,0x0,0xc));},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x4f4)]=Scene_Map[_0x5c342f(0xca4)]['updateCallMenu'],Scene_Map[_0x5c342f(0xca4)]['updateCallMenu']=function(){const _0xeef031=_0x5c342f;if(BattleManager[_0xeef031(0x269)])return;VisuMZ['BattleCore'][_0xeef031(0x4f4)][_0xeef031(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xd85)]=Scene_Map[_0x5c342f(0xca4)][_0x5c342f(0xa20)],Scene_Map[_0x5c342f(0xca4)][_0x5c342f(0xa20)]=function(){const _0x2ba5aa=_0x5c342f;if(BattleManager[_0x2ba5aa(0x269)])this[_0x2ba5aa(0xd79)]();else{if(_0x2ba5aa(0xc31)==='MoehN')return this['isDTB']();else VisuMZ[_0x2ba5aa(0xca2)][_0x2ba5aa(0xd85)][_0x2ba5aa(0xded)](this);}},Scene_Map['prototype'][_0x5c342f(0xd79)]=function(){const _0x404444=_0x5c342f;this[_0x404444(0x537)]=!![];},VisuMZ['BattleCore'][_0x5c342f(0x20c)]=SceneManager[_0x5c342f(0x91a)],SceneManager['isSceneChanging']=function(){const _0x4bbba2=_0x5c342f;if(BattleManager[_0x4bbba2(0x269)])return![];return VisuMZ['BattleCore']['SceneManager_isSceneChanging'][_0x4bbba2(0xded)](this);},VisuMZ['BattleCore'][_0x5c342f(0x99e)]=Game_Interpreter[_0x5c342f(0xca4)][_0x5c342f(0xd3f)],Game_Interpreter[_0x5c342f(0xca4)][_0x5c342f(0xd3f)]=function(){const _0x748ade=_0x5c342f;VisuMZ[_0x748ade(0xca2)]['Game_Interpreter_terminate'][_0x748ade(0xded)](this),this['_preBattleCommonEvent']&&(this['_preBattleCommonEvent']=undefined,SceneManager[_0x748ade(0x201)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x5c342f(0xca4)][_0x5c342f(0x7d5)]=function(){const _0x2c1d1b=_0x5c342f;BattleManager[_0x2c1d1b(0x269)]=undefined,BattleManager[_0x2c1d1b(0xaff)]=!![],this[_0x2c1d1b(0xbeb)]();},VisuMZ[_0x5c342f(0xca2)]['Scene_Map_initializeAfter']=Scene_Map[_0x5c342f(0xca4)]['initialize'],Scene_Map[_0x5c342f(0xca4)]['initialize']=function(){const _0x372fc9=_0x5c342f;VisuMZ[_0x372fc9(0xca2)][_0x372fc9(0xc0e)][_0x372fc9(0xded)](this),BattleManager[_0x372fc9(0xaff)]&&(this['_active']=!![],BattleManager[_0x372fc9(0xaff)]=undefined);},VisuMZ[_0x5c342f(0xca2)]['Scene_Map_initialize']=Scene_Map['prototype']['initialize'],Scene_Map[_0x5c342f(0xca4)][_0x5c342f(0xd5a)]=function(){const _0x2b6ebf=_0x5c342f;VisuMZ[_0x2b6ebf(0xca2)][_0x2b6ebf(0x5e2)][_0x2b6ebf(0xded)](this),$gameTemp[_0x2b6ebf(0x63c)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x50f)]=Scene_ItemBase[_0x5c342f(0xca4)][_0x5c342f(0x367)],Scene_ItemBase['prototype'][_0x5c342f(0x367)]=function(){const _0xd282ad=_0x5c342f;VisuMZ['BattleCore'][_0xd282ad(0x50f)][_0xd282ad(0xded)](this);if(this[_0xd282ad(0xa87)]()[_0xd282ad(0x340)][_0xd282ad(0xcbd)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;if(this['item']()[_0xd282ad(0x340)][_0xd282ad(0xcbd)](/<CUSTOM ACTION SEQUENCE>/i)){if('IOkbn'===_0xd282ad(0x97e))$gameTemp[_0xd282ad(0x79d)]=[];else{if(_0x22b690){const _0x163f3d=_0x19288e[_0xd282ad(0x570)](_0x1b1891);return _0x163f3d>=0x0?[_0x2aed64[_0x163f3d+0x1]||_0x2b02c0]:[_0xed4122];}}}DataManager[_0xd282ad(0xbf1)](this['item']())&&($gameTemp[_0xd282ad(0x79d)]=[]);},VisuMZ['BattleCore']['Scene_Options_maxCommands']=Scene_Options['prototype'][_0x5c342f(0xc0d)],Scene_Options['prototype'][_0x5c342f(0xc0d)]=function(){const _0x1e981b=_0x5c342f;let _0x1f1263=VisuMZ['BattleCore'][_0x1e981b(0xcc3)]['call'](this);const _0x4ea289=VisuMZ['BattleCore']['Settings'];if(_0x4ea289[_0x1e981b(0xdeb)][_0x1e981b(0xd55)]&&_0x4ea289[_0x1e981b(0xdeb)]['AdjustRect'])_0x1f1263+=0x2;if(_0x4ea289[_0x1e981b(0x82c)][_0x1e981b(0xd55)]&&_0x4ea289[_0x1e981b(0x82c)]['AdjustRect'])_0x1f1263+=0x1;return _0x1f1263;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x32f)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xd5a)],Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xd5a)]=function(){const _0x519331=_0x5c342f;VisuMZ[_0x519331(0xca2)][_0x519331(0x32f)][_0x519331(0xded)](this),this[_0x519331(0x9f5)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x28d)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x319)],Scene_Battle['prototype'][_0x5c342f(0x319)]=function(){const _0x48379f=_0x5c342f;if(SceneManager[_0x48379f(0x404)]()){if(_0x48379f(0x2bd)!==_0x48379f(0x2bd)){if(!_0x5c8dbf[_0x48379f(0x371)]())return;if(!_0xf7c6e6[_0x48379f(0x348)])return;_0x756007[_0x48379f(0x2ee)](_0x22c0c1,_0x5ecef3);const _0x597679=_0x1a2bf7[_0x48379f(0xca2)][_0x48379f(0xbd2)](_0x404e26);_0x5d0f14[_0x48379f(0x201)]['startVisualCutin'](_0x597679);const _0x15ee02=_0x122121['getLastPluginCommandInterpreter']();_0x15ee02&&_0x2115fe['WaitForEntrance']&&_0x15ee02['setWaitMode'](_0x48379f(0x731));}else Scene_Message[_0x48379f(0xca4)][_0x48379f(0x319)]['call'](this),this[_0x48379f(0x3ed)]&&this['_spriteset'][_0x48379f(0x2a5)](),BattleManager[_0x48379f(0x1dc)]&&BattleManager[_0x48379f(0x95b)]();}else VisuMZ[_0x48379f(0xca2)][_0x48379f(0x28d)][_0x48379f(0xded)](this),$gameTroop['onBattleStartOnceParallels']();},VisuMZ['BattleCore'][_0x5c342f(0xc52)]=Scene_Battle['prototype']['stop'],Scene_Battle['prototype'][_0x5c342f(0xbeb)]=function(){const _0x51741d=_0x5c342f;SceneManager[_0x51741d(0xd97)]()?Scene_Message[_0x51741d(0xca4)]['stop'][_0x51741d(0xded)](this):'tLeTp'!==_0x51741d(0x9a5)?_0x20111c[_0x51741d(0xd31)]():VisuMZ[_0x51741d(0xca2)][_0x51741d(0xc52)][_0x51741d(0xded)](this);},VisuMZ['BattleCore'][_0x5c342f(0x67d)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xd3f)],Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xd3f)]=function(){const _0x10c18a=_0x5c342f;SceneManager[_0x10c18a(0xd97)]()?_0x10c18a(0x418)!=='xLNeq'?Scene_Message[_0x10c18a(0xca4)][_0x10c18a(0xd3f)][_0x10c18a(0xded)](this):this['selectNextActor']():_0x10c18a(0x97f)==='rHgay'?VisuMZ[_0x10c18a(0xca2)][_0x10c18a(0x67d)][_0x10c18a(0xded)](this):this[_0x10c18a(0x764)]=_0x3f6bb1,$gameTemp['clearBattleBalloons'](),this['clearOnceParallelInterpreters']();},Scene_Battle[_0x5c342f(0xca4)]['isRightInputMode']=function(){const _0x207724=_0x5c342f;if(ConfigManager['uiMenuStyle']&&ConfigManager[_0x207724(0x70c)]!==undefined)return ConfigManager[_0x207724(0x70c)];else{if(this['battleLayoutStyle']()===_0x207724(0x966))return![];else{if(_0x207724(0xe08)!==_0x207724(0xbc2)){return Scene_Message['prototype']['isRightInputMode'][_0x207724(0xded)](this);;}else _0x26765b[_0x207724(0xc17)]([_0x24150a]);}}},VisuMZ['BattleCore']['Scene_Battle_createAllWindows']=Scene_Battle[_0x5c342f(0xca4)]['createAllWindows'],Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xb8a)]=function(){const _0x283b61=_0x5c342f;this[_0x283b61(0xe2f)](),VisuMZ[_0x283b61(0xca2)]['Scene_Battle_createAllWindows'][_0x283b61(0xded)](this),this[_0x283b61(0x79f)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x8b0)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x1f1)],Scene_Battle[_0x5c342f(0xca4)]['createEnemyWindow']=function(){const _0x4c2a54=_0x5c342f;VisuMZ[_0x4c2a54(0xca2)][_0x4c2a54(0x8b0)][_0x4c2a54(0xded)](this),this['createMultiTargetWindows']();},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x97c)]=function(){const _0x5f2129=_0x5c342f;this[_0x5f2129(0xbe9)](!![]),this[_0x5f2129(0xbe9)](![]);},Scene_Battle['prototype'][_0x5c342f(0xc75)]=function(_0x12cbcb){const _0x408115=_0x5c342f,_0x4d360c=Window_BattleMultiTarget[_0x408115(0x9b5)],_0x46f3ac=this[_0x408115(0xba2)](0x1,!![]);let _0xbaf948=_0x12cbcb?Graphics[_0x408115(0xba3)]-_0x4d360c:0x0;_0xbaf948+=_0x12cbcb?Window_BattleMultiTarget[_0x408115(0x1c7)]:Window_BattleMultiTarget[_0x408115(0x9c7)];const _0x5185c6=['frontview_ui'][_0x408115(0xaec)](this[_0x408115(0xcf1)]())?0x0:this['_statusWindow'][_0x408115(0x880)];let _0x285c19=Graphics[_0x408115(0x2f9)]-_0x5185c6-_0x46f3ac;return _0x285c19+=_0x12cbcb?Window_BattleMultiTarget['ACTOR_OFFSET_Y']:Window_BattleMultiTarget[_0x408115(0x614)],new Rectangle(_0xbaf948,_0x285c19,_0x4d360c,_0x46f3ac);},Scene_Battle[_0x5c342f(0xca4)]['createMultiTargetWindow']=function(_0x7207b7){const _0x3465c3=_0x5c342f,_0x250c39=this[_0x3465c3(0xc75)](_0x7207b7),_0x579532=new Window_BattleMultiTarget(_0x250c39,_0x7207b7);this[_0x3465c3(0x5e7)](_0x579532);if(_0x7207b7)this[_0x3465c3(0x764)]=_0x579532;else{if(_0x3465c3(0x16f)!=='NcIdf'){if(_0x2fe98e[_0x3465c3(0x9da)][_0x3465c3(0xda9)]<1.19){let _0x3f9e0b='';_0x3f9e0b+='VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20',_0x3f9e0b+='in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20',_0x3f9e0b+=_0x3465c3(0x395),_0x46ea4d(_0x3f9e0b),_0x1d4b9e['exit']();}}else this[_0x3465c3(0x652)]=_0x579532;}},VisuMZ['BattleCore']['Scene_Battle_createCancelButton']=Scene_Battle['prototype'][_0x5c342f(0xd88)],Scene_Battle[_0x5c342f(0xca4)]['createCancelButton']=function(){const _0x2f3f41=_0x5c342f;VisuMZ[_0x2f3f41(0xca2)]['Scene_Battle_createCancelButton'][_0x2f3f41(0xded)](this);if(this[_0x2f3f41(0xcf1)]()==='border'){if(_0x2f3f41(0xb6a)!==_0x2f3f41(0xb6a)){if(_0x485a9d['battleCameraData']()[_0x2f3f41(0xb0d)]>0x0)return!![];this[_0x2f3f41(0xcd7)]='';}else this[_0x2f3f41(0xbf0)]();}},Scene_Battle['prototype'][_0x5c342f(0x253)]=function(_0x342a52){const _0x214f12=_0x5c342f;_0x342a52?(this[_0x214f12(0xd2e)]['x']=(Graphics[_0x214f12(0x6e4)]-Graphics[_0x214f12(0xba3)])/0x2,this[_0x214f12(0xd2e)]['y']=(Graphics['height']-Graphics[_0x214f12(0x2f9)])/0x2):'nNtwK'!==_0x214f12(0x679)?(this['_windowLayer']['x']=Graphics['width']*0xa,this['_windowLayer']['y']=Graphics[_0x214f12(0x880)]*0xa):_0x315078[_0x214f12(0xa02)]?this[_0x214f12(0xb29)]=_0x214f12(0xbc5):this[_0x214f12(0xb29)]=_0x214f12(0x4e4);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xb6f)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xb3e)],Scene_Battle['prototype'][_0x5c342f(0xb3e)]=function(){const _0x22d810=_0x5c342f,_0x21631f=BattleManager['actor']();VisuMZ[_0x22d810(0xca2)][_0x22d810(0xb6f)]['call'](this);if(_0x21631f){if(_0x21631f===BattleManager[_0x22d810(0x761)]())return;if(_0x21631f===BattleManager['_subject'])return;if(_0x21631f['battler']())_0x21631f[_0x22d810(0x9d3)]()[_0x22d810(0x596)]();}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x2a9)]=Scene_Battle['prototype'][_0x5c342f(0x9fc)],Scene_Battle[_0x5c342f(0xca4)]['selectPreviousCommand']=function(){const _0x3dbc17=_0x5c342f,_0x1cbd4f=BattleManager[_0x3dbc17(0x761)]();if(_0x1cbd4f&&_0x1cbd4f[_0x3dbc17(0x9d3)])_0x1cbd4f[_0x3dbc17(0x9d3)]()[_0x3dbc17(0x596)]();VisuMZ[_0x3dbc17(0xca2)]['Scene_Battle_selectPreviousCommand']['call'](this);},VisuMZ[_0x5c342f(0xca2)]['Scene_Battle_logWindowRect']=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xdb2)],Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xdb2)]=function(){const _0x5c9e48=_0x5c342f;if(VisuMZ['BattleCore'][_0x5c9e48(0xc90)][_0x5c9e48(0x831)][_0x5c9e48(0xbf5)]){if(_0x5c9e48(0xa4d)!==_0x5c9e48(0xa4d))_0x8598e+=_0x21d458,_0x2b00ed+=_0x3a4ab4['isActor']()?-_0x477e33:_0x148274;else return VisuMZ[_0x5c9e48(0xca2)][_0x5c9e48(0xc90)]['BattleLog']['BattleLogRectJS'][_0x5c9e48(0xded)](this);}return VisuMZ[_0x5c9e48(0xca2)][_0x5c9e48(0x805)][_0x5c9e48(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xaea)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xb78)],Scene_Battle['prototype'][_0x5c342f(0xb78)]=function(){const _0x2be24f=_0x5c342f;VisuMZ[_0x2be24f(0xca2)][_0x2be24f(0xaea)][_0x2be24f(0xded)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x4a1)]=function(){const _0x51e704=_0x5c342f,_0x2f0cfa=this['_partyCommandWindow'];_0x2f0cfa[_0x51e704(0x286)](_0x51e704(0x659),this['commandAutoBattle'][_0x51e704(0x5c9)](this)),_0x2f0cfa['setHandler']('options',this[_0x51e704(0xdb4)][_0x51e704(0x5c9)](this));const _0x5cdfba=this[_0x51e704(0xcf1)]();switch(_0x5cdfba){case'xp':case _0x51e704(0x483):return this[_0x51e704(0x98f)][_0x51e704(0x623)](0x1);break;}},Scene_Battle['prototype'][_0x5c342f(0xb6b)]=function(){const _0x4c48a3=_0x5c342f;BattleManager[_0x4c48a3(0x7e0)]=!![],$gameParty['makeActions'](),this['selectNextCommand'](),BattleManager['isTpb']()&&(_0x4c48a3(0x408)!=='FLVxp'?_0x31b296['push'](new _0x43f1b1(_0x572779)):BattleManager['_inputting']=![]);},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xdb4)]=function(){const _0x3e494e=_0x5c342f;if(this[_0x3e494e(0xce1)]()){if(_0x3e494e(0x510)===_0x3e494e(0x68d)){const _0x58de9a=this[_0x3e494e(0x759)];_0x58de9a&&(_0x58de9a[_0x3e494e(0x339)]['x']=this[_0x3e494e(0xc3c)](),_0x58de9a[_0x3e494e(0x339)]['y']=this[_0x3e494e(0x569)]());}else this[_0x3e494e(0x2b7)]=!![],this[_0x3e494e(0x56f)][_0x3e494e(0x843)](_0x3e494e(0x3ff),VisuMZ[_0x3e494e(0xca2)][_0x3e494e(0xc90)][_0x3e494e(0x7e4)][_0x3e494e(0x38e)]);}else{if(_0x3e494e(0x5f0)===_0x3e494e(0xc9c))return!![];else this[_0x3e494e(0xb8d)]();}},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xce1)]=function(){const _0x347c22=_0x5c342f;return BattleManager[_0x347c22(0x7a6)]();},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xb8d)]=function(){const _0x479388=_0x5c342f;this[_0x479388(0x2b7)]=![],this[_0x479388(0x3ed)][_0x479388(0x2a5)](),this[_0x479388(0xd2e)][_0x479388(0x747)]=![];if(BattleManager[_0x479388(0xc7a)]()){if(_0x479388(0x875)==='nOTCL'){if(!_0x38f090['isSceneBattle']())return;_0x414af7['ConvertParams'](_0xf05570,_0x46a0c1);const _0x1d9cc5=_0x56d795[_0x479388(0x3d1)](),_0x5ae97c=_0x5a7973[_0x479388(0x432)](_0x367c7c[_0x479388(0x63d)]),_0x40c04c=_0x38028d['AnimationID'],_0x37a0fc=_0x59bf88['Mirror'];if(!_0x1d9cc5)return;_0x5fc8db[_0x479388(0x299)](_0x5ae97c,_0x40c04c,_0x37a0fc);if(_0x155aaa[_0x479388(0x7d2)])_0x1d9cc5[_0x479388(0x430)](_0x479388(0xbfb));}else($dataSystem[_0x479388(0xd8b)]||$dataSystem['battleback2Name'])&&SceneManager['snapForBackground']();}else($gameMap[_0x479388(0xd8b)]()||$gameMap[_0x479388(0xe2c)]())&&SceneManager[_0x479388(0x8b5)]();SceneManager['push'](Scene_Options);if(BattleManager[_0x479388(0x84f)]()){if(_0x479388(0x5e9)==='OzSKZ')BattleManager[_0x479388(0x1dc)]=BattleManager[_0x479388(0x761)]();else{if(_0x39786a[_0x479388(0x340)][_0x479388(0xcbd)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x420ca6=_0x55365d(_0x3d5780['$1'])[_0x479388(0xb34)]()[_0x479388(0xa5e)]();if(_0x420ca6===_0x479388(0x711))return _0x479388(0x711);if(_0x4844b6[_0x479388(0xa30)][_0x420ca6])return _0x420ca6;}const _0x473473=_0x4790d8['BattleCore']['Settings']['Damage']['DefaultDamageStyle'][_0x479388(0xb34)]()[_0x479388(0xa5e)]();if(_0x4f28ab[_0x479388(0xa30)][_0x473473])return _0x473473;return'MANUAL';}}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x1ee)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x33b)],Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x33b)]=function(){const _0x49c620=_0x5c342f;VisuMZ['BattleCore']['Scene_Battle_updateBattleProcess'][_0x49c620(0xded)](this);if(this[_0x49c620(0x2b7)]&&!BattleManager[_0x49c620(0x52b)])this['callOptions']();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xd78)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x2a5)],Scene_Battle[_0x5c342f(0xca4)]['update']=function(){const _0x24928b=_0x5c342f;VisuMZ['BattleCore'][_0x24928b(0xd78)][_0x24928b(0xded)](this),this[_0x24928b(0x7be)]();},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x79f)]=function(){const _0x97f119=_0x5c342f,_0x2c0558=this['autoBattleWindowRect']();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x2c0558),this['_autoBattleWindow'][_0x97f119(0xa29)](),this[_0x97f119(0x393)](this[_0x97f119(0xa65)]);},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xb94)]=function(){const _0x2f27f4=_0x5c342f;return VisuMZ[_0x2f27f4(0xca2)][_0x2f27f4(0xc90)][_0x2f27f4(0xdeb)][_0x2f27f4(0x67a)]['call'](this);},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x9f5)]=function(){const _0x103f68=_0x5c342f;this[_0x103f68(0xcb9)]=[];},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x7be)]=function(){const _0x4c3267=_0x5c342f;if(!this[_0x4c3267(0xcb9)])return;for(const _0x23e576 of this['_onceParallelInterpreters']){_0x23e576&&_0x23e576['update']();}},Scene_Battle['prototype'][_0x5c342f(0x220)]=function(_0x400492){const _0x36ca1a=_0x5c342f,_0x214fb0=$dataCommonEvents[_0x400492];if(!_0x214fb0)return;const _0xd0022d=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0xd0022d),_0xd0022d[_0x36ca1a(0xd9c)](_0x400492);},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x419)]=function(_0x1a98e3){const _0xeb3841=_0x5c342f;this['_onceParallelInterpreters']=this[_0xeb3841(0xcb9)]||[],this[_0xeb3841(0xcb9)][_0xeb3841(0x843)](_0x1a98e3);},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xae8)]=function(_0x2057ca){const _0x5955e5=_0x5c342f;this[_0x5955e5(0xcb9)]=this['_onceParallelInterpreters']||[],this['_onceParallelInterpreters'][_0x5955e5(0x5e1)](_0x2057ca);},Game_Troop['prototype'][_0x5c342f(0xc7d)]=function(){const _0x496209=_0x5c342f;for(const _0x575381 of this[_0x496209(0x5dc)]()[_0x496209(0x64a)]){if(!this[_0x496209(0x74a)](_0x575381))continue;SceneManager[_0x496209(0x201)][_0x496209(0x591)](_0x575381);}},Game_Troop['prototype']['doesPageHaveOnceParallelStart']=function(_0x5a7a96){const _0xceaab4=_0x5c342f;if(!_0x5a7a96)return;for(const _0x53ff9b of _0x5a7a96[_0xceaab4(0x594)]){if([0x6c,0x198]['includes'](_0x53ff9b['code'])){const _0x23baa7=_0x53ff9b[_0xceaab4(0x5c7)][0x0];if(_0x23baa7[_0xceaab4(0xcbd)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x591)]=function(_0xa74fb1){const _0x372ede=_0x5c342f;if(!_0xa74fb1)return;const _0xf28594=new Game_BattleOnceParallelInterpreter();this[_0x372ede(0x419)](_0xf28594),_0xf28594[_0x372ede(0xbb9)](_0xa74fb1);};function Game_BattleOnceParallelInterpreter(){const _0x582a33=_0x5c342f;this[_0x582a33(0xd5a)](...arguments);}function _0x3110(_0x55b10b,_0x202bd0){const _0x21ac2b=_0x21ac();return _0x3110=function(_0x3110da,_0x1a236c){_0x3110da=_0x3110da-0x168;let _0x1f9d5f=_0x21ac2b[_0x3110da];return _0x1f9d5f;},_0x3110(_0x55b10b,_0x202bd0);}Game_BattleOnceParallelInterpreter[_0x5c342f(0xca4)]=Object[_0x5c342f(0xccb)](Game_Interpreter[_0x5c342f(0xca4)]),Game_BattleOnceParallelInterpreter[_0x5c342f(0xca4)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x5c342f(0xca4)][_0x5c342f(0xd9c)]=function(_0x2b4b84){const _0x30cb0d=_0x5c342f,_0x44dc74=$dataCommonEvents[_0x2b4b84];_0x44dc74?this[_0x30cb0d(0x5bd)](_0x44dc74['list'],0x0):this[_0x30cb0d(0xd3f)]();},Game_BattleOnceParallelInterpreter['prototype'][_0x5c342f(0xd3f)]=function(){const _0x34e1e5=_0x5c342f;if(!SceneManager[_0x34e1e5(0x371)]())return;SceneManager[_0x34e1e5(0x201)][_0x34e1e5(0xae8)](this),Game_Interpreter[_0x34e1e5(0xca4)][_0x34e1e5(0xd3f)][_0x34e1e5(0xded)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x5c342f(0xbb9)]=function(_0x59b916){const _0x2b40e8=_0x5c342f;if(_0x59b916){if(_0x2b40e8(0x69b)!==_0x2b40e8(0xcdb))this[_0x2b40e8(0x5bd)](_0x59b916['list'],0x0);else return this['item']()&&this[_0x2b40e8(0xa87)]()[_0x2b40e8(0x340)][_0x2b40e8(0xcbd)](/<CANNOT TARGET (?:USER|SELF)>/i);}else'KKkzQ'!==_0x2b40e8(0x7e6)?(_0x1da67e['BattleCore'][_0x2b40e8(0x28d)][_0x2b40e8(0xded)](this),_0x3de540[_0x2b40e8(0xc7d)]()):this[_0x2b40e8(0xd3f)]();},Scene_Battle['prototype'][_0x5c342f(0x84a)]=function(){const _0x445345=_0x5c342f;return VisuMZ[_0x445345(0xca2)][_0x445345(0xc90)][_0x445345(0x7e4)]['DisablePartyCmd'];},VisuMZ['BattleCore'][_0x5c342f(0x85d)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x368)],Scene_Battle[_0x5c342f(0xca4)]['startPartyCommandSelection']=function(){const _0x2e0d70=_0x5c342f;this[_0x2e0d70(0x84a)]()?'grGhG'!==_0x2e0d70(0xd40)?this[_0x2e0d70(0x66f)]():(_0x1b5f6a[_0x2e0d70(0xca2)][_0x2e0d70(0x96b)][_0x2e0d70(0xded)](this,_0x263e60),this[_0x2e0d70(0x24a)]()):_0x2e0d70(0xc37)!==_0x2e0d70(0xc37)?this[_0x2e0d70(0xd8c)]=[]:VisuMZ[_0x2e0d70(0xca2)]['Scene_Battle_startPartyCommandSelection']['call'](this);},Scene_Battle['prototype'][_0x5c342f(0x66f)]=function(){const _0x311819=_0x5c342f;if(BattleManager[_0x311819(0xa39)]())this[_0x311819(0xb3e)]();else{if(BattleManager[_0x311819(0x84f)]()){if(_0x311819(0xbc1)===_0x311819(0xca3)){if(!_0x270f84)return![];if(!_0x3e1183[_0x311819(0x2b2)])return![];if(!_0x4792e4['targetObjects'][0x0])return![];if(_0x28f64b['targetObjects'][0x0][_0x311819(0x47b)]&&!_0x5b5021[_0x311819(0x244)][0x0][_0x311819(0x47b)]())return![];if(_0xbf1125[_0x311819(0x9a3)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x978dcc[_0x311819(0x43e)]===_0x2fe1dc){if(_0x32d361[_0x311819(0x2b2)][_0x311819(0x675)]!==0x0)return![];}else{if(_0x25cc92[_0x311819(0x43e)]===_0x1dca1){if(_0xac519a[_0x311819(0x2b2)][_0x311819(0x560)]===0x3)return![];}}return!![];const _0x549655=_0x1bfed1[_0x311819(0xca4)]['battleLayoutStyle']();return['xp','portrait'][_0x311819(0x6f6)](_0x549655);}else VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection'][_0x311819(0xded)](this);}}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x63f)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x893)],Scene_Battle['prototype'][_0x5c342f(0x893)]=function(){const _0x3620e8=_0x5c342f;if(BattleManager['isTpb']())this['tpbCommandFight'](),this['startActorCommandSelection']();else{if(_0x3620e8(0xbdc)!==_0x3620e8(0xa68))VisuMZ['BattleCore'][_0x3620e8(0x63f)]['call'](this);else return _0x3620e8(0x16b)[_0x3620e8(0x266)](this[_0x3620e8(0x47b)]()?_0x3620e8(0x761):_0x3620e8(0x455),this['name']());}},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x7e3)]=function(){const _0x1dd158=_0x5c342f;if(!VisuMZ[_0x1dd158(0xca2)]['TpbActiveChangeEnabled'])return;if(Imported[_0x1dd158(0x82e)]&&BattleManager['isCTB']())return;const _0x53de82=$gameParty[_0x1dd158(0x4e9)]()[_0x1dd158(0x3cd)](_0x3a18ce=>_0x3a18ce[_0x1dd158(0x7b7)]()&&_0x3a18ce[_0x1dd158(0xc24)]());BattleManager[_0x1dd158(0x4f5)]=_0x53de82[0x0]||null,BattleManager[_0x1dd158(0x4f5)]&&BattleManager[_0x1dd158(0x4f5)][_0x1dd158(0x7fa)](_0x1dd158(0xd4e));},VisuMZ[_0x5c342f(0xca2)]['Scene_Battle_commandEscape']=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xaf1)],Scene_Battle[_0x5c342f(0xca4)]['commandEscape']=function(){const _0x55697b=_0x5c342f;VisuMZ[_0x55697b(0xca2)][_0x55697b(0x865)]['call'](this);if(!BattleManager['isTpb']())BattleManager[_0x55697b(0x4f5)]=null;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xa64)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x27e)],Scene_Battle['prototype']['createActorCommandWindow']=function(){const _0x2adde0=_0x5c342f;VisuMZ[_0x2adde0(0xca2)][_0x2adde0(0xa64)][_0x2adde0(0xded)](this),this['createActorCommandWindowBattleCore']();},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x259)]=function(){const _0x493ba7=_0x5c342f,_0x155034=this['_actorCommandWindow'];_0x155034['setHandler']('escape',this[_0x493ba7(0x75a)][_0x493ba7(0x5c9)](this)),_0x155034[_0x493ba7(0x286)](_0x493ba7(0x659),this['actorCommandAutoBattle']['bind'](this)),_0x155034['setHandler']('singleSkill',this[_0x493ba7(0x681)][_0x493ba7(0x5c9)](this));if(BattleManager[_0x493ba7(0x84f)]()){if(this['isPartyCommandWindowDisabled']()){if(_0x493ba7(0xb08)===_0x493ba7(0xb08))delete _0x155034['_handlers'][_0x493ba7(0x1a9)];else{if(this[_0x493ba7(0xcf1)]()===_0x493ba7(0x966))return this['skillItemWindowRectBorderStyle']();else return this[_0x493ba7(0x92a)]()?this[_0x493ba7(0xb5e)]():_0x12ea15[_0x493ba7(0xca2)]['Scene_Battle_itemWindowRect'][_0x493ba7(0xded)](this);}}else _0x493ba7(0x93a)===_0x493ba7(0xaa6)?(_0x12e24d[_0x493ba7(0x812)]=_0x310ee6,_0xf693c4[_0x493ba7(0x812)]=_0x566cb6,_0x128175['adjustPosition'](),_0x347cb6[_0x493ba7(0xe04)]()):_0x155034[_0x493ba7(0x286)](_0x493ba7(0x1a9),this[_0x493ba7(0x3c4)][_0x493ba7(0x5c9)](this));}},Scene_Battle[_0x5c342f(0xca4)]['actorCommandEscape']=function(){const _0x53ffc3=_0x5c342f;this[_0x53ffc3(0xaf1)]();},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xa2b)]=function(){const _0x3c7c3c=_0x5c342f;BattleManager['actor']()['makeAutoBattleActions'](),BattleManager[_0x3c7c3c(0x76e)](),BattleManager[_0x3c7c3c(0x753)](),this[_0x3c7c3c(0x49e)]();},Scene_Battle[_0x5c342f(0xca4)]['actorCommandSingleSkill']=function(){const _0x19e93c=_0x5c342f,_0x341028=BattleManager['inputtingAction'](),_0x46d716=this[_0x19e93c(0x8c1)][_0x19e93c(0xd29)]();_0x341028[_0x19e93c(0x5c6)](_0x46d716),BattleManager[_0x19e93c(0x761)]()[_0x19e93c(0xae1)]($dataSkills[_0x46d716]),this[_0x19e93c(0x42c)]();},Scene_Battle['prototype'][_0x5c342f(0x3c4)]=function(){const _0x2cd39d=_0x5c342f;if(this[_0x2cd39d(0x626)]()){if(_0x2cd39d(0xa7c)!=='GRBKa'){const _0x2fb586=_0x356c5a['inputtingAction']();if(!_0x2fb586)return!![];if(!_0x2fb586['item']())return!![];const _0x11d036=this[_0x2cd39d(0x455)](),_0x2d629d=_0x2fb586['item']()['note'];if(_0x2fb586['isForNotUser']()){if(_0x11d036===_0x4140ba['actor']())return![];}return!![];}else this[_0x2cd39d(0x95f)]();}else{if(_0x2cd39d(0x75f)!==_0x2cd39d(0x6a2))this['processActorCommandCancelTPB']();else{if(this['_defeatedEnemies']===_0x1c05f1)this[_0x2cd39d(0xcda)]();if(!_0x4415dd)return;if(this['_defeatedEnemies'][_0x2cd39d(0xaec)](_0x37d4e6))return;this[_0x2cd39d(0xb92)][_0x2cd39d(0x843)](_0xbbd0b7),this[_0x2cd39d(0xb92)][_0x2cd39d(0x293)]((_0x4b02e4,_0x147b35)=>_0x4b02e4-_0x147b35);}}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xa0d)]=![],Scene_Battle['prototype'][_0x5c342f(0x626)]=function(){const _0x1a52e0=_0x5c342f;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return![];else{if(_0x1a52e0(0x75e)!=='zjPto'){if(!VisuMZ[_0x1a52e0(0xca2)][_0x1a52e0(0xa0d)])return![];const _0x4cbe94=$gameParty[_0x1a52e0(0x4e9)]()[_0x1a52e0(0x3cd)](_0x4656c5=>_0x4656c5[_0x1a52e0(0x7b7)]()&&_0x4656c5['canInput']());return _0x4cbe94['length']>0x0&&BattleManager[_0x1a52e0(0x761)]()!==_0x4cbe94[_0x4cbe94[_0x1a52e0(0xc5c)]-0x1];}else{if(!_0x31209f[_0x1a52e0(0x371)]())return;const _0x23ff34=_0x1142e9[_0x1a52e0(0x56f)];_0x23ff34[_0x1a52e0(0xa52)]();}}},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x95f)]=function(){const _0x574e3f=_0x5c342f,_0x124aef=BattleManager['actor'](),_0x2cda23=_0x124aef[_0x574e3f(0x9d3)]();if(_0x2cda23)_0x2cda23['stepBack']();const _0xefcb2d=$gameParty[_0x574e3f(0x4e9)]()[_0x574e3f(0x3cd)](_0x3eb6d5=>_0x3eb6d5[_0x574e3f(0x7b7)]()&&_0x3eb6d5[_0x574e3f(0xc24)]()),_0x220cba=_0xefcb2d[_0x574e3f(0x570)](_0x124aef),_0x538a6e=_0xefcb2d[_0x220cba+0x1];BattleManager[_0x574e3f(0x4f5)]=_0x538a6e||null;if(_0x538a6e)_0x538a6e[_0x574e3f(0x7fa)]('inputting');_0x124aef['setActionState'](_0x574e3f(0xba5)),this[_0x574e3f(0x49e)]();},Scene_Battle[_0x5c342f(0xca4)]['processActorCommandCancelTPB']=function(){const _0x57ad9e=_0x5c342f;this[_0x57ad9e(0x98f)][_0x57ad9e(0x5bd)](),this[_0x57ad9e(0x8c1)][_0x57ad9e(0xd12)]();if(!VisuMZ[_0x57ad9e(0xca2)][_0x57ad9e(0xa0d)])return;if(Imported[_0x57ad9e(0x82e)]&&BattleManager[_0x57ad9e(0x33e)]())return;if(BattleManager[_0x57ad9e(0x4f5)]){if('AQQMw'==='sJAob')this['_distortionSprite'][_0x57ad9e(0x393)](this['_mainSprite']);else{BattleManager['_currentActor'][_0x57ad9e(0x7fa)](_0x57ad9e(0xba5));const _0x432615=BattleManager[_0x57ad9e(0x4f5)][_0x57ad9e(0x9d3)]();if(_0x432615)_0x432615['stepBack']();}}BattleManager['_currentActor']=null;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xad5)]=Scene_Battle[_0x5c342f(0xca4)]['createHelpWindow'],Scene_Battle[_0x5c342f(0xca4)]['createHelpWindow']=function(){const _0x9a3bc1=_0x5c342f;VisuMZ[_0x9a3bc1(0xca2)][_0x9a3bc1(0xad5)][_0x9a3bc1(0xded)](this),this[_0x9a3bc1(0x84e)]();},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x84e)]=function(){const _0x706d19=_0x5c342f;this[_0x706d19(0x8c1)][_0x706d19(0x9ac)](this[_0x706d19(0xbec)]),this[_0x706d19(0x98f)][_0x706d19(0x9ac)](this[_0x706d19(0xbec)]);},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xcf1)]=function(){const _0x6337de=_0x5c342f;if($gameTemp[_0x6337de(0xb29)]!==undefined){if(_0x6337de(0x9ad)!==_0x6337de(0x9ad)){const _0x187485=this['_commandNameWindow'];_0x187485['contents']['clear']();const _0x6e342a=this[_0x6337de(0x795)](this[_0x6337de(0x427)]());if(_0x6e342a===_0x6337de(0x6e3)&&this[_0x6337de(0x70f)]()>0x0){const _0x53ce89=this[_0x6337de(0x9eb)](this['index']());let _0x20ea21=this[_0x6337de(0x7a2)](this[_0x6337de(0x427)]());_0x20ea21=_0x20ea21['replace'](/\\I\[(\d+)\]/gi,''),_0x187485[_0x6337de(0xd04)](),this[_0x6337de(0xce0)](_0x20ea21,_0x53ce89),this[_0x6337de(0x7d4)](_0x20ea21,_0x53ce89),this['commandNameWindowCenter'](_0x20ea21,_0x53ce89);}}else return $gameTemp[_0x6337de(0xb29)];}if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];this[_0x6337de(0x1bd)]=VisuMZ['BattleCore'][_0x6337de(0xc90)]['BattleLayout']['Style']['toLowerCase']()['trim']();if(this[_0x6337de(0x1bd)]===_0x6337de(0xbc5)&&!Imported[_0x6337de(0xa02)]){if(_0x6337de(0x979)!==_0x6337de(0x979))return _0x1fe02e(_0xaf110['$1'])/0x64;else this[_0x6337de(0x1bd)]=_0x6337de(0x4e4);}return this[_0x6337de(0x1bd)]===_0x6337de(0xaa2)&&!Imported[_0x6337de(0x96f)]&&(this[_0x6337de(0x1bd)]=_0x6337de(0x4e4)),this[_0x6337de(0x1bd)];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x50e)]=Scene_Battle[_0x5c342f(0xca4)]['windowAreaHeight'],Scene_Battle['prototype'][_0x5c342f(0xb0f)]=function(){const _0x430fe0=_0x5c342f,_0x298577=this[_0x430fe0(0xcf1)]();switch(_0x298577){case _0x430fe0(0x594):return this['calcWindowHeight'](Math[_0x430fe0(0xaee)](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ['BattleCore'][_0x430fe0(0x50e)][_0x430fe0(0xded)](this);break;}},VisuMZ[_0x5c342f(0xca2)]['Scene_Battle_helpWindowRect']=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x5a7)],Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x5a7)]=function(){const _0x1c5fcc=_0x5c342f,_0x11dc57=this['battleLayoutStyle']();switch(_0x11dc57){case'border':return this[_0x1c5fcc(0x9e8)]();break;case _0x1c5fcc(0x4e4):case _0x1c5fcc(0x594):case'xp':case _0x1c5fcc(0x483):default:return VisuMZ[_0x1c5fcc(0xca2)][_0x1c5fcc(0xc4b)][_0x1c5fcc(0xded)](this);break;}},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x9c6)]=function(){const _0x57ffd8=_0x5c342f,_0x1011a6=this[_0x57ffd8(0xcf1)]();switch(_0x1011a6){case'xp':case _0x57ffd8(0x483):return this[_0x57ffd8(0xa82)]();break;case'border':return this[_0x57ffd8(0x245)]();break;case _0x57ffd8(0x4e4):case _0x57ffd8(0x594):default:return this[_0x57ffd8(0x6ec)]();break;}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x1b5)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xd51)],Scene_Battle['prototype']['partyCommandWindowRect']=function(){const _0x52661e=_0x5c342f,_0x8f12c7=this[_0x52661e(0xcf1)]();switch(_0x8f12c7){case'xp':case _0x52661e(0x483):return this[_0x52661e(0x4df)]();break;case _0x52661e(0x966):return this[_0x52661e(0x194)]();case _0x52661e(0x4e4):case _0x52661e(0x594):default:return this[_0x52661e(0xd60)]();break;}},Scene_Battle[_0x5c342f(0xca4)]['partyCommandWindowRectDefaultStyle']=function(){const _0x540837=_0x5c342f,_0x57d712=VisuMZ[_0x540837(0xca2)]['Settings']['BattleLayout'],_0x2dd1fd=_0x57d712[_0x540837(0xb33)]||0xc0,_0x515e85=this[_0x540837(0xb0f)](),_0x26ebaf=this[_0x540837(0xa95)]()?Graphics[_0x540837(0xba3)]-_0x2dd1fd:0x0,_0x1b3e09=Graphics[_0x540837(0x2f9)]-_0x515e85;return new Rectangle(_0x26ebaf,_0x1b3e09,_0x2dd1fd,_0x515e85);},Scene_Battle[_0x5c342f(0xca4)]['actorCommandWindowRect']=function(){const _0x10e860=_0x5c342f;return this[_0x10e860(0xd51)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x3c1)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x3c0)],Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x3c0)]=function(){const _0x5a099c=_0x5c342f,_0x53472f=this['battleLayoutStyle']();switch(_0x53472f){case'xp':case _0x5a099c(0x483):case'border':break;case _0x5a099c(0x4e4):case'list':default:VisuMZ[_0x5a099c(0xca2)][_0x5a099c(0x3c1)][_0x5a099c(0xded)](this);break;}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x3ad)]=Scene_Battle[_0x5c342f(0xca4)]['startActorSelection'],Scene_Battle[_0x5c342f(0xca4)]['startActorSelection']=function(){const _0x6298e3=_0x5c342f;VisuMZ['BattleCore'][_0x6298e3(0x3ad)][_0x6298e3(0xded)](this),this[_0x6298e3(0x49c)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xbd0)]=Scene_Battle['prototype'][_0x5c342f(0x1d1)],Scene_Battle['prototype'][_0x5c342f(0x1d1)]=function(){const _0x536d98=_0x5c342f;VisuMZ[_0x536d98(0xca2)][_0x536d98(0xbd0)][_0x536d98(0xded)](this),this[_0x536d98(0x995)][_0x536d98(0x986)](),this[_0x536d98(0x49c)]();},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x49c)]=function(){const _0x828957=_0x5c342f,_0x42f739=this[_0x828957(0xcf1)]();['xp','portrait',_0x828957(0x966)]['includes'](_0x42f739)&&this[_0x828957(0x8c1)][_0x828957(0xd12)](),(_0x42f739===_0x828957(0x966)||this[_0x828957(0x92a)]())&&(_0x828957(0x3c3)!==_0x828957(0x3c3)?(_0x2163d6[_0x828957(0xca4)][_0x828957(0x2a5)][_0x828957(0xded)](this),this[_0x828957(0x354)](),this[_0x828957(0xb40)](),this[_0x828957(0xb05)](),this[_0x828957(0xbe7)]()):(this[_0x828957(0x62b)]['close'](),this[_0x828957(0xd5d)][_0x828957(0xd12)]()));},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x4db)]=Scene_Battle[_0x5c342f(0xca4)]['onActorOk'],Scene_Battle[_0x5c342f(0xca4)]['onActorOk']=function(){const _0x2b59f2=_0x5c342f;VisuMZ[_0x2b59f2(0xca2)][_0x2b59f2(0x4db)]['call'](this),this['okTargetSelectionVisibility']();},Scene_Battle['prototype'][_0x5c342f(0x800)]=function(){const _0x36fa46=_0x5c342f;return[_0x36fa46(0x97a),_0x36fa46(0xc98),_0x36fa46(0xc4f)]['includes'](this[_0x36fa46(0x8c1)][_0x36fa46(0x36c)]());},VisuMZ['BattleCore'][_0x5c342f(0xe1b)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x4b7)],Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x4b7)]=function(){const _0xbcc87f=_0x5c342f;if(this['isNonSubmenuCancel']()){if('AktRb'==='AktRb')this[_0xbcc87f(0x338)]['show'](),this['_actorWindow']['hide'](),this[_0xbcc87f(0x8c1)][_0xbcc87f(0x5eb)]();else{if(!this[_0xbcc87f(0xca5)][_0xbcc87f(0x2b6)]())return;while(this[_0xbcc87f(0xca5)]['isDamagePopupRequested']()){this[_0xbcc87f(0xca5)]['isSpriteVisible']()&&this[_0xbcc87f(0xd94)]();}this[_0xbcc87f(0xca5)][_0xbcc87f(0xb3c)](),this[_0xbcc87f(0xca5)]['clearResult']();}}else VisuMZ['BattleCore'][_0xbcc87f(0xe1b)][_0xbcc87f(0xded)](this);this[_0xbcc87f(0x5ed)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x1e4)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x6df)],Scene_Battle[_0x5c342f(0xca4)]['onEnemyOk']=function(){const _0x492d6f=_0x5c342f,_0x43785f=BattleManager[_0x492d6f(0xc3f)]();_0x43785f[_0x492d6f(0xcfa)](this[_0x492d6f(0x995)][_0x492d6f(0x455)]()),this[_0x492d6f(0x995)][_0x492d6f(0xb60)](),VisuMZ[_0x492d6f(0xca2)][_0x492d6f(0x1e4)][_0x492d6f(0xded)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x937)]=Scene_Battle['prototype'][_0x5c342f(0x2fe)],Scene_Battle['prototype'][_0x5c342f(0x2fe)]=function(){const _0x584103=_0x5c342f;if(this[_0x584103(0x800)]()){if(_0x584103(0x304)!==_0x584103(0xcad))this[_0x584103(0x338)][_0x584103(0x828)](),this['_enemyWindow'][_0x584103(0xa29)](),this[_0x584103(0x8c1)]['activate']();else{if(this['actor']()['note'][_0x584103(0xcbd)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x2a2f4e(_0x408195['$1']);else{if(this['actor']()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x1031f2(_0x47aa4c['$1']);}return 0x0;}}else VisuMZ[_0x584103(0xca2)][_0x584103(0x937)][_0x584103(0xded)](this);this[_0x584103(0x5ed)](),this['_enemyWindow'][_0x584103(0xb60)]();},Scene_Battle[_0x5c342f(0xca4)]['okTargetSelectionVisibility']=function(){const _0x1154b5=_0x5c342f,_0x28f5c0=this[_0x1154b5(0xcf1)]();(_0x28f5c0===_0x1154b5(0x966)||this[_0x1154b5(0x92a)]())&&('eqRfB'!==_0x1154b5(0x70e)?(this[_0x1154b5(0x62b)]['open'](),this[_0x1154b5(0x62b)][_0x1154b5(0x344)]&&('BWhkM'===_0x1154b5(0xc8b)?this['openBattleActorWindow']():this[_0x1154b5(0x62b)][_0x1154b5(0x828)]()),this[_0x1154b5(0xd5d)][_0x1154b5(0x3bd)](),this[_0x1154b5(0xd5d)]['active']&&this[_0x1154b5(0xd5d)][_0x1154b5(0x828)]()):(this[_0x1154b5(0xda2)]=0x0,this[_0x1154b5(0x256)]=0x0,this[_0x1154b5(0x466)]=0x0,this[_0x1154b5(0x669)]=0x0,this[_0x1154b5(0xd3d)]=0x0,this[_0x1154b5(0x87e)]=0x0,this[_0x1154b5(0xa6b)]=_0x1154b5(0x7bc),this[_0x1154b5(0x318)]=0x0,this[_0x1154b5(0xb57)]=0x0,this['_jumpDuration']=0x0,this[_0x1154b5(0x71d)]=0x0,this[_0x1154b5(0x426)]=0xff,this[_0x1154b5(0xa07)]=0x0,this[_0x1154b5(0x402)]=0x0,this[_0x1154b5(0x276)]=_0x1154b5(0x7bc),this[_0x1154b5(0xb81)]=0x0,this['_targetAngle']=0x0,this[_0x1154b5(0x3b8)]=0x0,this[_0x1154b5(0xe11)]=0x0,this[_0x1154b5(0x2f3)]='Linear',this[_0x1154b5(0x844)]=!![],this['_skewX']=0x0,this['_skewY']=0x0,this['_targetSkewX']=0x0,this[_0x1154b5(0xba1)]=0x0,this[_0x1154b5(0xa24)]=0x0,this[_0x1154b5(0x1e9)]=0x0,this[_0x1154b5(0xc08)]=_0x1154b5(0x7bc),this['_growX']=0x1,this[_0x1154b5(0x625)]=0x1,this['_targetGrowX']=0x1,this[_0x1154b5(0xdfd)]=0x1,this[_0x1154b5(0x295)]=0x0,this[_0x1154b5(0x2e6)]=0x0,this[_0x1154b5(0x855)]='Linear',this[_0x1154b5(0x17d)]=0x1,this[_0x1154b5(0xa5f)]=0x0,this['_targetHomeY']=0x0,this[_0x1154b5(0x459)]=0x0,this['_homeWholeDuration']=0x0,this[_0x1154b5(0x861)]=_0x1154b5(0x7bc),this[_0x1154b5(0x52d)]=0x0,this['_shakeFlinchPower']=0x0));},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x5ed)]=function(){const _0x107dd6=_0x5c342f,_0x4c2ba7=this[_0x107dd6(0xcf1)]();['xp',_0x107dd6(0x483),_0x107dd6(0x966)][_0x107dd6(0xaec)](_0x4c2ba7)&&this[_0x107dd6(0x8c1)][_0x107dd6(0x3bd)](),this[_0x107dd6(0x4ad)]();},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x6ec)]=function(){const _0x17b3bf=_0x5c342f,_0xaf6bbf=VisuMZ[_0x17b3bf(0xca2)][_0x17b3bf(0xc90)][_0x17b3bf(0xaa5)],_0x2ee9fe=Window_BattleStatus['prototype'][_0x17b3bf(0x7bf)](),_0x2d558c=Graphics['boxWidth']-(_0xaf6bbf[_0x17b3bf(0xb33)]||0xc0),_0x93f680=this[_0x17b3bf(0xb0f)]()+_0x2ee9fe,_0x142473=this[_0x17b3bf(0xa95)]()?0x0:Graphics['boxWidth']-_0x2d558c,_0x43f201=Graphics[_0x17b3bf(0x2f9)]-_0x93f680+_0x2ee9fe;return new Rectangle(_0x142473,_0x43f201,_0x2d558c,_0x93f680);},Scene_Battle['prototype']['statusWindowRectXPStyle']=function(){const _0x31b48a=_0x5c342f,_0x119c3b=Window_BattleStatus[_0x31b48a(0xca4)][_0x31b48a(0x7bf)](),_0x2254d3=Graphics[_0x31b48a(0xba3)],_0x3dd31f=this[_0x31b48a(0xb0f)]()+_0x119c3b,_0x266654=0x0,_0x4ac4d9=Graphics['boxHeight']-_0x3dd31f+_0x119c3b;return new Rectangle(_0x266654,_0x4ac4d9,_0x2254d3,_0x3dd31f);},Scene_Battle[_0x5c342f(0xca4)]['partyCommandWindowRectXPStyle']=function(){const _0x4c4174=_0x5c342f,_0x3fb7ae=Graphics['boxWidth']/0x2,_0x5b09f6=this[_0x4c4174(0xba2)](VisuMZ['BattleCore'][_0x4c4174(0xc90)][_0x4c4174(0xaa5)][_0x4c4174(0x325)],!![]),_0x38a417=Math['round']((Graphics['boxWidth']-_0x3fb7ae)/0x2),_0x556acf=Graphics['boxHeight']-_0x5b09f6-this[_0x4c4174(0xa82)]()[_0x4c4174(0x880)];return new Rectangle(_0x38a417,_0x556acf,_0x3fb7ae,_0x5b09f6);},Scene_Battle[_0x5c342f(0xca4)]['helpWindowRectBorderStyle']=function(){const _0x20ba59=_0x5c342f,_0x2f821e=Graphics[_0x20ba59(0x6e4)],_0x36f639=Math['round']((Graphics[_0x20ba59(0xba3)]-_0x2f821e)/0x2),_0x1c8e08=this[_0x20ba59(0xc8c)](),_0x188d39=(Graphics['height']-Graphics[_0x20ba59(0x2f9)])/-0x2;return new Rectangle(_0x36f639,_0x188d39,_0x2f821e,_0x1c8e08);},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x245)]=function(){const _0xcc000e=_0x5c342f,_0xa382a9=Graphics[_0xcc000e(0x6e4)],_0x2a3dbe=Math[_0xcc000e(0x5c1)]((Graphics[_0xcc000e(0xba3)]-_0xa382a9)/0x2),_0x231439=this['calcWindowHeight'](0x4,!![]),_0x41925b=Graphics[_0xcc000e(0x2f9)]-_0x231439+(Graphics[_0xcc000e(0x880)]-Graphics[_0xcc000e(0x2f9)])/0x2;return new Rectangle(_0x2a3dbe,_0x41925b,_0xa382a9,_0x231439);},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0x194)]=function(){const _0x44370c=_0x5c342f,_0xd2c803=Math[_0x44370c(0x9b3)](Graphics[_0x44370c(0x6e4)]/0x3),_0x1d8415=this[_0x44370c(0xa95)]()?(Graphics[_0x44370c(0x6e4)]+Graphics[_0x44370c(0xba3)])/0x2-_0xd2c803:(Graphics[_0x44370c(0x6e4)]-Graphics[_0x44370c(0xba3)])/-0x2,_0x271f5d=this['helpWindowRectBorderStyle'](),_0x22e70c=_0x271f5d['y']+_0x271f5d['height'],_0x1e9b5f=this[_0x44370c(0x245)](),_0x852fc=_0x1e9b5f['y']-_0x22e70c;return new Rectangle(_0x1d8415,_0x22e70c,_0xd2c803,_0x852fc);},Scene_Battle[_0x5c342f(0xca4)]['skillItemWindowRectBorderStyle']=function(){const _0x2eb330=_0x5c342f,_0x1ef468=Math[_0x2eb330(0xc9d)](Graphics[_0x2eb330(0x6e4)]/0x3),_0x3b7717=Math[_0x2eb330(0x5c1)]((Graphics[_0x2eb330(0xba3)]-_0x1ef468)/0x2),_0x567da9=this[_0x2eb330(0x194)](),_0x5c9a2d=_0x567da9['y'],_0x549858=_0x567da9[_0x2eb330(0x880)];return new Rectangle(_0x3b7717,_0x5c9a2d,_0x1ef468,_0x549858);},Scene_Battle['prototype']['repositionCancelButtonBorderStyle']=function(){const _0x2ffa2e=_0x5c342f;this[_0x2ffa2e(0x1e1)]['y']=this[_0x2ffa2e(0xbec)]['y']+this[_0x2ffa2e(0xbec)][_0x2ffa2e(0x880)];if(this[_0x2ffa2e(0xa95)]()){if(_0x2ffa2e(0xaa3)===_0x2ffa2e(0xaa3)){if(this[_0x2ffa2e(0xcf1)]()===_0x2ffa2e(0x966)){if(_0x2ffa2e(0xc07)===_0x2ffa2e(0xaf0))return _0x18cbd5['Formula']['call'](this,_0x29924a);else this['_cancelButton']['x']=0x8;}else{if('lAnjl'===_0x2ffa2e(0x877))this[_0x2ffa2e(0x1e1)]['x']=-this[_0x2ffa2e(0x1e1)][_0x2ffa2e(0x6e4)]-0x4;else return _0x4a7d63(_0x1303d6['$2']);}}else this[_0x2ffa2e(0x6e6)]()&&(this[_0x2ffa2e(0x3d3)]=!![]),_0x3db8e0[_0x2ffa2e(0xca2)][_0x2ffa2e(0x946)][_0x2ffa2e(0xded)](this),this[_0x2ffa2e(0xb35)]();}else this[_0x2ffa2e(0x1e1)]['x']=Graphics['width']-(Graphics[_0x2ffa2e(0x6e4)]-Graphics[_0x2ffa2e(0xba3)])/0x2-this['_cancelButton'][_0x2ffa2e(0x6e4)]-0x4;},VisuMZ['BattleCore'][_0x5c342f(0x25f)]=Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xbf2)],Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xbf2)]=function(){const _0x2cfd42=_0x5c342f;if(this[_0x2cfd42(0xcf1)]()===_0x2cfd42(0x966))return _0x2cfd42(0x210)!==_0x2cfd42(0xca9)?this[_0x2cfd42(0x590)]():_0x1dff50['canEscape']();else{if(this[_0x2cfd42(0x92a)]()){if('kDrIv'!==_0x2cfd42(0x3f2))return this['skillItemWindowRectMiddle']();else _0x31354d=_0x24321a;}else{if(_0x2cfd42(0xcf5)!=='iupRL'){const _0xf359a9=this[_0x2cfd42(0xab5)]()['aliveMembers']();if(_0xf359a9[_0x2cfd42(0xc5c)]===0x1&&_0xf359a9[0x0]===this)return![];}else return VisuMZ[_0x2cfd42(0xca2)][_0x2cfd42(0x25f)][_0x2cfd42(0xded)](this);}}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x43c)]=Scene_Battle['prototype'][_0x5c342f(0x457)],Scene_Battle['prototype']['itemWindowRect']=function(){const _0x35e105=_0x5c342f;if(this[_0x35e105(0xcf1)]()===_0x35e105(0x966)){if(_0x35e105(0x8d2)!==_0x35e105(0x182))return this[_0x35e105(0x590)]();else _0x2fe71b['BattleGridSystem'][_0x35e105(0x70d)](_0x1c76e6);}else return this[_0x35e105(0x92a)]()?this[_0x35e105(0xb5e)]():VisuMZ['BattleCore'][_0x35e105(0x43c)][_0x35e105(0xded)](this);},Scene_Battle['prototype'][_0x5c342f(0x92a)]=function(){const _0x207ae8=_0x5c342f;return VisuMZ[_0x207ae8(0xca2)][_0x207ae8(0xc90)]['BattleLayout'][_0x207ae8(0x7f4)];},Scene_Battle[_0x5c342f(0xca4)]['skillItemWindowRectMiddle']=function(){const _0x3503c4=_0x5c342f,_0x991298=Sprite_Button['prototype']['blockWidth']()*0x2+0x4;let _0x464695=Graphics[_0x3503c4(0xba3)]-_0x991298;Imported[_0x3503c4(0xad9)]&&SceneManager['isSideButtonLayout']()&&('DcpTg'!==_0x3503c4(0x52a)?_0x464695+=_0x991298:(_0x11598c['prepare'](),_0xef5dcd[_0x3503c4(0x988)]()?(this[_0x3503c4(0x9e2)](),_0x3033db[_0x3503c4(0x396)]()):(_0x4c3e9b['removeCurrentAction'](),this[_0x3503c4(0x4d5)]())));const _0x6021f1=this[_0x3503c4(0x43d)](),_0x22a2c6=Graphics[_0x3503c4(0x2f9)]-_0x6021f1-this[_0x3503c4(0x9c6)]()[_0x3503c4(0x880)]+Window_BattleStatus[_0x3503c4(0xca4)]['extraHeight'](),_0x24e2d6=0x0;return new Rectangle(_0x24e2d6,_0x6021f1,_0x464695,_0x22a2c6);},Scene_Battle[_0x5c342f(0xca4)][_0x5c342f(0xe2f)]=function(){const _0x553da0=_0x5c342f;if(!VisuMZ[_0x553da0(0xca2)][_0x553da0(0xc90)][_0x553da0(0x4f1)]['NameLegacy'])return;this['_enemyNameContainer']=new Sprite(),this['_enemyNameContainer']['x']=this[_0x553da0(0xd2e)]['x'],this[_0x553da0(0xd48)]['y']=this['_windowLayer']['y'];const _0x7af692=this[_0x553da0(0xd89)][_0x553da0(0x570)](this[_0x553da0(0xd2e)]);this[_0x553da0(0x619)](this[_0x553da0(0xd48)],_0x7af692);for(let _0x250808=0x0;_0x250808<0x8;_0x250808++){const _0x15c215=new Window_EnemyName(_0x250808);this['_enemyNameContainer'][_0x553da0(0x393)](_0x15c215);}},Sprite_Battler[_0x5c342f(0xaa4)]=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)][_0x5c342f(0xe29)][_0x5c342f(0x96d)],VisuMZ['BattleCore']['Sprite_Battler_initMembers']=Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xa41)],Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xa41)]=function(){const _0x36af12=_0x5c342f;VisuMZ[_0x36af12(0xca2)][_0x36af12(0x734)][_0x36af12(0xded)](this),this[_0x36af12(0xd03)]();if(this[_0x36af12(0x43e)]===Sprite_Enemy)this['createShadowSprite']();this[_0x36af12(0x184)]();},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xd03)]=function(){const _0x69d942=_0x5c342f;this[_0x69d942(0xda2)]=0x0,this[_0x69d942(0x256)]=0x0,this['_floatHeight']=0x0,this[_0x69d942(0x669)]=0x0,this['_floatDuration']=0x0,this['_floatWholeDuration']=0x0,this[_0x69d942(0xa6b)]=_0x69d942(0x7bc),this[_0x69d942(0x318)]=0x0,this[_0x69d942(0xb57)]=0x0,this[_0x69d942(0xddd)]=0x0,this[_0x69d942(0x71d)]=0x0,this[_0x69d942(0x426)]=0xff,this[_0x69d942(0xa07)]=0x0,this[_0x69d942(0x402)]=0x0,this[_0x69d942(0x276)]=_0x69d942(0x7bc),this[_0x69d942(0xb81)]=0x0,this[_0x69d942(0x6e2)]=0x0,this[_0x69d942(0x3b8)]=0x0,this[_0x69d942(0xe11)]=0x0,this[_0x69d942(0x2f3)]=_0x69d942(0x7bc),this[_0x69d942(0x844)]=!![],this[_0x69d942(0xc89)]=0x0,this[_0x69d942(0x73e)]=0x0,this[_0x69d942(0xa3d)]=0x0,this[_0x69d942(0xba1)]=0x0,this['_skewDuration']=0x0,this[_0x69d942(0x1e9)]=0x0,this[_0x69d942(0xc08)]=_0x69d942(0x7bc),this[_0x69d942(0x24b)]=0x1,this['_growY']=0x1,this[_0x69d942(0xba4)]=0x1,this[_0x69d942(0xdfd)]=0x1,this[_0x69d942(0x295)]=0x0,this['_growWholeDuration']=0x0,this[_0x69d942(0x855)]=_0x69d942(0x7bc),this['_flipScaleX']=0x1,this[_0x69d942(0xa5f)]=0x0,this[_0x69d942(0x6ef)]=0x0,this[_0x69d942(0x459)]=0x0,this[_0x69d942(0x76d)]=0x0,this[_0x69d942(0x861)]='Linear',this['_shakeFlinchDuration']=0x0,this[_0x69d942(0x9db)]=0x0;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x4c8)]=function(){const _0x103844=_0x5c342f;this[_0x103844(0x811)]=new Sprite(),this['_shadowSprite'][_0x103844(0x812)]=ImageManager['loadSystem'](_0x103844(0x409)),this[_0x103844(0x811)]['bitmap'][_0x103844(0xd09)]=VisuMZ['BattleCore'][_0x103844(0xc90)][_0x103844(0xe29)]['SmoothImage'],this['_shadowSprite'][_0x103844(0xaab)]['x']=0.5,this[_0x103844(0x811)]['anchor']['y']=0.5,this[_0x103844(0x811)]['y']=-0x2,this[_0x103844(0x811)]['visible']=![],this[_0x103844(0x393)](this['_shadowSprite']);},Sprite_Battler[_0x5c342f(0xca4)]['createDistortionSprite']=function(){const _0x220f7f=_0x5c342f;this[_0x220f7f(0x759)]=new Sprite(),this[_0x220f7f(0x759)][_0x220f7f(0xaab)]['x']=0.5,this[_0x220f7f(0x759)][_0x220f7f(0xaab)]['y']=0.5,this[_0x220f7f(0x393)](this[_0x220f7f(0x759)]);},Sprite_Battler['prototype'][_0x5c342f(0x3a5)]=function(){const _0x1e6e8c=_0x5c342f;if(!this['_distortionSprite'])return;if(this['_shadowSprite']){const _0x33a554=this['getChildIndex'](this[_0x1e6e8c(0x759)]);this[_0x1e6e8c(0x619)](this[_0x1e6e8c(0x811)],_0x33a554),this[_0x1e6e8c(0xab6)]();}this[_0x1e6e8c(0x475)]&&this[_0x1e6e8c(0x759)][_0x1e6e8c(0x393)](this[_0x1e6e8c(0x475)]),this[_0x1e6e8c(0x7c5)]&&(_0x1e6e8c(0x51a)===_0x1e6e8c(0x51a)?this['_distortionSprite'][_0x1e6e8c(0x393)](this[_0x1e6e8c(0x7c5)]):_0x4fe54f[_0x1e6e8c(0xca2)][_0x1e6e8c(0x2c7)][_0x1e6e8c(0xded)](this,_0x5be81d)),this[_0x1e6e8c(0xd17)]&&(_0x1e6e8c(0x87a)!=='nELhr'?(this['_cache']={},_0x20e505['BattleCore'][_0x1e6e8c(0x78f)]['call'](this)):this[_0x1e6e8c(0x759)][_0x1e6e8c(0x393)](this['_mainSprite'])),this[_0x1e6e8c(0x2a6)]&&(_0x1e6e8c(0xc8e)===_0x1e6e8c(0xc8e)?this[_0x1e6e8c(0x759)][_0x1e6e8c(0x393)](this[_0x1e6e8c(0x2a6)]):this[_0x1e6e8c(0x1dc)]=null),this[_0x1e6e8c(0x75c)]&&this['_distortionSprite'][_0x1e6e8c(0x393)](this[_0x1e6e8c(0x75c)]);},Sprite_Battler['prototype'][_0x5c342f(0xab6)]=function(){const _0x1c7b2c=_0x5c342f;if(!this[_0x1c7b2c(0x811)])return;if(this[_0x1c7b2c(0xca5)]&&this[_0x1c7b2c(0xca5)][_0x1c7b2c(0xe3a)]()){const _0x1c1280=this['_shadowSprite'][_0x1c7b2c(0x812)];this['_shadowSprite'][_0x1c7b2c(0x79b)](0x0,0x0,_0x1c1280['width'],_0x1c1280['height']);}else{if('OhEfU'===_0x1c7b2c(0xc4e))this[_0x1c7b2c(0x811)]['setFrame'](0x0,0x0,0x0,0x0);else{_0xeb00f9[_0x1c7b2c(0xca4)][_0x1c7b2c(0x2a5)]['call'](this),this['updateRefresh'](),this[_0x1c7b2c(0x9aa)]();if(this[_0x1c7b2c(0xcf1)]()===_0x1c7b2c(0x966))this[_0x1c7b2c(0xcbc)]();}}},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xc3b)]=function(){const _0x11bcd0=_0x5c342f;return SceneManager[_0x11bcd0(0x371)]()?SceneManager[_0x11bcd0(0x201)][_0x11bcd0(0x3ed)][_0x11bcd0(0x2d5)]:this['parent'];},Sprite_Battler['prototype'][_0x5c342f(0x84b)]=function(_0x487ba7,_0x2afa02){const _0x19d85c=_0x5c342f;if(!this[_0x19d85c(0xca5)][_0x19d85c(0x867)]())return;if(BattleManager[_0x19d85c(0x49b)]())return;const _0x5ac740=VisuMZ[_0x19d85c(0xca2)][_0x19d85c(0xc90)][_0x19d85c(0x603)],_0x1a0314=new Sprite_Damage();_0x1a0314['_duration']=_0x5ac740[_0x19d85c(0x6eb)],this['sortDamageSprites'](_0x1a0314),_0x1a0314[_0x19d85c(0x84b)](_0x487ba7,_0x2afa02),this['addDamageSprite'](_0x1a0314);},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x73b)]=function(_0x159b42,_0x1d93b7,_0x33e637){const _0x34f861=_0x5c342f;if(!this[_0x34f861(0xca5)][_0x34f861(0x867)]())return;if(BattleManager[_0x34f861(0x49b)]())return;const _0x352144=VisuMZ[_0x34f861(0xca2)][_0x34f861(0xc90)][_0x34f861(0x603)],_0x289217=new Sprite_Damage();_0x289217[_0x34f861(0xe01)]=_0x352144[_0x34f861(0x6eb)],this[_0x34f861(0xe3c)](_0x289217),_0x289217[_0x34f861(0x73b)](_0x159b42,_0x1d93b7,_0x33e637),this['addDamageSprite'](_0x289217);},Sprite_Battler[_0x5c342f(0xca4)]['setupDamagePopup']=function(){const _0x24bc03=_0x5c342f;if(!this[_0x24bc03(0xca5)][_0x24bc03(0x2b6)]())return;while(this['_battler'][_0x24bc03(0x2b6)]()){this[_0x24bc03(0xca5)]['isSpriteVisible']()&&this[_0x24bc03(0xd94)]();}this[_0x24bc03(0xca5)]['clearDamagePopup'](),this['_battler'][_0x24bc03(0x431)]();},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xd94)]=function(){const _0x11b9e6=_0x5c342f;if(BattleManager[_0x11b9e6(0x49b)]())return;const _0x6d1304=VisuMZ[_0x11b9e6(0xca2)][_0x11b9e6(0xc90)][_0x11b9e6(0x603)],_0x3bd119=new Sprite_Damage();_0x3bd119[_0x11b9e6(0xe01)]=_0x6d1304[_0x11b9e6(0x6eb)],this[_0x11b9e6(0xe3c)](_0x3bd119),_0x3bd119[_0x11b9e6(0x5bd)](this[_0x11b9e6(0xca5)]),_0x3bd119['setupBattleCore'](this[_0x11b9e6(0xca5)]),this[_0x11b9e6(0x9f9)](_0x3bd119);},Sprite_Battler[_0x5c342f(0xca4)]['addDamageSprite']=function(_0x4f8fc7){const _0x470d80=_0x5c342f;this[_0x470d80(0x546)][_0x470d80(0x843)](_0x4f8fc7);if(this[_0x470d80(0x554)]()){const _0x6d2a8=SceneManager[_0x470d80(0x201)][_0x470d80(0x338)];if(_0x6d2a8)_0x6d2a8[_0x470d80(0x9f9)](_0x4f8fc7,this['_battler']);}else{if(_0x470d80(0x851)==='ITAkg'){this[_0x470d80(0xc3b)]()['addChild'](_0x4f8fc7);if(SceneManager[_0x470d80(0x9be)]())_0x4f8fc7['scale']['x']=-0x1;}else for(const _0x3a487b of _0x4069f1){const _0x1588eb=_0x24ffa1[0x0]['format'](_0x3a487b[0x0]),_0x32cf94=_0x131a28[0x1][_0x470d80(0x266)](_0x3a487b[0x1]),_0x504e7d=new _0x2e7890(_0x8aea4e[_0x470d80(0x266)](_0x32cf94),'i');_0x1155a8[_0x1588eb]=_0x504e7d;}}},Sprite_Battler[_0x5c342f(0xca4)]['isShownOnBattlePortrait']=function(){const _0x4cf88f=_0x5c342f;return!$gameSystem['isSideView']()&&this['_battler']&&this[_0x4cf88f(0xca5)][_0x4cf88f(0x47b)]();return!$gameSystem[_0x4cf88f(0x9a3)]()&&this[_0x4cf88f(0xca5)]&&this[_0x4cf88f(0xca5)]['isActor']()&&Window_BattleStatus[_0x4cf88f(0xca4)][_0x4cf88f(0xcf1)]()===_0x4cf88f(0x483);},Sprite_Battler['prototype'][_0x5c342f(0xe3c)]=function(_0x4d3406){const _0x3cb61b=_0x5c342f;this[_0x3cb61b(0x891)](_0x4d3406,!![]);const _0x4b4c2a=VisuMZ['BattleCore']['Settings']['Damage'],_0x4205a7=SceneManager[_0x3cb61b(0x9be)]()?-0x1:0x1;if(_0x4b4c2a[_0x3cb61b(0x9ea)])for(const _0xcf31e5 of this[_0x3cb61b(0x546)]){_0xcf31e5['x']+=_0x4b4c2a[_0x3cb61b(0x3cc)]*_0x4205a7,_0xcf31e5['y']+=_0x4b4c2a['PopupShiftY'];}else{if(_0x3cb61b(0x41a)===_0x3cb61b(0x6d4)){if(_0x1759ce['isTpb']()){if(this[_0x3cb61b(0x89a)]()<=0x0)return;}else{if(_0x388927[_0x3cb61b(0x89a)]()<=0x0)return;}}else{const _0x5cac04=this['_damages'][this[_0x3cb61b(0x546)][_0x3cb61b(0xc5c)]-0x1];if(_0x5cac04){if(_0x3cb61b(0x504)===_0x3cb61b(0x3b9))return _0x3594ca[_0x3cb61b(0x371)]()?_0x3e5238[_0x3cb61b(0x201)][_0x3cb61b(0x3ed)]['_damageContainer']:this[_0x3cb61b(0x690)];else _0x4d3406['x']=_0x5cac04['x']+_0x4b4c2a[_0x3cb61b(0x3cc)]*_0x4205a7,_0x4d3406['y']=_0x5cac04['y']+_0x4b4c2a[_0x3cb61b(0x417)];}}}},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x891)]=function(_0x4fd08c,_0x1f6c75){const _0x2268d4=_0x5c342f,_0x5a6b90=SceneManager[_0x2268d4(0x9be)]()?-0x1:0x1;let _0xd23431=this[_0x2268d4(0xda2)];_0xd23431+=this[_0x2268d4(0x635)]();let _0x26ca3e=this['_baseY'];const _0x186295=this[_0x2268d4(0x759)][_0x2268d4(0x339)]['y'];_0x26ca3e+=this[_0x2268d4(0x249)]();const _0xcd6bb5=SceneManager['_scene'][_0x2268d4(0x338)];if(_0xcd6bb5&&this[_0x2268d4(0x690)]===_0xcd6bb5){_0xd23431+=_0xcd6bb5['x']-this[_0x2268d4(0xe0b)]();const _0x3b5dcc=_0xcd6bb5[_0x2268d4(0x8f4)]()*0x3/0x4;_0x26ca3e=_0xcd6bb5['y']+_0x3b5dcc,_0x26ca3e=Math['min'](_0x26ca3e,_0xcd6bb5['y']+this['y']-this['height']+_0x3b5dcc);}_0x4fd08c['x']=Math[_0x2268d4(0x5c1)](_0xd23431+this[_0x2268d4(0xe0b)]()*_0x5a6b90),_0x4fd08c['y']=Math[_0x2268d4(0x5c1)](_0x26ca3e+this['damageOffsetY']());},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x17c)]=Sprite_Battler['prototype']['damageOffsetX'],Sprite_Battler[_0x5c342f(0xca4)]['damageOffsetX']=function(){const _0x335201=_0x5c342f;let _0x475b96=VisuMZ[_0x335201(0xca2)][_0x335201(0x17c)][_0x335201(0xded)](this),_0x1cfb3f=VisuMZ[_0x335201(0xca2)]['Settings'][_0x335201(0x603)]['PopupOffsetX']||0x0;return Math[_0x335201(0x5c1)](_0x475b96+_0x1cfb3f);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x963)]=Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x6fa)],Sprite_Battler['prototype']['damageOffsetY']=function(){const _0x210200=_0x5c342f;let _0x4e7514=VisuMZ[_0x210200(0xca2)][_0x210200(0x963)]['call'](this);switch(VisuMZ[_0x210200(0xca2)]['Settings'][_0x210200(0x603)][_0x210200(0x62d)]){case _0x210200(0x64f):_0x4e7514-=this['height']*this['scale']['y'];break;case'center':_0x4e7514-=this[_0x210200(0x880)]*this[_0x210200(0x339)]['y']*0.5;break;}let _0x34b21b=VisuMZ[_0x210200(0xca2)][_0x210200(0xc90)][_0x210200(0x603)][_0x210200(0xe24)]||0x0;return Math[_0x210200(0x5c1)](_0x4e7514+_0x34b21b);},Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xe0b)]=function(){const _0x1517b0=_0x5c342f;return Sprite_Battler[_0x1517b0(0xca4)][_0x1517b0(0xe0b)][_0x1517b0(0xded)](this);},Sprite_Actor['prototype'][_0x5c342f(0x6fa)]=function(){const _0x2e160f=_0x5c342f;return Sprite_Battler[_0x2e160f(0xca4)][_0x2e160f(0x6fa)]['call'](this);},Sprite_Battler['prototype']['destroyDamageSprite']=function(_0x5ade08){const _0xb6b61c=_0x5c342f;if(this[_0xb6b61c(0x554)]())SceneManager[_0xb6b61c(0x201)][_0xb6b61c(0x338)]['removeDamageSprite'](_0x5ade08);else{if('WMCjx'===_0xb6b61c(0xd15)){if(!this[_0xb6b61c(0xca5)])return;this[_0xb6b61c(0x507)]=this[_0xb6b61c(0xca5)][_0xb6b61c(0x282)](),this[_0xb6b61c(0xb38)]=this[_0xb6b61c(0xca5)][_0xb6b61c(0x8b8)]();}else this[_0xb6b61c(0xc3b)]()[_0xb6b61c(0x72d)](_0x5ade08),this[_0xb6b61c(0x546)][_0xb6b61c(0x5e1)](_0x5ade08),_0x5ade08[_0xb6b61c(0xa78)]();}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xb71)]=Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x2a0)],Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x2a0)]=function(_0x2b64aa,_0x357405){const _0x189885=_0x5c342f,_0x22dacf=VisuMZ[_0x189885(0xca2)][_0x189885(0xc90)];if(this[_0x189885(0x43e)]===Sprite_Actor)_0x2b64aa+=_0x22dacf[_0x189885(0xe29)][_0x189885(0x6f0)]||0x0,_0x357405+=_0x22dacf[_0x189885(0xe29)][_0x189885(0xdb0)]||0x0;else this[_0x189885(0x43e)]===Sprite_Enemy&&(_0x2b64aa+=_0x22dacf['Enemy'][_0x189885(0x6f0)]||0x0,_0x357405+=_0x22dacf[_0x189885(0x4f1)][_0x189885(0xdb0)]||0x0);this['_battler']&&(_0x2b64aa=this[_0x189885(0xca5)][_0x189885(0x755)]??_0x2b64aa,_0x357405=this[_0x189885(0xca5)][_0x189885(0x953)]??_0x357405),VisuMZ[_0x189885(0xca2)][_0x189885(0xb71)][_0x189885(0xded)](this,_0x2b64aa,_0x357405),this['_targetHomeX']=this[_0x189885(0x301)],this[_0x189885(0x6ef)]=this['_homeY'],this[_0x189885(0x459)]=0x0,this['_homeWholeDuration']=0x0,this[_0x189885(0x861)]='Linear';},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x456)]=Sprite_Battler[_0x5c342f(0xca4)]['update'],Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x2a5)]=function(){const _0x5d4aa8=_0x5c342f;VisuMZ[_0x5d4aa8(0xca2)][_0x5d4aa8(0x456)][_0x5d4aa8(0xded)](this),!this[_0x5d4aa8(0xca5)]&&this[_0x5d4aa8(0x6a7)]&&(this[_0x5d4aa8(0x6a7)][_0x5d4aa8(0x747)]=![]);},VisuMZ[_0x5c342f(0xca2)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xcbe)],Sprite_Battler['prototype'][_0x5c342f(0xcbe)]=function(){const _0x189fa4=_0x5c342f;this['updateScale'](),this[_0x189fa4(0x820)](),this[_0x189fa4(0x4ce)](),this[_0x189fa4(0xd61)](),VisuMZ[_0x189fa4(0xca2)][_0x189fa4(0xab4)]['call'](this),this[_0x189fa4(0x7cf)](),this[_0x189fa4(0xc2e)]();if(this[_0x189fa4(0x43e)]===Sprite_Enemy)this[_0x189fa4(0x5c4)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x232)]=Sprite_Battler['prototype']['updatePosition'],Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xb40)]=function(){const _0xc02277=_0x5c342f;this[_0xc02277(0x667)](),VisuMZ[_0xc02277(0xca2)][_0xc02277(0x232)][_0xc02277(0xded)](this),this[_0xc02277(0x956)](),this[_0xc02277(0xbe7)]();},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x3dd)]=function(){const _0x2c9d55=_0x5c342f,_0xa093c3=this[_0x2c9d55(0xb3b)]();if(this['_battler'][_0x2c9d55(0x89c)]()){this['_selectionEffectCount']++;if(Graphics[_0x2c9d55(0xba7)]%0x1e<0xf)_0x2c9d55(0x6a6)===_0x2c9d55(0x90a)?(this[_0x2c9d55(0x811)]=new _0x1c20a2(),this[_0x2c9d55(0x811)][_0x2c9d55(0x812)]=_0x3db2e5[_0x2c9d55(0x498)](_0x2c9d55(0x409)),this[_0x2c9d55(0x811)][_0x2c9d55(0x812)]['smooth']=_0x619a3[_0x2c9d55(0xca2)][_0x2c9d55(0xc90)][_0x2c9d55(0xe29)][_0x2c9d55(0x6af)],this['_shadowSprite']['anchor']['x']=0.5,this[_0x2c9d55(0x811)]['anchor']['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x2c9d55(0x811)][_0x2c9d55(0x747)]=![],this[_0x2c9d55(0x393)](this[_0x2c9d55(0x811)])):_0xa093c3['setBlendColor']([0xff,0xff,0xff,0x40]);else{if(_0x2c9d55(0x819)==='veFWr')_0xa093c3[_0x2c9d55(0x2bf)]([0x0,0x0,0x0,0x0]);else return _0x448538['getDefeatedEnemies']()[_0x2c9d55(0xaec)](this[_0x2c9d55(0x3c7)]);}}else this[_0x2c9d55(0xa7b)]>0x0&&(this['_selectionEffectCount']=0x0,_0xa093c3['setBlendColor']([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x76a)]=function(_0x8645a1,_0x3ff36b){const _0x112b57=_0x5c342f,_0x1e7d06=VisuMZ[_0x112b57(0xca2)][_0x112b57(0xc90)];if(this[_0x112b57(0x43e)]===Sprite_Actor){if(_0x112b57(0x19e)!==_0x112b57(0x5b5))_0x8645a1+=_0x1e7d06[_0x112b57(0xe29)][_0x112b57(0x6f0)]||0x0,_0x3ff36b+=_0x1e7d06[_0x112b57(0xe29)]['OffsetY']||0x0;else{const _0x4871cf=this[_0x112b57(0x5d5)]()[_0x112b57(0x989)]||0x0;return _0x359a2d[_0x112b57(0xb5c)][_0x4871cf];}}else this[_0x112b57(0x43e)]===Sprite_Enemy&&(_0x8645a1+=_0x1e7d06[_0x112b57(0x4f1)][_0x112b57(0x6f0)]||0x0,_0x3ff36b+=_0x1e7d06[_0x112b57(0x4f1)]['OffsetY']||0x0);const _0x3cb0d7=_0x8645a1-this[_0x112b57(0x301)],_0x54822e=_0x3ff36b-this['_homeY'];this[_0x112b57(0x301)]=_0x8645a1,this[_0x112b57(0x3f1)]=_0x3ff36b,this['_offsetX']-=_0x3cb0d7,this[_0x112b57(0xde5)]-=_0x54822e,this[_0x112b57(0xcd1)]-=_0x3cb0d7,this['_targetOffsetY']-=_0x54822e,this[_0x112b57(0xb40)]();},Sprite_Battler['prototype'][_0x5c342f(0x30f)]=function(_0x208e5a,_0x16e662,_0x1eaf23,_0x185018){const _0x3b4632=_0x5c342f,_0x437e2b=VisuMZ['BattleCore'][_0x3b4632(0xc90)];if(this[_0x3b4632(0x43e)]===Sprite_Actor){if('dFnZL'===_0x3b4632(0x71e)){const _0x5e9869=this['commandName'](_0x2f8ca6);if(_0x5e9869[_0x3b4632(0xcbd)](/\\I\[(\d+)\]/i)){const _0x501ee3=this[_0x3b4632(0x9eb)](_0x4232a2),_0x4beeef=this[_0x3b4632(0x55e)](_0x5e9869)['width'];return _0x4beeef<=_0x501ee3[_0x3b4632(0x6e4)]?_0x3b4632(0xd2c):_0x3b4632(0x6e3);}}else _0x208e5a+=_0x437e2b[_0x3b4632(0xe29)][_0x3b4632(0x6f0)]||0x0,_0x16e662+=_0x437e2b[_0x3b4632(0xe29)][_0x3b4632(0xdb0)]||0x0;}else this[_0x3b4632(0x43e)]===Sprite_Enemy&&(_0x208e5a+=_0x437e2b[_0x3b4632(0x4f1)][_0x3b4632(0x6f0)]||0x0,_0x16e662+=_0x437e2b[_0x3b4632(0x4f1)][_0x3b4632(0xdb0)]||0x0);if(this[_0x3b4632(0xa5f)]!==_0x208e5a||this[_0x3b4632(0x6ef)]!==_0x16e662){this[_0x3b4632(0xa5f)]=_0x208e5a,this[_0x3b4632(0x6ef)]=_0x16e662,this['_homeDuration']=_0x1eaf23,this[_0x3b4632(0x76d)]=_0x1eaf23,this[_0x3b4632(0x861)]=_0x185018;if(_0x1eaf23<=0x0){if(_0x3b4632(0xcce)!==_0x3b4632(0xcce))return!_0x150c05[_0x3b4632(0xdcc)]()?this[_0x3b4632(0x3b6)](_0x110863):_0x537d2a[_0x3b4632(0xca2)][_0x3b4632(0x7e2)][_0x3b4632(0xded)](this,_0x3cab95);else this[_0x3b4632(0x543)]();}}},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x667)]=function(){const _0x2d4d27=_0x5c342f;if(this['_homeDuration']<=0x0)return;const _0x2eea81=this[_0x2d4d27(0x459)],_0x259543=this[_0x2d4d27(0x76d)],_0x3e7e2b=this[_0x2d4d27(0x861)];Imported[_0x2d4d27(0xad9)]?_0x2d4d27(0x860)===_0x2d4d27(0x582)?(this['_homeX']=this[_0x2d4d27(0xa5f)],this[_0x2d4d27(0x3f1)]=this[_0x2d4d27(0x6ef)]):(this['_homeX']=this[_0x2d4d27(0x95d)](this[_0x2d4d27(0x301)],this['_targetHomeX'],_0x2eea81,_0x259543,_0x3e7e2b),this[_0x2d4d27(0x3f1)]=this[_0x2d4d27(0x95d)](this[_0x2d4d27(0x3f1)],this[_0x2d4d27(0x6ef)],_0x2eea81,_0x259543,_0x3e7e2b)):_0x2d4d27(0x9a6)===_0x2d4d27(0xd6b)?_0x2dbbbc[_0x2d4d27(0x95b)]():(this[_0x2d4d27(0x301)]=(this[_0x2d4d27(0x301)]*(_0x2eea81-0x1)+this[_0x2d4d27(0xa5f)])/_0x2eea81,this[_0x2d4d27(0x3f1)]=(this[_0x2d4d27(0x3f1)]*(_0x2eea81-0x1)+this[_0x2d4d27(0x6ef)])/_0x2eea81);this[_0x2d4d27(0x459)]--;if(this['_homeDuration']<=0x0)this[_0x2d4d27(0x543)]();},Sprite_Battler[_0x5c342f(0xca4)]['onHomeMoveEnd']=function(){const _0x39456e=_0x5c342f;this['_homeX']=this[_0x39456e(0xa5f)],this['_homeY']=this['_targetHomeY'];},Sprite_Battler['prototype'][_0x5c342f(0x956)]=function(){const _0x55f0cd=_0x5c342f;this[_0x55f0cd(0xda2)]=this['x'],this['_baseY']=this['y'],this['updateFloat'](),this[_0x55f0cd(0xd0b)](),this['x']+=this[_0x55f0cd(0x635)](),this['y']+=this[_0x55f0cd(0x249)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x55f0cd(0x9b3)](this['x']),this['y']=Math[_0x55f0cd(0x9b3)](this['y']);},Sprite_Battler[_0x5c342f(0xca4)]['extraPositionX']=function(){let _0x320bad=0x0;return _0x320bad;},Sprite_Battler[_0x5c342f(0xca4)]['extraPositionY']=function(){const _0x5bb277=_0x5c342f;let _0x2be6cb=0x0;return this[_0x5bb277(0xca5)]&&!this[_0x5bb277(0xca5)][_0x5bb277(0x902)]()&&(_0x2be6cb-=this['_floatHeight'],_0x2be6cb-=this[_0x5bb277(0x318)]),_0x2be6cb;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x31d)]=function(){const _0xc63cfa=_0x5c342f;let _0x22275e=0x0;if(this[_0xc63cfa(0x759)]&&this['constructor']!==Sprite_SvEnemy){const _0x25f82b=this['_distortionSprite'][_0xc63cfa(0x339)]['y'];_0x22275e-=(_0x25f82b-0x1)*this[_0xc63cfa(0x880)];}return _0x22275e;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xd61)]=function(){const _0x15d1bc=_0x5c342f,_0x226554=this[_0x15d1bc(0xca5)]&&this[_0x15d1bc(0xca5)][_0x15d1bc(0x40b)]();this[_0x15d1bc(0x17d)]=(_0x226554?-0x1:0x1)*Math[_0x15d1bc(0xd81)](this[_0x15d1bc(0x339)]['x']);},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xc91)]=function(_0x2200d1,_0x3464ba,_0x492c5b){const _0x21bcdb=_0x5c342f;if(!this[_0x21bcdb(0xbd5)]())return;if(this[_0x21bcdb(0x669)]===_0x2200d1)return;this['_targetFloatHeight']=_0x2200d1,this[_0x21bcdb(0xd3d)]=_0x3464ba,this[_0x21bcdb(0x87e)]=_0x3464ba,this[_0x21bcdb(0xa6b)]=_0x492c5b||_0x21bcdb(0x7bc);if(_0x3464ba<=0x0)this['_floatHeight']=_0x2200d1;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x405)]=function(){const _0x5873af=_0x5c342f;if(this[_0x5873af(0xd3d)]<=0x0)return;const _0x597d2f=this[_0x5873af(0xd3d)],_0x4dbe26=this[_0x5873af(0x87e)],_0x5e8335=this['_floatEasing'];Imported[_0x5873af(0xad9)]?this['_floatHeight']=this[_0x5873af(0x95d)](this[_0x5873af(0x466)],this[_0x5873af(0x669)],_0x597d2f,_0x4dbe26,_0x5e8335):'wovbd'!==_0x5873af(0x204)?_0x24dc4a[_0x5873af(0xca2)][_0x5873af(0xad1)]['call'](this,_0x517e42):this['_floatHeight']=(this[_0x5873af(0x466)]*(_0x597d2f-0x1)+this[_0x5873af(0x669)])/_0x597d2f;this[_0x5873af(0xd3d)]--;if(this[_0x5873af(0xd3d)]<=0x0)this[_0x5873af(0xd1a)]();},Sprite_Battler[_0x5c342f(0xca4)]['onFloatEnd']=function(){const _0x25a252=_0x5c342f;this['_floatHeight']=this[_0x25a252(0x669)];},Sprite_Battler[_0x5c342f(0xca4)]['isFloating']=function(){const _0x1658b2=_0x5c342f;return this[_0x1658b2(0xd3d)]>0x0;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x8f3)]=function(_0x3098c,_0x299eb7){const _0x146d28=_0x5c342f;if(!this[_0x146d28(0xbd5)]())return;if(_0x299eb7<=0x0)return;this[_0x146d28(0xb57)]=_0x3098c,this[_0x146d28(0xddd)]=_0x299eb7,this[_0x146d28(0x71d)]=_0x299eb7;},Sprite_Battler['prototype'][_0x5c342f(0xd0b)]=function(){const _0x2fe4cc=_0x5c342f;if(this[_0x2fe4cc(0xddd)]<=0x0)return;const _0x3bfcb3=this[_0x2fe4cc(0x71d)]-this[_0x2fe4cc(0xddd)],_0x2abdda=this[_0x2fe4cc(0x71d)]/0x2,_0x71468f=this[_0x2fe4cc(0xb57)],_0x162416=-_0x71468f/Math[_0x2fe4cc(0x39e)](_0x2abdda,0x2);this['_jumpHeight']=_0x162416*Math['pow'](_0x3bfcb3-_0x2abdda,0x2)+_0x71468f,this[_0x2fe4cc(0xddd)]--;if(this[_0x2fe4cc(0xddd)]<=0x0)return this[_0x2fe4cc(0x736)]();},Sprite_Battler[_0x5c342f(0xca4)]['onJumpEnd']=function(){const _0x2f176f=_0x5c342f;this[_0x2f176f(0x318)]=0x0;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x329)]=function(){const _0x1fba37=_0x5c342f;return this[_0x1fba37(0xddd)]>0x0;},Sprite_Battler['prototype'][_0x5c342f(0x627)]=function(_0x39091f,_0x11e6f4,_0x4110f6){const _0x1f1df3=_0x5c342f;if(this['_targetOpacity']===_0x39091f)return;this[_0x1f1df3(0x426)]=_0x39091f,this[_0x1f1df3(0xa07)]=_0x11e6f4,this[_0x1f1df3(0x402)]=_0x11e6f4,this['_opacityEasing']=_0x4110f6||_0x1f1df3(0x7bc);if(_0x11e6f4<=0x0)this[_0x1f1df3(0xc0c)]=_0x39091f;},Sprite_Battler['prototype'][_0x5c342f(0xbe7)]=function(){const _0x305f5c=_0x5c342f;if(this[_0x305f5c(0x43e)][_0x305f5c(0x25e)]===_0x305f5c(0x4ca))return;if(this[_0x305f5c(0xa07)]<=0x0)return;const _0x5cd473=this[_0x305f5c(0xa07)],_0x11033b=this[_0x305f5c(0x402)],_0x25374f=this[_0x305f5c(0x276)];Imported[_0x305f5c(0xad9)]?this['opacity']=this['applyEasing'](this[_0x305f5c(0xc0c)],this['_targetOpacity'],_0x5cd473,_0x11033b,_0x25374f):this[_0x305f5c(0xc0c)]=(this['opacity']*(_0x5cd473-0x1)+this[_0x305f5c(0x426)])/_0x5cd473;this[_0x305f5c(0xa07)]--;if(this[_0x305f5c(0xa07)]<=0x0)this[_0x305f5c(0x533)]();},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x533)]=function(){const _0x2562a2=_0x5c342f;this[_0x2562a2(0xc0c)]=this['_targetOpacity'];},Sprite_Battler['prototype'][_0x5c342f(0xc50)]=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x5c4)]=function(){const _0xd26647=_0x5c342f;this['_shadowSprite']['visible']=this[_0xd26647(0xca5)][_0xd26647(0x1ab)](),this[_0xd26647(0x2c0)]();},Sprite_Battler[_0x5c342f(0xca4)]['updateShadowPosition']=function(){const _0x177852=_0x5c342f;if(!this[_0x177852(0x811)])return;this[_0x177852(0x811)]['y']=this[_0x177852(0x256)]-this['y']-0x2;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x699)]=function(){const _0x2adc1c=_0x5c342f;if(!this[_0x2adc1c(0xca5)])return;this[_0x2adc1c(0x507)]=this[_0x2adc1c(0xca5)][_0x2adc1c(0x282)](),this[_0x2adc1c(0xb38)]=this[_0x2adc1c(0xca5)][_0x2adc1c(0x8b8)]();},Game_BattlerBase['prototype']['battlerShadowScaleX']=function(){const _0x471e18=_0x5c342f,_0x42a5ab=this[_0x471e18(0x47b)]()?this[_0x471e18(0x761)]():this[_0x471e18(0x455)]();if(_0x42a5ab){const _0x38de1c=_0x42a5ab[_0x471e18(0x340)];if(_0x38de1c[_0x471e18(0xcbd)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x38de1c[_0x471e18(0xcbd)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if(_0x471e18(0xb58)===_0x471e18(0xb58))return Number(RegExp['$1'])||0x0;else{_0x22ab83[_0x471e18(0xc05)]()&&_0x38435d[_0x471e18(0xc5c)]>0x1&&this['setHandler'](_0x471e18(0x31b),this[_0x471e18(0x66d)]['bind'](this));if(_0x2b30cb['isForAnyone']()){const _0x17f326=_0x235e85[_0x471e18(0x4e9)]();_0x4a3938=_0x59af2f[_0x471e18(0x310)](_0x17f326),_0xfcc354['canSingleOrMultipleSelect']()&&_0x17f326['length']>0x1&&this[_0x471e18(0x286)](_0x471e18(0xd33),this[_0x471e18(0xcab)][_0x471e18(0x5c9)](this));}}}}}return 0x1;},Game_BattlerBase[_0x5c342f(0xca4)][_0x5c342f(0x8b8)]=function(){const _0x181641=_0x5c342f,_0x4e7ff0=this[_0x181641(0x47b)]()?this[_0x181641(0x761)]():this['enemy']();if(_0x4e7ff0){if(_0x181641(0x16d)==='IlBCM'){const _0x45eddb=_0x4e7ff0[_0x181641(0x340)];if(_0x45eddb[_0x181641(0xcbd)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x45eddb[_0x181641(0xcbd)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if('SWIix'==='lZpDK')_0x25efb1(_0x556d80['format'](_0x181641(0x4b0))),_0x63e8d9['exit']();else return Number(RegExp['$1'])||0x0;}}}else{if(!_0x3d0f4d)return;const _0x2f7427=new _0x148ffd();this[_0x181641(0x419)](_0x2f7427),_0x2f7427['setTroopPage'](_0x3dc6fb);}}return 0x1;},Sprite_Battler['prototype']['updateScale']=function(){const _0x264842=_0x5c342f;if(this[_0x264842(0x43e)]===Sprite_SvEnemy)return;this[_0x264842(0x350)](),this['finalizeScale']();},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x9b7)]=function(){const _0x2206c2=_0x5c342f,_0x542e10=this['_distortionSprite'];_0x542e10&&(_0x542e10['scale']['x']=this[_0x2206c2(0xc3c)](),_0x542e10[_0x2206c2(0x339)]['y']=this[_0x2206c2(0x569)]());},Sprite_Battler['prototype']['mainSpriteScaleX']=function(){const _0x4022b6=_0x5c342f;let _0x301d79=0x1;return _0x301d79*=this['_flipScaleX'],_0x301d79*=this[_0x4022b6(0x24b)],_0x301d79;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x569)]=function(){const _0x5f3e9c=_0x5c342f;return 0x1*this[_0x5f3e9c(0x625)];},Sprite_Battler[_0x5c342f(0xca4)]['mainSpriteWidth']=function(){const _0x10197f=_0x5c342f;return this[_0x10197f(0x6e4)]*this['mainSpriteScaleX']();},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x5d7)]=function(){const _0x308885=_0x5c342f;return this[_0x308885(0x880)]*this[_0x308885(0x569)]();},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x605)]=function(_0x5f43fe,_0x5155e1,_0x44360d,_0x8ac9a0){const _0x3b2810=_0x5c342f;if(!this['canMove']())return;if(!this[_0x3b2810(0x759)])return;if(this['_targetGrowX']===_0x5f43fe&&this[_0x3b2810(0xdfd)]===_0x5155e1)return;this[_0x3b2810(0xba4)]=_0x5f43fe,this['_targetGrowY']=_0x5155e1,this[_0x3b2810(0x295)]=_0x44360d,this['_growWholeDuration']=_0x44360d,this[_0x3b2810(0x855)]=_0x8ac9a0||_0x3b2810(0x7bc),_0x44360d<=0x0&&(this[_0x3b2810(0x24b)]=this[_0x3b2810(0xba4)],this[_0x3b2810(0x625)]=this['_targetGrowY']);},Sprite_Battler['prototype'][_0x5c342f(0x350)]=function(){const _0x336204=_0x5c342f;if(this[_0x336204(0x295)]<=0x0)return;if(!this[_0x336204(0x759)])return;const _0x5b563d=this[_0x336204(0x295)],_0x4c56ae=this[_0x336204(0x2e6)],_0xa792d5=this[_0x336204(0x855)];if(Imported[_0x336204(0xad9)]){if('aOQSA'===_0x336204(0xcd4)){if(!_0x3f025c[_0x336204(0x9a3)]())return;const _0x370b52=this['battler']();if(!_0x370b52)return;_0x370b52[_0x336204(0x7ec)](_0x4bcfea,_0x5e3ea6,_0x532398,_0x251110);}else this[_0x336204(0x24b)]=this[_0x336204(0x95d)](this['_growX'],this[_0x336204(0xba4)],_0x5b563d,_0x4c56ae,_0xa792d5),this['_growY']=this[_0x336204(0x95d)](this[_0x336204(0x625)],this[_0x336204(0xdfd)],_0x5b563d,_0x4c56ae,_0xa792d5);}else this[_0x336204(0x24b)]=(this[_0x336204(0x24b)]*(_0x5b563d-0x1)+this[_0x336204(0xba4)])/_0x5b563d,this[_0x336204(0x625)]=(this[_0x336204(0x625)]*(_0x5b563d-0x1)+this[_0x336204(0xdfd)])/_0x5b563d;this[_0x336204(0x295)]--;if(this[_0x336204(0x295)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x5c342f(0xca4)]['onGrowEnd']=function(){const _0x45587b=_0x5c342f;this[_0x45587b(0x24b)]=this[_0x45587b(0xba4)],this['_growY']=this[_0x45587b(0xdfd)];},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x196)]=function(){const _0x5d82d3=_0x5c342f;return this[_0x5d82d3(0x295)]>0x0;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xd6c)]=function(_0x5c53af,_0x11c0a7,_0xf18062,_0x228913){const _0x206f3e=_0x5c342f;if(!this[_0x206f3e(0xbd5)]())return;if(!this[_0x206f3e(0x759)])return;if(this['_targetSkewX']===_0x5c53af&&this[_0x206f3e(0xba1)]===_0x11c0a7)return;this[_0x206f3e(0xa3d)]=_0x5c53af,this[_0x206f3e(0xba1)]=_0x11c0a7,this[_0x206f3e(0xa24)]=_0xf18062,this[_0x206f3e(0x1e9)]=_0xf18062,this['_skewEasing']=_0x228913||'Linear',_0xf18062<=0x0&&(this[_0x206f3e(0x759)][_0x206f3e(0x9b0)]['x']=this['_targetSkewX'],this[_0x206f3e(0x759)][_0x206f3e(0x9b0)]['y']=this[_0x206f3e(0xba1)]);},Sprite_Battler['prototype'][_0x5c342f(0x820)]=function(){const _0x2d53f9=_0x5c342f;if(this[_0x2d53f9(0xa24)]<=0x0)return;if(!this[_0x2d53f9(0x759)])return;const _0x4d5658=this['_skewDuration'],_0x137482=this[_0x2d53f9(0x1e9)],_0x1f3783=this[_0x2d53f9(0xc08)],_0x3049a4=this['_distortionSprite'];if(Imported[_0x2d53f9(0xad9)])'xgPHZ'!==_0x2d53f9(0x24f)?(_0x3049a4[_0x2d53f9(0x9b0)]['x']=this[_0x2d53f9(0x95d)](_0x3049a4[_0x2d53f9(0x9b0)]['x'],this['_targetSkewX'],_0x4d5658,_0x137482,_0x1f3783),_0x3049a4[_0x2d53f9(0x9b0)]['y']=this[_0x2d53f9(0x95d)](_0x3049a4[_0x2d53f9(0x9b0)]['y'],this['_targetSkewY'],_0x4d5658,_0x137482,_0x1f3783)):_0x1b3c03[_0x2d53f9(0x603)][_0x2d53f9(0x62d)]=_0x2d53f9(0x917);else{if('EFiOJ'===_0x2d53f9(0x60e)){const _0x1b58fd=_0x3181ab(_0x4fbf61['$1'])[_0x2d53f9(0x68e)](/[\r\n]+/)[_0x2d53f9(0xd08)](_0x2138af=>_0x48655a(_0x2138af)[_0x2d53f9(0xb34)]()[_0x2d53f9(0xa5e)]());_0x6fdffc=_0x3fc7e5[_0x2d53f9(0x310)](_0x1b58fd);!_0x49c14c['note'][_0x2d53f9(0xcbd)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x251b9d[_0x2d53f9(0x340)]+=_0x2d53f9(0x581));;}else _0x3049a4['skew']['x']=(_0x3049a4[_0x2d53f9(0x9b0)]['x']*(_0x4d5658-0x1)+this['_targetSkewX'])/_0x4d5658,_0x3049a4['skew']['y']=(_0x3049a4[_0x2d53f9(0x9b0)]['y']*(_0x4d5658-0x1)+this[_0x2d53f9(0xba1)])/_0x4d5658;}this['_skewDuration']--;if(this[_0x2d53f9(0xa24)]<=0x0)this[_0x2d53f9(0x700)]();},Sprite_Battler['prototype'][_0x5c342f(0x700)]=function(){const _0x23bc1b=_0x5c342f;this[_0x23bc1b(0x759)]['skew']['x']=this[_0x23bc1b(0xa3d)],this[_0x23bc1b(0x759)][_0x23bc1b(0x9b0)]['y']=this['_targetSkewY'];},Sprite_Battler['prototype'][_0x5c342f(0x767)]=function(){const _0x2febd8=_0x5c342f;return this[_0x2febd8(0xa24)]>0x0;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x7ec)]=function(_0x557d6b,_0x4e331b,_0x208e0b,_0x296d30){const _0x42edd9=_0x5c342f;if(!this[_0x42edd9(0xbd5)]())return;if(!this[_0x42edd9(0x759)])return;if(this['_targetAngle']===_0x557d6b)return;this[_0x42edd9(0x6e2)]=_0x557d6b,this[_0x42edd9(0x3b8)]=_0x4e331b,this[_0x42edd9(0xe11)]=_0x4e331b,this[_0x42edd9(0x2f3)]=_0x208e0b||_0x42edd9(0x7bc),this['_angleRevertOnFinish']=_0x296d30,this[_0x42edd9(0x844)]===undefined&&(this[_0x42edd9(0x844)]=!![]),_0x4e331b<=0x0&&(this[_0x42edd9(0xb81)]=_0x557d6b,this[_0x42edd9(0x844)]&&(this[_0x42edd9(0x6e2)]=0x0,this['_currentAngle']=0x0));},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x4ce)]=function(){const _0xa80fa1=_0x5c342f;this[_0xa80fa1(0x56e)](),this[_0xa80fa1(0x806)]();},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x56e)]=function(){const _0x5911d3=_0x5c342f;if(this[_0x5911d3(0x3b8)]<=0x0)return;const _0x26c40a=this[_0x5911d3(0x3b8)],_0x42f77f=this['_angleWholeDuration'],_0x152374=this[_0x5911d3(0x2f3)];if(Imported[_0x5911d3(0xad9)])this[_0x5911d3(0xb81)]=this[_0x5911d3(0x95d)](this[_0x5911d3(0xb81)],this[_0x5911d3(0x6e2)],_0x26c40a,_0x42f77f,_0x152374);else{if(_0x5911d3(0x3c5)===_0x5911d3(0x2fc)){let _0x1885b7=_0x18a2c[_0x5911d3(0x388)](_0x18e88b['BattleCore'][_0x5911d3(0x34d)]['call'](this));return _0x7da5be[_0x5911d3(0xca2)][_0x5911d3(0x597)](_0x1885b7);}else this[_0x5911d3(0xb81)]=(this[_0x5911d3(0xb81)]*(_0x26c40a-0x1)+this['_targetAngle'])/_0x26c40a;}this[_0x5911d3(0x3b8)]--;if(this[_0x5911d3(0x3b8)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xce2)]=function(){const _0xa1f664=_0x5c342f;this['_currentAngle']=this[_0xa1f664(0x6e2)],this[_0xa1f664(0x844)]&&(this[_0xa1f664(0x6e2)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler['prototype'][_0x5c342f(0x45a)]=function(){const _0x5e17aa=_0x5c342f;return this[_0x5e17aa(0x3b8)]>0x0;},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x806)]=function(){const _0x552da8=_0x5c342f;if(!this[_0x552da8(0x759)])return;const _0x2fa741=this[_0x552da8(0xb81)],_0x2abf5d=this[_0x552da8(0x339)]['x'],_0x11a1af=this['_battler'][_0x552da8(0x47b)]()?-0x1:0x1;this[_0x552da8(0x759)][_0x552da8(0x22d)]=_0x2fa741*_0x2abf5d*_0x11a1af;const _0x22dc3c=this[_0x552da8(0x759)][_0x552da8(0x339)]['y'];this[_0x552da8(0x759)]['y']=this[_0x552da8(0x880)]*-0.5*(0x2-_0x22dc3c),this[_0x552da8(0x759)]['y']=Math[_0x552da8(0xc9d)](this['_distortionSprite']['y']);const _0x23811e=[this[_0x552da8(0xd17)],this[_0x552da8(0x475)],this[_0x552da8(0x75c)]];for(const _0x441c63 of _0x23811e){if(_0x552da8(0xb7f)==='mgxfd')this[_0x552da8(0xcd7)]='';else{if(!_0x441c63)continue;_0x441c63['y']=this[_0x552da8(0x880)]*0.5;}}this[_0x552da8(0x811)]&&(this['_shadowScaleX']=this[_0x552da8(0x507)]??0x1,this['_shadowScaleY']=this[_0x552da8(0xb38)]??0x1,this[_0x552da8(0x811)]['scale']['x']=this[_0x552da8(0x759)][_0x552da8(0x339)]['x']*this[_0x552da8(0x507)],this[_0x552da8(0x811)][_0x552da8(0x339)]['y']=this[_0x552da8(0x759)][_0x552da8(0x339)]['y']*this['_shadowScaleY']);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x904)]=Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x685)],Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x685)]=function(){const _0x5575f3=_0x5c342f;VisuMZ[_0x5575f3(0xca2)][_0x5575f3(0x904)][_0x5575f3(0xded)](this),VisuMZ[_0x5575f3(0xca2)][_0x5575f3(0xc90)][_0x5575f3(0x82c)][_0x5575f3(0x19f)]&&this['createHpGaugeSprite']();},VisuMZ[_0x5c342f(0xca2)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy['prototype'][_0x5c342f(0x35f)],Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x35f)]=function(){const _0x48a9d5=_0x5c342f;VisuMZ[_0x48a9d5(0xca2)][_0x48a9d5(0xc90)][_0x48a9d5(0x82c)][_0x48a9d5(0x480)]&&this[_0x48a9d5(0x2d9)](),VisuMZ['BattleCore'][_0x48a9d5(0x37b)][_0x48a9d5(0xded)](this);},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x2d9)]=function(){const _0x5e3bbd=_0x5c342f;if(!ConfigManager[_0x5e3bbd(0xd8e)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0xd4c899=VisuMZ['BattleCore'][_0x5e3bbd(0xc90)][_0x5e3bbd(0x82c)],_0x1666a5=new Sprite_HpGauge();_0x1666a5[_0x5e3bbd(0xaab)]['x']=_0xd4c899[_0x5e3bbd(0x90f)],_0x1666a5['anchor']['y']=_0xd4c899[_0x5e3bbd(0xc71)],_0x1666a5[_0x5e3bbd(0x339)]['x']=_0x1666a5[_0x5e3bbd(0x339)]['y']=_0xd4c899[_0x5e3bbd(0xa69)],this[_0x5e3bbd(0x6a7)]=_0x1666a5,this[_0x5e3bbd(0x393)](this[_0x5e3bbd(0x6a7)]),Spriteset_Battle[_0x5e3bbd(0xde4)]&&(_0x5e3bbd(0xe1f)===_0x5e3bbd(0xe1f)?BattleManager[_0x5e3bbd(0x176)](this[_0x5e3bbd(0x6a7)]):this[_0x5e3bbd(0xcd8)]++);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x804)]=Sprite_Battler['prototype'][_0x5c342f(0xb89)],Sprite_Battler['prototype'][_0x5c342f(0xb89)]=function(_0x136807){const _0x53cc84=_0x5c342f,_0xcd8133=this[_0x53cc84(0xca5)];VisuMZ[_0x53cc84(0xca2)][_0x53cc84(0x804)][_0x53cc84(0xded)](this,_0x136807),this['setupHpGaugeSprite'](_0x136807);if(_0xcd8133!==_0x136807)this[_0x53cc84(0x699)]();},Sprite_Battler[_0x5c342f(0xca4)]['setupHpGaugeSprite']=function(_0x59ec5f){const _0x4a3dbb=_0x5c342f;if(!_0x59ec5f)return;if(!this[_0x4a3dbb(0x6a7)])return;if(_0x59ec5f['isActor']()){}else{if(_0x59ec5f[_0x4a3dbb(0x796)]()){if(_0x4a3dbb(0x1a0)!=='SCzaS'){if(this['constructor']===Sprite_SvEnemy&&!_0x59ec5f[_0x4a3dbb(0x1ab)]())return;}else this[_0x4a3dbb(0xb30)](_0x1dbb45,_0x24371e['x']+_0x5a06de[_0x4a3dbb(0x6e4)]-_0x239e32,_0x9ce568['y'],_0x2f8075);}}this[_0x4a3dbb(0x6a7)][_0x4a3dbb(0x5bd)](_0x59ec5f,'hp');},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x9b2)]=function(){const _0x5e9a59=_0x5c342f;return this[_0x5e9a59(0xca5)]&&this['_battler'][_0x5e9a59(0x9b2)]();},Sprite_Battler['prototype'][_0x5c342f(0x343)]=function(){const _0x580b16=_0x5c342f,_0x4195d2=this[_0x580b16(0xd17)][_0x580b16(0x812)];if(!_0x4195d2)return;const _0x15fe42=_0x4195d2['width'];let _0x4aaf37=_0x4195d2[_0x580b16(0x880)];if(this['_battler'][_0x580b16(0x541)]()){if('OLzte'===_0x580b16(0xcb6)){if(this[_0x580b16(0xb27)])_0x4aaf37=Math['max'](0x0,this[_0x580b16(0xb27)][_0x580b16(0x880)]-0x4);}else{const _0x46abca=this[_0x580b16(0xcb2)]();if(_0x46abca[_0x580b16(0x845)]||_0x46abca[_0x580b16(0xdfe)]){const _0x452502=_0x54c405[_0x580b16(0x388)](_0x46abca);_0x452502[_0x580b16(0xca0)]=![],_0x452502[_0x580b16(0xce5)]=0x0,this[_0x580b16(0x8c2)][_0x580b16(0x843)](_0x452502);}if(_0x46abca['hpAffected']){const _0x2fdc91=_0x2c0b76[_0x580b16(0x388)](_0x46abca);_0x2fdc91[_0x580b16(0x845)]=![],_0x2fdc91[_0x580b16(0xdfe)]=![],_0x2fdc91['mpDamage']=0x0,this[_0x580b16(0x8c2)][_0x580b16(0x843)](_0x2fdc91);}if(_0x46abca[_0x580b16(0xce5)]!==0x0){const _0x12091e=_0x81b5fd[_0x580b16(0x388)](_0x46abca);_0x12091e[_0x580b16(0x845)]=![],_0x12091e[_0x580b16(0xdfe)]=![],_0x12091e[_0x580b16(0xca0)]=![],this[_0x580b16(0x8c2)][_0x580b16(0x843)](_0x12091e);}}}this[_0x580b16(0xd17)][_0x580b16(0x79b)](0x0,0x0,_0x15fe42,_0x4aaf37),this['setFrame'](0x0,0x0,_0x15fe42,_0x4aaf37);},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x7cf)]=function(){const _0x259aef=_0x5c342f;if(!this[_0x259aef(0xca5)])return;if(!this[_0x259aef(0x6a7)])return;const _0x56609d=VisuMZ['BattleCore'][_0x259aef(0xc90)][_0x259aef(0x82c)],_0x425684=this[_0x259aef(0x6a7)];_0x425684[_0x259aef(0x747)]=this['isVisualHpGaugeDisplayed']();const _0xb19084=_0x56609d['OffsetX'],_0x419bb4=_0x56609d[_0x259aef(0xdb0)];_0x425684['x']=_0xb19084,_0x425684['x']+=this[_0x259aef(0xca5)][_0x259aef(0x489)](),_0x425684['y']=-this[_0x259aef(0x880)]+_0x419bb4,_0x425684['y']+=this[_0x259aef(0xca5)][_0x259aef(0xc32)](),Spriteset_Battle[_0x259aef(0xde4)]&&SceneManager[_0x259aef(0x201)]['_spriteset']&&(_0x425684['x']+=this['x'],_0x425684['y']+=this['y']);},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x4b3)]=function(){const _0x497300=_0x5c342f;if(!this[_0x497300(0xca5)])return![];if(this[_0x497300(0xca5)][_0x497300(0x47b)]())return!![];if(this[_0x497300(0xca5)][_0x497300(0xadc)]())return![];if(this[_0x497300(0xc0c)]<=0x0)return![];const _0x5bc84f=this[_0x497300(0xca5)][_0x497300(0x455)]()[_0x497300(0x340)];if(_0x5bc84f['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x5bc84f['match'](/<HIDE HP GAUGE>/i))return![];const _0x1e77c2=VisuMZ[_0x497300(0xca2)][_0x497300(0xc90)]['HpGauge'];if(_0x1e77c2['RequiresDefeat']){if(_0x1e77c2[_0x497300(0xbc6)]&&BattleManager[_0x497300(0xc7a)]())return!![];if(this[_0x497300(0xca5)]['_visualHpGauge_JustDied'])return![];return this['_battler']['hasBeenDefeatedBefore']();}return!![];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xb20)]=Sprite_Battler[_0x5c342f(0xca4)]['isMoving'],Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xa86)]=function(){const _0x18ce50=_0x5c342f;if(!this['_battler'])return![];if(this[_0x18ce50(0x459)]>0x0)return!![];return VisuMZ[_0x18ce50(0xca2)][_0x18ce50(0xb20)][_0x18ce50(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc20)]=Sprite_Battler[_0x5c342f(0xca4)]['startMove'],Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x217)]=function(_0x1aa7f4,_0x3621df,_0x3f3386){const _0x3ab062=_0x5c342f;if(this[_0x3ab062(0xbd5)]()){if('AOfZa'===_0x3ab062(0xaad)){const _0x452204=_0x1d11b0[_0x3ab062(0xbcd)],_0x20cf33=_0x3ab062(0xb7d);this[_0x3ab062(0xb75)](_0x452204,_0x20cf33);}else VisuMZ[_0x3ab062(0xca2)][_0x3ab062(0xc20)][_0x3ab062(0xded)](this,_0x1aa7f4,_0x3621df,_0x3f3386);}},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0xbd5)]=function(){const _0x22b1ea=_0x5c342f;if(this[_0x22b1ea(0xca5)]&&this[_0x22b1ea(0xca5)][_0x22b1ea(0x541)]())return![];if(this[_0x22b1ea(0xca5)]&&!this['_battler']['canBattlerMove']())return![];return $gameSystem[_0x22b1ea(0x9a3)]();},Sprite_Battler['prototype'][_0x5c342f(0x632)]=function(){},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x596)]=function(){const _0x568d9f=_0x5c342f;this[_0x568d9f(0x217)](0x0,0x0,0xc);},Sprite_Battler[_0x5c342f(0xca4)][_0x5c342f(0x62f)]=function(){},Sprite_Battler[_0x5c342f(0xca4)]['stepFlinch']=function(){const _0x29feee=_0x5c342f,_0x21c05e=VisuMZ[_0x29feee(0xca2)]['Settings'][_0x29feee(0xe29)],_0x3990ea=this[_0x29feee(0xca5)]&&this[_0x29feee(0xca5)][_0x29feee(0x47b)]()?0x1:-0x1,_0xa99798=this[_0x29feee(0xda2)]-this[_0x29feee(0x301)]+_0x3990ea*_0x21c05e[_0x29feee(0x8c4)],_0x341977=this[_0x29feee(0x256)]-this[_0x29feee(0x3f1)]+_0x3990ea*_0x21c05e[_0x29feee(0x469)],_0x38da3c=_0x21c05e[_0x29feee(0x2fd)];this[_0x29feee(0x217)](_0xa99798,_0x341977,_0x38da3c);},Sprite_Battler[_0x5c342f(0xca4)]['startShakeFlinch']=function(_0x3bf3db,_0x5c2380){const _0x5d389b=_0x5c342f,_0x1ef7e0=VisuMZ[_0x5d389b(0xca2)][_0x5d389b(0xc90)][_0x5d389b(0xe29)];this[_0x5d389b(0x52d)]=Math[_0x5d389b(0xc9d)]((_0x1ef7e0['ShakeFlinchDuration']??0x18)*_0x5c2380),this['_shakeFlinchPower']=Math[_0x5d389b(0xaee)](this[_0x5d389b(0x9db)],_0x3bf3db);},Sprite_Battler['prototype'][_0x5c342f(0xc2e)]=function(){const _0x5f4400=_0x5c342f,_0x41cf46=VisuMZ['BattleCore'][_0x5f4400(0xc90)][_0x5f4400(0xe29)];if(!(_0x41cf46[_0x5f4400(0x478)]??![]))return;if(this['_shakeFlinchDuration']>0x0){if(_0x5f4400(0x6ac)!==_0x5f4400(0x3a7)){const _0x395ade=this['_shakeFlinchDuration'];this[_0x5f4400(0x9db)]=this['_shakeFlinchPower']*(_0x395ade-0x1)/_0x395ade,this[_0x5f4400(0x52d)]--;if(this[_0x5f4400(0x52d)]<=0x0){if(_0x5f4400(0x3ce)==='SHzja')this[_0x5f4400(0x9db)]=0x0;else return _0x1e724a[_0x5f4400(0xca2)][_0x5f4400(0xc90)][_0x5f4400(0x7e4)]['CmdTextAlign'];}}else return![];}this[_0x5f4400(0x9db)]>0x0?(this['_mainSprite']['x']=Math[_0x5f4400(0xb47)](this[_0x5f4400(0x9db)])*(Math['random']()<0.5?-0x1:0x1),this[_0x5f4400(0x256)]!==this['y']&&(this[_0x5f4400(0xd17)]['y']=this[_0x5f4400(0x880)]*0.5,this[_0x5f4400(0xd17)]['y']+=Math[_0x5f4400(0xb47)](this[_0x5f4400(0x9db)])*(Math[_0x5f4400(0x935)]()<0.5?-0x1:0x1))):_0x5f4400(0x6b3)!==_0x5f4400(0x6b3)?_0x307b55[_0x5f4400(0x340)]+=_0x5f4400(0x581):(this[_0x5f4400(0xd17)]['x']=0x0,this[_0x5f4400(0xd17)]['y']=this[_0x5f4400(0x880)]*0.5);},VisuMZ[_0x5c342f(0xca2)]['Sprite_Actor_initMembers']=Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xa41)],Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xa41)]=function(){const _0x27691f=_0x5c342f;VisuMZ['BattleCore'][_0x27691f(0x8de)][_0x27691f(0xded)](this),this[_0x27691f(0x3a5)]();},Sprite_Actor['prototype'][_0x5c342f(0xb3b)]=function(){const _0x2a77aa=_0x5c342f;return this[_0x2a77aa(0x759)]||this[_0x2a77aa(0xd17)]||this;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xa4a)]=Sprite_Actor[_0x5c342f(0xca4)]['moveToStartPosition'],Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x23a)]=function(){},Sprite_Actor[_0x5c342f(0xca4)]['moveToStartPositionBattleCore']=function(_0x17b19e){const _0x1baf8f=_0x5c342f;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x17b19e)return;if(!_0x17b19e[_0x1baf8f(0xbd5)]())return;VisuMZ[_0x1baf8f(0xca2)][_0x1baf8f(0xa4a)][_0x1baf8f(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xad1)]=Sprite_Actor[_0x5c342f(0xca4)]['setActorHome'],Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x1f5)]=function(_0x9a3c66){const _0x3e5d5e=_0x5c342f;VisuMZ[_0x3e5d5e(0xca2)]['Settings'][_0x3e5d5e(0xe29)][_0x3e5d5e(0x5da)]?VisuMZ[_0x3e5d5e(0xca2)][_0x3e5d5e(0xc90)][_0x3e5d5e(0xe29)]['HomePosJS'][_0x3e5d5e(0xded)](this,_0x9a3c66):VisuMZ[_0x3e5d5e(0xca2)]['Sprite_Actor_setActorHome'][_0x3e5d5e(0xded)](this,_0x9a3c66);},VisuMZ['BattleCore'][_0x5c342f(0xbba)]=Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xb89)],Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xb89)]=function(_0x4cec78){VisuMZ['BattleCore']['Sprite_Actor_setBattler']['call'](this,_0x4cec78),this['setBattlerBattleCore'](_0x4cec78);},Sprite_Actor['prototype'][_0x5c342f(0x7e1)]=function(_0x153c33){const _0x2311a2=_0x5c342f;if(!_0x153c33)return;if(!this[_0x2311a2(0xd17)])return;this[_0x2311a2(0xd17)][_0x2311a2(0xaab)]['x']=this[_0x2311a2(0x465)]['svBattlerAnchorX'](),this[_0x2311a2(0xd17)][_0x2311a2(0xaab)]['y']=this[_0x2311a2(0x465)][_0x2311a2(0x553)](),this[_0x2311a2(0xab6)]();},VisuMZ['BattleCore']['Sprite_Actor_update']=Sprite_Actor[_0x5c342f(0xca4)]['update'],Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x2a5)]=function(){const _0x177580=_0x5c342f;VisuMZ[_0x177580(0xca2)][_0x177580(0x4ee)]['call'](this),this[_0x177580(0x465)]&&(this[_0x177580(0x69d)](),this['updateStyleOpacity']());},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xd91)]=Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xa32)],Sprite_Actor['prototype'][_0x5c342f(0xa32)]=function(){const _0x19293c=_0x5c342f;VisuMZ[_0x19293c(0xca2)][_0x19293c(0xd91)]['call'](this);if(this['_mainSprite']&&this[_0x19293c(0xd17)][_0x19293c(0x812)]&&this['_battler']){if(this[_0x19293c(0xd17)][_0x19293c(0x812)][_0x19293c(0xd09)]!==this['_battler'][_0x19293c(0xc46)]()){if(_0x19293c(0x5fb)!=='KtXRf')return this['_battleLayoutStyle'];else this[_0x19293c(0xd17)][_0x19293c(0x812)]['smooth']=this[_0x19293c(0xca5)]['battlerSmoothImage']();}}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x1b0)]=Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x5c4)],Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x5c4)]=function(){const _0x1086ad=_0x5c342f;VisuMZ[_0x1086ad(0xca2)][_0x1086ad(0x1b0)][_0x1086ad(0xded)](this),this[_0x1086ad(0xe35)]();},Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xe35)]=function(){const _0x46c202=_0x5c342f;if(!this[_0x46c202(0xd17)])return;if(!this['_shadowSprite'])return;this[_0x46c202(0xab6)](),this[_0x46c202(0x2c0)]();},Sprite_Actor['prototype'][_0x5c342f(0x69d)]=function(){const _0x5a1e60=_0x5c342f;this['_stateSprite'][_0x5a1e60(0x339)]['x']=0x1/(this[_0x5a1e60(0x339)]['x']||0.001),this['_stateSprite']['scale']['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x57d)]=function(){const _0x12284e=_0x5c342f;if(!$gameSystem['isSideView']()&&this[_0x12284e(0x43e)]===Sprite_Actor){if(_0x12284e(0x712)===_0x12284e(0x712)){const _0x1415dc=Scene_Battle[_0x12284e(0xca4)][_0x12284e(0xcf1)]();if([_0x12284e(0x4e4),'list',_0x12284e(0x483),_0x12284e(0x966)][_0x12284e(0xaec)](_0x1415dc)){if(_0x12284e(0x57b)===_0x12284e(0x921)){if(!this[_0x12284e(0x4d3)]())return;this[_0x12284e(0x440)]['scale']['x']=-0x1,this[_0x12284e(0x440)]['x']=this[_0x12284e(0x6d9)][_0x12284e(0x6e4)],this[_0x12284e(0x1b6)][_0x12284e(0x339)]['x']=-0x1,this['_uiContainer']['x']=this[_0x12284e(0x6d9)]['width'],this[_0x12284e(0x3bb)][_0x12284e(0x339)]['x']=-0x1,this['_animationContainer']['x']=this['_battleField'][_0x12284e(0x6e4)],this[_0x12284e(0x2d5)]['scale']['x']=-0x1,this[_0x12284e(0x2d5)]['x']=this[_0x12284e(0x6d9)]['x']+this[_0x12284e(0x6d9)]['width'];}else this[_0x12284e(0xc0c)]=0x0;}}else return _0xd38622[_0x12284e(0xd1e)](_0x12284e(0x1a9));}},Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xc59)]=function(){const _0x1683a4=_0x5c342f,_0x4a8f2=this[_0x1683a4(0x465)];if(_0x4a8f2){if(_0x1683a4(0xc16)===_0x1683a4(0x83b)){const _0xe4af13=_0x4cdb3b[_0x1683a4(0xca4)][_0x1683a4(0xa47)]()*0x2+0x4;let _0x356c8a=_0x165ea5['boxWidth']-_0xe4af13;_0x309fe7[_0x1683a4(0xad9)]&&_0x47b18f['isSideButtonLayout']()&&(_0x356c8a+=_0xe4af13);const _0x167a55=this[_0x1683a4(0x43d)](),_0x1cbdb7=_0x228132[_0x1683a4(0x2f9)]-_0x167a55-this['statusWindowRect']()[_0x1683a4(0x880)]+_0xd11cc8[_0x1683a4(0xca4)][_0x1683a4(0x7bf)](),_0x4440f7=0x0;return new _0x46d4f1(_0x4440f7,_0x167a55,_0x356c8a,_0x1cbdb7);}else{if(_0x4a8f2[_0x1683a4(0x3d3)])return;const _0x3a305c=_0x4a8f2[_0x1683a4(0xd3b)]();if(_0x4a8f2[_0x1683a4(0xa83)]()||_0x4a8f2[_0x1683a4(0xc9e)]())this['startMotion'](_0x1683a4(0xa6f));else{if(_0x3a305c===0x3){if(_0x1683a4(0xe03)!=='XWYII'){if(this[_0x1683a4(0xe1d)]['some'](_0x17afbb=>_0x17afbb['item']()&&_0x17afbb[_0x1683a4(0x58d)]()))return!![];}else this[_0x1683a4(0x40a)]('dead');}else{if(_0x3a305c===0x2){if(_0x1683a4(0x742)!==_0x1683a4(0x742)){const _0x45571d=this[_0x1683a4(0x89d)]();if(_0x45571d&&this[_0x1683a4(0xc0c)]<0xff)this['opacity']+=0x10;else!_0x45571d&&this[_0x1683a4(0xc0c)]>0x0&&(this[_0x1683a4(0xc0c)]-=0x10);}else this[_0x1683a4(0x40a)](_0x1683a4(0x6a3));}else{if(this[_0x1683a4(0x6d2)])this['startMotion'](_0x1683a4(0xa5a));else{if(_0x4a8f2[_0x1683a4(0x98e)]())_0x1683a4(0x5d6)!==_0x1683a4(0x859)?this[_0x1683a4(0x40a)](_0x1683a4(0x630)):_0x4bbc36[_0x1683a4(0xca2)][_0x1683a4(0x888)][_0x1683a4(0xded)](this,_0x959afb,_0x2278e8);else{if(_0x4a8f2[_0x1683a4(0x740)]()){if(_0x1683a4(0x862)!==_0x1683a4(0x862))return _0x3d8295(_0x13b735['$1']);else this[_0x1683a4(0x40a)](_0x1683a4(0x1cb));}else{if(_0x4a8f2[_0x1683a4(0x9d0)]()||_0x4a8f2['isGuardWaiting']())'jejRR'===_0x1683a4(0xd16)?this['startMotion'](_0x1683a4(0xc98)):_0x4de561[_0x1683a4(0x430)]('cutinExit');else{if(_0x3a305c===0x1)this[_0x1683a4(0x40a)]('abnormal');else{if(_0x4a8f2[_0x1683a4(0xb28)]())this[_0x1683a4(0x40a)](_0x1683a4(0x79c));else{if(_0x4a8f2[_0x1683a4(0xafd)]())this[_0x1683a4(0x40a)](_0x1683a4(0xa6f));else _0x4a8f2[_0x1683a4(0x6cf)]()?this['startMotion'](_0x1683a4(0x630)):this[_0x1683a4(0x40a)](_0x1683a4(0xa6f));}}}}}}}}}}}},Sprite_Actor['prototype']['retreat']=function(){const _0x383848=_0x5c342f,_0x3505f6=0xa,_0x92e088=0x12c*_0x3505f6,_0x4b1c28=0x1e*_0x3505f6;this[_0x383848(0x217)](_0x92e088,0x0,_0x4b1c28);},Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xb70)]=function(){const _0x482e55=_0x5c342f;Sprite_Battler[_0x482e55(0xca4)][_0x482e55(0xb70)][_0x482e55(0xded)](this);},Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xcf4)]=function(){const _0x29aa06=_0x5c342f;return Sprite_Battler[_0x29aa06(0xaa4)];},Sprite_Weapon['prototype']['animationWait']=function(){const _0x51c9ed=_0x5c342f;return Sprite_Battler[_0x51c9ed(0xaa4)];},Sprite_Actor['prototype']['setupMotion']=function(){},Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0xc63)]=function(){},Sprite_Actor['prototype'][_0x5c342f(0x998)]=function(){const _0x185170=_0x5c342f;if(this[_0x185170(0xb56)]&&++this['_motionCount']>=this[_0x185170(0xcf4)]()){if(_0x185170(0x735)!=='LFmAH'){if(this[_0x185170(0xb56)][_0x185170(0x981)]){if('DhKbQ'!==_0x185170(0xa89))this[_0x185170(0xcd8)]=(this[_0x185170(0xcd8)]+0x1)%0x4;else{if(!_0x37f153[_0x185170(0xca2)][_0x185170(0xc90)][_0x185170(0x831)][_0x185170(0x544)])return;_0x1f0700[_0x185170(0xca2)][_0x185170(0x9ec)][_0x185170(0xded)](this,_0x512cc4);}}else{if(this[_0x185170(0xcd8)]<0x2)this[_0x185170(0xcd8)]++;else{const _0x54e679=this[_0x185170(0x465)];if(_0x54e679)_0x54e679['_performDamageMotion']=undefined;this[_0x185170(0xc59)]();}}this[_0x185170(0x8a2)]=0x0;}else{if(!this[_0x185170(0x811)])return;if(this[_0x185170(0xca5)]&&this[_0x185170(0xca5)]['svBattlerShadowVisible']()){const _0x5e5468=this['_shadowSprite'][_0x185170(0x812)];this['_shadowSprite'][_0x185170(0x79b)](0x0,0x0,_0x5e5468[_0x185170(0x6e4)],_0x5e5468[_0x185170(0x880)]);}else this[_0x185170(0x811)][_0x185170(0x79b)](0x0,0x0,0x0,0x0);}}},Sprite_Actor['prototype'][_0x5c342f(0x68a)]=function(_0x5e038d){const _0x397277=_0x5c342f;if(this[_0x397277(0xca5)]&&this[_0x397277(0xca5)][_0x397277(0x541)]()){if('BEnsr'!==_0x397277(0x506))_0x220f86+=_0xe99ee1,_0x19ec51+=_0x170616;else{this['_motion']=Sprite_Actor[_0x397277(0x5f6)]['dead'];return;}}const _0x51666f=Sprite_Actor[_0x397277(0x5f6)][_0x5e038d];this[_0x397277(0xb56)]=_0x51666f,this['_motionCount']=0x0,this[_0x397277(0xcd8)]=0x0;},Sprite_Actor['prototype'][_0x5c342f(0xe3e)]=function(_0x593546){const _0x511df5=_0x5c342f;if(this[_0x511df5(0x9b2)]())return;this[_0x511df5(0x17e)](),this[_0x511df5(0x7c5)]['setup'](_0x593546),this[_0x511df5(0x465)][_0x511df5(0xa76)]();},Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x17e)]=function(){const _0x278270=_0x5c342f;let _0x4a899f=-0x10,_0x320076=this[_0x278270(0x880)]*0.5;const _0x594819=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x172a40=this[_0x278270(0xca5)][_0x278270(0xd63)]()['map'](_0x5ecb6b=>_0x5ecb6b&&_0x5ecb6b['note'][_0x278270(0xcbd)](_0x594819)?Number(RegExp['$1']):0x0),_0x1ff898=this['_battler']['traitObjects']()['map'](_0x25e654=>_0x25e654&&_0x25e654[_0x278270(0x340)][_0x278270(0xcbd)](_0x594819)?Number(RegExp['$2']):0x0);_0x4a899f=_0x172a40[_0x278270(0x74c)]((_0x16aa96,_0x190371)=>_0x16aa96+_0x190371,_0x4a899f),_0x320076=_0x1ff898[_0x278270(0x74c)]((_0x495ff0,_0x309949)=>_0x495ff0+_0x309949,_0x320076),this[_0x278270(0x7c5)]['x']=_0x4a899f,this['_weaponSprite']['y']=_0x320076,this[_0x278270(0x7c5)][_0x278270(0x2a5)]();},Sprite_Weapon[_0x5c342f(0xca4)][_0x5c342f(0x5bd)]=function(_0x1a9b02){const _0x58a4b6=_0x5c342f;this[_0x58a4b6(0xa11)]=_0x1a9b02,this[_0x58a4b6(0x97d)]=-0x1,this[_0x58a4b6(0xcd8)]=0x0,this[_0x58a4b6(0x45d)](),this[_0x58a4b6(0x5f8)]();},Sprite_Actor[_0x5c342f(0xca4)]['updateTargetPosition']=function(){},Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x632)]=function(){const _0x3ccf21=_0x5c342f,_0x1e1752=VisuMZ[_0x3ccf21(0xca2)]['Settings']['ActionSequence'],_0x237e89=_0x1e1752[_0x3ccf21(0x2f1)],_0x11a1de=_0x1e1752['StepDistanceY'],_0x16562c=_0x1e1752[_0x3ccf21(0x461)];this[_0x3ccf21(0x217)](-_0x237e89,-_0x11a1de,_0x16562c);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc1f)]=Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x5f8)],Sprite_Actor[_0x5c342f(0xca4)][_0x5c342f(0x5f8)]=function(){const _0x3f83a0=_0x5c342f;this[_0x3f83a0(0x9b2)]()?this['updateStaticSvBattlerFrames']():(this['applyFreezeMotionFrames'](),VisuMZ[_0x3f83a0(0xca2)][_0x3f83a0(0xc1f)][_0x3f83a0(0xded)](this));},Sprite_Actor['prototype'][_0x5c342f(0x7a8)]=function(){const _0x250a2b=_0x5c342f;if(this[_0x250a2b(0xca5)]&&this[_0x250a2b(0xca5)][_0x250a2b(0x499)]){const _0x4055df=this[_0x250a2b(0xca5)][_0x250a2b(0x499)];this[_0x250a2b(0xb56)]=Sprite_Actor[_0x250a2b(0x5f6)][_0x4055df['motionType']],this[_0x250a2b(0xcd8)]=_0x4055df['pattern'];const _0x5b5dda=this['_weaponSprite'];_0x5b5dda[_0x250a2b(0xa57)](_0x4055df[_0x250a2b(0xb4f)],_0x4055df[_0x250a2b(0x607)]),this['adjustWeaponSpriteOffset']();}},Sprite_Weapon[_0x5c342f(0xca4)][_0x5c342f(0xa57)]=function(_0xe64ea,_0x2ee89f){const _0x3b26a9=_0x5c342f;this['_weaponImageId']=_0xe64ea,this[_0x3b26a9(0x97d)]=-Infinity,this[_0x3b26a9(0xcd8)]=_0x2ee89f,this[_0x3b26a9(0x45d)](),this[_0x3b26a9(0x5f8)]();},Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0xa41)]=function(){const _0x488c84=_0x5c342f;Sprite_Battler[_0x488c84(0xca4)]['initMembers'][_0x488c84(0xded)](this),this[_0x488c84(0xa4e)]=null,this[_0x488c84(0x4f0)]=![],this[_0x488c84(0x8b4)]='',this['_battlerHue']=0x0,this[_0x488c84(0x786)]=null,this['_effectDuration']=0x0,this[_0x488c84(0x961)]=0x0,this[_0x488c84(0xc7c)](),this[_0x488c84(0x35f)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xa81)]=Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x2a5)],Sprite_Enemy[_0x5c342f(0xca4)]['update']=function(){const _0x554fbf=_0x5c342f;VisuMZ['BattleCore'][_0x554fbf(0xa81)][_0x554fbf(0xded)](this),this[_0x554fbf(0xab6)]();},Sprite_Enemy[_0x5c342f(0xca4)]['createMainSprite']=function(){const _0x2aebfa=_0x5c342f;this['_mainSprite']=new Sprite(),this[_0x2aebfa(0xd17)][_0x2aebfa(0xaab)]['x']=0.5,this[_0x2aebfa(0xd17)][_0x2aebfa(0xaab)]['y']=0x1,this[_0x2aebfa(0x393)](this[_0x2aebfa(0xd17)]),this[_0x2aebfa(0x3a5)]();},Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0xb3b)]=function(){const _0x552e48=_0x5c342f;return this[_0x552e48(0x759)]||this[_0x552e48(0xd17)]||this;},Sprite_Enemy['prototype']['loadBitmap']=function(_0x223e86){const _0x38381f=_0x5c342f;this[_0x38381f(0x812)]=new Bitmap(0x1,0x1);if(this[_0x38381f(0x1ab)]()){if(_0x38381f(0xc78)!==_0x38381f(0xafc)){const _0x44218b=this['_enemy']['svBattlerData']();this[_0x38381f(0x812)]=new Bitmap(_0x44218b['width'],_0x44218b[_0x38381f(0x880)]),this[_0x38381f(0xd17)][_0x38381f(0x812)]=new Bitmap(0x1,0x1);}else{if(!_0xa18340[_0x38381f(0x371)]())return;const _0x46412c=_0x5a2c9d[_0x38381f(0x56f)];_0x46412c['refresh']();}}else{if($gameSystem[_0x38381f(0x9a3)]()){const _0x310bba=ImageManager['loadSvEnemy'](_0x223e86);_0x310bba[_0x38381f(0x4bc)](this[_0x38381f(0x7cd)]['bind'](this,_0x310bba));}else{if(_0x38381f(0x6d8)!==_0x38381f(0x6d8)){if(!this['enemy']())return;_0x150994['isBattleFlipped']()?this['x']=_0xea0bb2[_0x38381f(0xba3)]-this[_0x38381f(0x455)]()[_0x38381f(0x9d3)]()['_baseX']:this['x']=this[_0x38381f(0x455)]()[_0x38381f(0x9d3)]()[_0x38381f(0xda2)];this['x']-=_0x1abdae[_0x38381f(0x5c1)](this[_0x38381f(0x6e4)]/0x2),this['y']=this[_0x38381f(0x455)]()[_0x38381f(0x9d3)]()[_0x38381f(0x256)]-_0x2f9b0f[_0x38381f(0x5c1)](this['lineHeight']()*1.5);const _0x57e57c=_0xd5c252['BattleCore']['Settings']['Enemy'];this['x']+=_0x57e57c[_0x38381f(0xd2f)]||0x0,this['y']+=_0x57e57c[_0x38381f(0x642)]||0x0;}else{const _0x983e27=ImageManager[_0x38381f(0x7a0)](_0x223e86);_0x983e27[_0x38381f(0x4bc)](this[_0x38381f(0x7cd)][_0x38381f(0x5c9)](this,_0x983e27));}}}},Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x7cd)]=function(_0x101a62){const _0x5f1d4c=_0x5c342f;this[_0x5f1d4c(0xd17)][_0x5f1d4c(0x812)]=_0x101a62,this[_0x5f1d4c(0x812)]=new Bitmap(_0x101a62[_0x5f1d4c(0x6e4)],_0x101a62[_0x5f1d4c(0x880)]);},VisuMZ['BattleCore'][_0x5c342f(0xaa8)]=Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x7b3)],Sprite_Enemy['prototype'][_0x5c342f(0x7b3)]=function(_0x128e50){const _0x322d5f=_0x5c342f;this[_0x322d5f(0xd17)]&&(_0x322d5f(0x25a)!==_0x322d5f(0xd00)?this[_0x322d5f(0xd17)][_0x322d5f(0x7b3)](_0x128e50):_0x3e5286[_0x322d5f(0x843)](_0x322d5f(0x852),_0x56685e));},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xcaa)]=Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x500)],Sprite_Enemy[_0x5c342f(0xca4)]['initVisibility']=function(){const _0x397edb=_0x5c342f;if(this[_0x397edb(0x47f)]())'YUWux'!==_0x397edb(0x1e3)?VisuMZ[_0x397edb(0xca2)][_0x397edb(0xcaa)][_0x397edb(0xded)](this):this[_0x397edb(0x554)]()?_0x44a735[_0x397edb(0x201)][_0x397edb(0x338)]['removeDamageSprite'](_0x56a068):(this['damageContainer']()['removeChild'](_0x26526d),this[_0x397edb(0x546)]['remove'](_0x4bbe98),_0x5bd69b['destroy']());else{if(_0x397edb(0x284)!==_0x397edb(0x284)){this[_0x397edb(0x7a2)](_0x33c0e7)[_0x397edb(0xcbd)](/\\I\[(\d+)\]/i);const _0x3ef8d7=_0x112780(_0x2f12b0['$1'])||0x0,_0x583b7f=this['itemLineRect'](_0x53e1cb),_0x2e38ac=_0x583b7f['x']+_0x53137f[_0x397edb(0x9b3)]((_0x583b7f['width']-_0x496823['iconWidth'])/0x2),_0x57afbd=_0x583b7f['y']+(_0x583b7f[_0x397edb(0x880)]-_0x5c80d8[_0x397edb(0xcdf)])/0x2;this[_0x397edb(0xd9e)](_0x3ef8d7,_0x2e38ac,_0x57afbd);}else this[_0x397edb(0x4f0)]=!this[_0x397edb(0xa4e)][_0x397edb(0xadc)](),!this[_0x397edb(0x4f0)]&&(this[_0x397edb(0xc0c)]=0x0);}},VisuMZ['BattleCore'][_0x5c342f(0x8ac)]=Sprite_Enemy[_0x5c342f(0xca4)]['updateCollapse'],Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x333)]=function(){const _0x1b43c1=_0x5c342f;if(this[_0x1b43c1(0x47f)]())VisuMZ[_0x1b43c1(0xca2)][_0x1b43c1(0x8ac)]['call'](this);},Sprite_Enemy['prototype']['updateFrame']=function(){const _0x4df877=_0x5c342f;Sprite_Battler[_0x4df877(0xca4)][_0x4df877(0x5f8)][_0x4df877(0xded)](this);const _0xaeab64=this[_0x4df877(0xb3b)]()||this;if(!_0xaeab64)return;!_0xaeab64[_0x4df877(0x812)]&&(_0x4df877(0x5d8)===_0x4df877(0x288)?_0x42498a[_0x4df877(0x5e1)](this[_0x4df877(0xdda)]()):_0xaeab64[_0x4df877(0x812)]=new Bitmap(this[_0x4df877(0x6e4)]||0x1,this['height']||0x1));if(this['_effectType']===_0x4df877(0x982))'kIJQI'===_0x4df877(0x81e)?(this[_0x4df877(0x338)][_0x4df877(0x828)](),this[_0x4df877(0x8f0)][_0x4df877(0xa29)](),this[_0x4df877(0x8c1)][_0x4df877(0x5eb)]()):this[_0x4df877(0xd17)][_0x4df877(0x79b)](0x0,0x0,this['_mainSprite'][_0x4df877(0x6e4)]||0x1,this['_effectDuration']);else{let _0x5c31c3=0x1;if(_0xaeab64&&_0xaeab64[_0x4df877(0x812)])_0x5c31c3=_0xaeab64[_0x4df877(0x812)][_0x4df877(0x6e4)];let _0x1afd5b=0x1;if(this[_0x4df877(0x812)])_0x1afd5b=this['bitmap']['height'];_0xaeab64[_0x4df877(0x79b)](0x0,0x0,_0x5c31c3,_0x1afd5b);}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x898)]=Sprite_Enemy['prototype'][_0x5c342f(0x8f2)],Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x8f2)]=function(){const _0x2ee8ee=_0x5c342f;if(this[_0x2ee8ee(0x47f)]())VisuMZ[_0x2ee8ee(0xca2)][_0x2ee8ee(0x898)]['call'](this);},Sprite_Enemy[_0x5c342f(0xca4)]['isMoving']=function(){const _0x5965f2=_0x5c342f;return Sprite_Battler[_0x5965f2(0xca4)][_0x5965f2(0xa86)]['call'](this);},VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite']=Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x69d)],Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x69d)]=function(){const _0x4428ec=_0x5c342f;VisuMZ['BattleCore'][_0x4428ec(0xc29)]['call'](this),this[_0x4428ec(0x64c)]();},Sprite_Enemy[_0x5c342f(0xca4)]['updateStateSpriteBattleCore']=function(){const _0x40c3e4=_0x5c342f,_0x41ebec=VisuMZ[_0x40c3e4(0xca2)][_0x40c3e4(0xc90)][_0x40c3e4(0x4f1)];if(_0x41ebec[_0x40c3e4(0xb8b)]&&!_0x41ebec['NameLegacy']){if(_0x40c3e4(0xc84)!==_0x40c3e4(0x3f7)){this[_0x40c3e4(0x216)]['opacity']=0x0;return;}else{this[_0x40c3e4(0x2f6)]=_0x1fec83,this['_text']='';const _0x577c9a=new _0x57a6ba(0x0,0x0,_0x96f23[_0x40c3e4(0xba3)],this[_0x40c3e4(0x8f4)]()*0x4);_0x738104[_0x40c3e4(0xca4)][_0x40c3e4(0xd5a)][_0x40c3e4(0xded)](this,_0x577c9a),this['setBackgroundType'](0x2),this['contentsOpacity']=0x0;}}this[_0x40c3e4(0x216)]['x']=0x0,this[_0x40c3e4(0x216)]['x']+=this['_battler'][_0x40c3e4(0x489)]();let _0x46022e=0x1;if(this[_0x40c3e4(0x812)])_0x46022e=this[_0x40c3e4(0x812)]['height'];this['_stateIconSprite']['y']=-_0x46022e-this['_stateIconSprite'][_0x40c3e4(0x880)]-0x4,this[_0x40c3e4(0x216)]['y']+=this[_0x40c3e4(0xca5)]['battleUIOffsetY'](),this[_0x40c3e4(0x216)][_0x40c3e4(0x339)]['x']=0x1/(this[_0x40c3e4(0x339)]['x']||0.001),this[_0x40c3e4(0x216)]['scale']['y']=0x1/(this['scale']['y']||0.001),this['hasSvBattler']()&&(this[_0x40c3e4(0x475)]['_stateSprite'][_0x40c3e4(0x339)]['x']=-0x1/(this[_0x40c3e4(0x339)]['x']||0.001),this[_0x40c3e4(0x475)][_0x40c3e4(0x604)]['scale']['y']=0x1/(this[_0x40c3e4(0x339)]['y']||0.001));},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x29e)]=Sprite_Enemy[_0x5c342f(0xca4)]['setBattler'],Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0xb89)]=function(_0x51c3ac){const _0x2f2fda=_0x5c342f;VisuMZ[_0x2f2fda(0xca2)]['Sprite_Enemy_setBattler'][_0x2f2fda(0xded)](this,_0x51c3ac),this['setSvBattlerSprite'](_0x51c3ac);},Sprite_Enemy[_0x5c342f(0xca4)]['setSvBattlerSprite']=function(_0x53032f){const _0x423eb4=_0x5c342f;if(!this[_0x423eb4(0x475)]){if(_0x423eb4(0x4a8)!=='pEFch')this[_0x423eb4(0x475)]=new Sprite_SvEnemy(_0x53032f),this['attachSpritesToDistortionSprite']();else{const _0xb88468=this['_mainSprite'][_0x423eb4(0x812)];if(!_0xb88468)return;const _0x10a8d7=_0xb88468[_0x423eb4(0x6e4)];let _0x3361fc=_0xb88468['height'];if(this[_0x423eb4(0xca5)][_0x423eb4(0x541)]()){if(this[_0x423eb4(0xb27)])_0x3361fc=_0x89b39c['max'](0x0,this[_0x423eb4(0xb27)][_0x423eb4(0x880)]-0x4);}this[_0x423eb4(0xd17)][_0x423eb4(0x79b)](0x0,0x0,_0x10a8d7,_0x3361fc),this[_0x423eb4(0x79b)](0x0,0x0,_0x10a8d7,_0x3361fc);}}this['_svBattlerSprite']['setBattler'](_0x53032f);},Sprite_Enemy[_0x5c342f(0xca4)]['hasSvBattler']=function(){const _0x172871=_0x5c342f;return this[_0x172871(0xa4e)]&&this[_0x172871(0xa4e)][_0x172871(0x1ab)]();},Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0x47f)]=function(){const _0x37613a=_0x5c342f;if(this[_0x37613a(0x1ab)]())return this['_enemy'][_0x37613a(0x47f)]();else{if('HMwrP'!==_0x37613a(0x694))this['drawTextEx'](_0x287217,_0x137901['x'],_0x1693e5['y'],_0x77f08e);else return!![];}},Sprite_Enemy[_0x5c342f(0xca4)]['refreshMotion']=function(){const _0x2b6f03=_0x5c342f;this['hasSvBattler']()&&(_0x2b6f03(0x903)==='eoRvn'?this[_0x2b6f03(0x475)][_0x2b6f03(0xc59)]():this[_0x2b6f03(0x430)](_0x2b6f03(0xc0c)));},Sprite_Enemy[_0x5c342f(0xca4)]['forceMotion']=function(_0x5bdf4e){const _0x37d92f=_0x5c342f;if(this['hasSvBattler']())this[_0x37d92f(0x475)][_0x37d92f(0x68a)](_0x5bdf4e);},Sprite_Enemy[_0x5c342f(0xca4)][_0x5c342f(0xe3e)]=function(_0x39e04d){const _0xded607=_0x5c342f;if(this[_0xded607(0x1ab)]())this['_svBattlerSprite'][_0xded607(0xe3e)](_0x39e04d);},Sprite_Enemy['prototype'][_0x5c342f(0x632)]=function(){const _0x5dd99c=_0x5c342f,_0x540692=VisuMZ[_0x5dd99c(0xca2)][_0x5dd99c(0xc90)][_0x5dd99c(0xb55)],_0x40f2bc=_0x540692[_0x5dd99c(0x2f1)],_0xca08e9=_0x540692['StepDistanceY'],_0x53f881=_0x540692['StepDuration'];this[_0x5dd99c(0x217)](_0x40f2bc,_0xca08e9,_0x53f881);};function Sprite_SvEnemy(){const _0x405432=_0x5c342f;this[_0x405432(0xd5a)](...arguments);}Sprite_SvEnemy[_0x5c342f(0xca4)]=Object[_0x5c342f(0xccb)](Sprite_Actor[_0x5c342f(0xca4)]),Sprite_SvEnemy[_0x5c342f(0xca4)]['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x5c342f(0xca4)][_0x5c342f(0xd5a)]=function(_0x5665dc){const _0x36f487=_0x5c342f;Sprite_Actor[_0x36f487(0xca4)][_0x36f487(0xd5a)][_0x36f487(0xded)](this,_0x5665dc),this[_0x36f487(0x339)]['x']=-0x1,this[_0x36f487(0x604)][_0x36f487(0x339)]['x']=-0x1;},Sprite_SvEnemy['prototype']['createShadowSprite']=function(){},Sprite_SvEnemy[_0x5c342f(0xca4)][_0x5c342f(0x23a)]=function(){},Sprite_SvEnemy[_0x5c342f(0xca4)][_0x5c342f(0x1f5)]=function(_0x4bedc3){},Sprite_SvEnemy[_0x5c342f(0xca4)][_0x5c342f(0x5c4)]=function(){},Sprite_SvEnemy[_0x5c342f(0xca4)][_0x5c342f(0x2c0)]=function(){},Sprite_SvEnemy['prototype'][_0x5c342f(0x69d)]=function(){const _0x27a70b=_0x5c342f;this[_0x27a70b(0x604)][_0x27a70b(0x747)]=![];},Sprite_SvEnemy[_0x5c342f(0xca4)][_0x5c342f(0xa32)]=function(){const _0x500b63=_0x5c342f;Sprite_Battler[_0x500b63(0xca4)][_0x500b63(0xa32)]['call'](this);const _0x2b0a78=this[_0x500b63(0x465)][_0x500b63(0x1df)]();this[_0x500b63(0x8b4)]!==_0x2b0a78&&(this['_battlerName']=_0x2b0a78,this[_0x500b63(0xd17)][_0x500b63(0x812)]=ImageManager[_0x500b63(0x27b)](_0x2b0a78)),this['_mainSprite']&&this[_0x500b63(0xd17)][_0x500b63(0x812)]&&this[_0x500b63(0xca5)]&&(this[_0x500b63(0xd17)][_0x500b63(0x812)][_0x500b63(0xd09)]!==this[_0x500b63(0xca5)][_0x500b63(0xc46)]()&&(this[_0x500b63(0xd17)]['bitmap'][_0x500b63(0xd09)]=this['_battler'][_0x500b63(0xc46)]()));},Sprite_SvEnemy[_0x5c342f(0xca4)][_0x5c342f(0x62f)]=function(){},Sprite_SvEnemy['prototype']['startMove']=function(_0x5d169e,_0x43d721,_0x598611){const _0x5c51ce=_0x5c342f;if(this[_0x5c51ce(0x690)])this[_0x5c51ce(0x690)][_0x5c51ce(0x217)](_0x5d169e,_0x43d721,_0x598611);},Sprite_SvEnemy[_0x5c342f(0xca4)][_0x5c342f(0xc59)]=function(){const _0x37356b=_0x5c342f,_0x319f63=this[_0x37356b(0x465)];if(_0x319f63){if(_0x37356b(0x91f)!==_0x37356b(0x6c1)){const _0xaf76c2=_0x319f63[_0x37356b(0xd3b)]();if(_0x319f63[_0x37356b(0xa83)]()||_0x319f63['isActing']())this[_0x37356b(0x40a)](_0x37356b(0xa6f));else{if(_0xaf76c2===0x3)this[_0x37356b(0x40a)](_0x37356b(0x59e));else{if(_0xaf76c2===0x2){if(_0x37356b(0x53b)!==_0x37356b(0x53b))return _0x4d91a2[_0x37356b(0xca2)][_0x37356b(0x6fd)][_0x37356b(0xded)](this);else this[_0x37356b(0x40a)](_0x37356b(0x6a3));}else{if(_0x319f63[_0x37356b(0x740)]()){if(_0x37356b(0x7bd)!==_0x37356b(0x7bd)){const _0x17e5f0=this[_0x37356b(0x795)](_0xd9496a);if(_0x17e5f0===_0x37356b(0xd2c))this[_0x37356b(0x2ed)](_0x336e2b);else _0x17e5f0==='icon'?this[_0x37356b(0xc45)](_0x15ec3c):_0x576de6[_0x37356b(0xca4)][_0x37356b(0x686)]['call'](this,_0x4aa279);this[_0x37356b(0x4e1)](_0x572c4c);}else this[_0x37356b(0x40a)](_0x37356b(0x1cb));}else{if(_0x319f63['isGuard']()||_0x319f63['isGuardWaiting']())_0x37356b(0xca7)===_0x37356b(0xa46)?(_0x2c4d3e=_0x4fd5b0(_0x2fc85b['$1']),_0x1a5853--):this[_0x37356b(0x40a)]('guard');else{if(_0xaf76c2===0x1)this[_0x37356b(0x40a)]('abnormal');else{if(_0x319f63[_0x37356b(0xb28)]())this['startMotion']('dying');else{if(_0x319f63['isUndecided']()){if(_0x37356b(0x807)!==_0x37356b(0x807))return _0x538637[_0x37356b(0xca2)]['Settings'][_0x37356b(0x7e4)][_0x37356b(0xd83)];else this['startMotion'](_0x37356b(0xa6f));}else this['startMotion'](_0x319f63[_0x37356b(0x5d5)]()[_0x37356b(0x2be)]||_0x37356b(0xa6f));}}}}}}}}else _0x5d582c[_0x37356b(0xca4)][_0x37356b(0xa41)][_0x37356b(0xded)](this),this[_0x37356b(0xc0c)]=0x0,this[_0x37356b(0xe20)]=null,this[_0x37356b(0xaab)]['x']=0.5,this[_0x37356b(0xaab)]['y']=0x0;}},Sprite_SvEnemy[_0x5c342f(0xca4)][_0x5c342f(0x8ba)]=function(){const _0x3f0c1b=_0x5c342f;return this['parent']?this['parent']['_offsetX']===0x0&&this[_0x3f0c1b(0x690)][_0x3f0c1b(0xde5)]===0x0:!![];},Sprite_SvEnemy[_0x5c342f(0xca4)]['updateFlip']=function(){},VisuMZ['BattleCore'][_0x5c342f(0x6dd)]=Sprite_Animation['prototype'][_0x5c342f(0xc53)],Sprite_Animation[_0x5c342f(0xca4)][_0x5c342f(0xc53)]=function(_0x14c505){const _0x12706d=_0x5c342f;if(_0x14c505[_0x12706d(0x759)]){if(_0x12706d(0x30d)!==_0x12706d(0x30d))this[_0x12706d(0xbd5)]()&&_0x1b044c[_0x12706d(0xca2)][_0x12706d(0xc20)][_0x12706d(0xded)](this,_0x352500,_0x27ef83,_0x27c70b);else return this[_0x12706d(0x6ff)](_0x14c505);}else return VisuMZ[_0x12706d(0xca2)]['Sprite_Animation_targetSpritePosition']['call'](this,_0x14c505);},Sprite_Animation[_0x5c342f(0xca4)][_0x5c342f(0x6ff)]=function(_0x21d9bb){const _0x37e2b3=_0x5c342f;let _0x5a1ee2=_0x21d9bb['x'],_0x1a2b79=_0x21d9bb['y'],_0x4400b2=_0x21d9bb['height'],_0x10fa1d=_0x21d9bb[_0x37e2b3(0x759)][_0x37e2b3(0x339)]['y'];_0x21d9bb['x']=_0x21d9bb[_0x37e2b3(0xda2)]+_0x21d9bb[_0x37e2b3(0x635)](),_0x21d9bb['y']=_0x21d9bb['_baseY']+_0x21d9bb[_0x37e2b3(0x249)](),_0x21d9bb['height']*=_0x10fa1d;let _0x3a5971=VisuMZ[_0x37e2b3(0xca2)][_0x37e2b3(0x6dd)][_0x37e2b3(0xded)](this,_0x21d9bb);return _0x21d9bb['x']=_0x5a1ee2,_0x21d9bb['y']=_0x1a2b79,_0x21d9bb['height']=_0x4400b2,_0x3a5971;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x35a)]=Sprite_AnimationMV[_0x5c342f(0xca4)][_0x5c342f(0xb40)],Sprite_AnimationMV[_0x5c342f(0xca4)][_0x5c342f(0xb40)]=function(){const _0x3be479=_0x5c342f;VisuMZ[_0x3be479(0xca2)][_0x3be479(0x35a)]['call'](this);if(!SceneManager['isSceneBattle']())return;if(this[_0x3be479(0x2b2)]['position']===0x3){if('Sisbr'!==_0x3be479(0x300))this['x']=Math[_0x3be479(0x5c1)](Graphics[_0x3be479(0xba3)]/0x2),this['y']=Math['round'](Graphics[_0x3be479(0x2f9)]/0x2);else{_0x2f114e['BattleCore'][_0x3be479(0x865)]['call'](this);if(!_0x1af850['isTpb']())_0x40712b[_0x3be479(0x4f5)]=null;}}else{if(this[_0x3be479(0x766)])return;}},Sprite_Damage['prototype'][_0x5c342f(0xb22)]=function(_0x245877){const _0xb25121=_0x5c342f,_0x9545be=_0x245877[_0xb25121(0x1d0)]()||_0x245877[_0xb25121(0xcb2)]();if(_0x9545be[_0xb25121(0x845)]||_0x9545be[_0xb25121(0xdfe)])_0xb25121(0xdce)!==_0xb25121(0x49d)?(this[_0xb25121(0x381)]=0x0,this[_0xb25121(0x4fd)]()):_0x2e4038[_0xb25121(0x580)](_0x495295);else{if(_0x9545be[_0xb25121(0xca0)])this[_0xb25121(0x381)]=_0x9545be[_0xb25121(0x81a)]>=0x0?0x0:0x1,this[_0xb25121(0x914)](_0x9545be[_0xb25121(0x81a)]);else _0x245877[_0xb25121(0x920)]()&&_0x9545be[_0xb25121(0xce5)]!==0x0&&(this[_0xb25121(0x381)]=_0x9545be[_0xb25121(0xce5)]>=0x0?0x2:0x3,this['createDigits'](_0x9545be[_0xb25121(0xce5)]));}_0x9545be['critical']&&this[_0xb25121(0x34e)]();},Sprite_Damage[_0x5c342f(0xca4)]['setup']=function(_0x27c45c){},Sprite_Damage[_0x5c342f(0xca4)][_0x5c342f(0x914)]=function(_0x46aba1){const _0x6a4dc7=_0x5c342f;let _0x152610=this[_0x6a4dc7(0x9d7)](_0x46aba1);const _0x21447a=this['fontSize'](),_0xbcf474=Math[_0x6a4dc7(0x9b3)](_0x21447a*0.75);for(let _0x2e5c0e=0x0;_0x2e5c0e<_0x152610['length'];_0x2e5c0e++){if(_0x6a4dc7(0x2d0)==='hsQyc'){const _0x43c2d5=this[_0x6a4dc7(0x8b1)](_0xbcf474,_0x21447a);_0x43c2d5[_0x6a4dc7(0x812)][_0x6a4dc7(0x524)](_0x152610[_0x2e5c0e],0x0,0x0,_0xbcf474,_0x21447a,_0x6a4dc7(0x83a)),_0x43c2d5['x']=(_0x2e5c0e-(_0x152610[_0x6a4dc7(0xc5c)]-0x1)/0x2)*_0xbcf474,_0x43c2d5['dy']=-_0x2e5c0e;}else{if(_0xd8854[_0x6a4dc7(0xca2)][_0x6a4dc7(0xc90)][_0x6a4dc7(0x831)][_0x6a4dc7(0xbf5)])return _0x2f44fe[_0x6a4dc7(0xca2)][_0x6a4dc7(0xc90)][_0x6a4dc7(0x831)]['BattleLogRectJS'][_0x6a4dc7(0xded)](this);return _0x3a95f8[_0x6a4dc7(0xca2)][_0x6a4dc7(0x805)]['call'](this);}}},Sprite_Damage[_0x5c342f(0xca4)][_0x5c342f(0x9d7)]=function(_0x1c18d9){const _0x209ce0=_0x5c342f;let _0x2953f2=Math[_0x209ce0(0xd81)](_0x1c18d9)[_0x209ce0(0x291)]();this[_0x209ce0(0xde6)]()&&(_0x2953f2=VisuMZ[_0x209ce0(0xd14)](_0x2953f2));const _0x5cc3ec=VisuMZ[_0x209ce0(0xca2)]['Settings'][_0x209ce0(0x603)];let _0x2897b0='',_0x5953aa='';switch(this[_0x209ce0(0x381)]){case 0x0:_0x2897b0=_0x5cc3ec[_0x209ce0(0x739)]||'-%1',_0x5953aa=TextManager['hp'];if(_0x1c18d9===0x0)_0x2897b0='%1';break;case 0x1:_0x2897b0=_0x5cc3ec['hpHealingFmt']||_0x209ce0(0x8ed),_0x5953aa=TextManager['hp'];break;case 0x2:_0x2897b0=_0x5cc3ec[_0x209ce0(0x74f)]||'-%1\x20MP',_0x5953aa=TextManager['mp'];break;case 0x3:_0x2897b0=_0x5cc3ec[_0x209ce0(0x55d)]||_0x209ce0(0xb43),_0x5953aa=TextManager['mp'];break;}return _0x2897b0[_0x209ce0(0x266)](_0x2953f2,_0x5953aa)['trim']();},Sprite_Damage[_0x5c342f(0xca4)][_0x5c342f(0xde6)]=function(){const _0x142b37=_0x5c342f;return Imported[_0x142b37(0xad9)]?VisuMZ[_0x142b37(0x912)]['Settings']['QoL'][_0x142b37(0x209)]:![];},Sprite_Damage[_0x5c342f(0xca4)][_0x5c342f(0x34e)]=function(){const _0x4b16bb=_0x5c342f,_0x26f7a2=VisuMZ[_0x4b16bb(0xca2)][_0x4b16bb(0xc90)][_0x4b16bb(0x603)];this[_0x4b16bb(0x224)]=_0x26f7a2[_0x4b16bb(0x47c)][_0x4b16bb(0x645)](0x0),this[_0x4b16bb(0x64d)]=_0x26f7a2[_0x4b16bb(0x425)];},Sprite_Damage[_0x5c342f(0xca4)][_0x5c342f(0x84b)]=function(_0x2810ac,_0xc6ceff){const _0x34fc87=_0x5c342f;this[_0x34fc87(0x224)]=_0xc6ceff[_0x34fc87(0x519)]||[0x0,0x0,0x0,0x0],this[_0x34fc87(0x224)]=JsonEx['makeDeepCopy'](this[_0x34fc87(0x224)]),this[_0x34fc87(0x64d)]=_0xc6ceff[_0x34fc87(0xd28)]||0x0;const _0x1f1071=this[_0x34fc87(0xa91)](),_0x4c2b99=Math['floor'](_0x1f1071*0x1e),_0x535b31=this['createChildSprite'](_0x4c2b99,_0x1f1071);_0x535b31['bitmap']['textColor']=ColorManager[_0x34fc87(0x915)](_0xc6ceff[_0x34fc87(0xcba)]),_0x535b31[_0x34fc87(0x812)][_0x34fc87(0x524)](_0x2810ac,0x0,0x0,_0x4c2b99,_0x1f1071,'center'),_0x535b31['dy']=0x0;},Sprite_Damage[_0x5c342f(0xca4)]['setupIconTextPopup']=function(_0x4f9162,_0x3b2f73,_0x44fd35){const _0x5b8557=_0x5c342f,_0x5833f1=Math['max'](this[_0x5b8557(0xa91)](),ImageManager[_0x5b8557(0xcdf)]),_0x26b4ef=Math['floor'](_0x5833f1*0x1e),_0x3b18a0=this['createChildSprite'](_0x26b4ef,_0x5833f1),_0x4f417f=ImageManager[_0x5b8557(0x6f8)]/0x2,_0x3e9625=_0x3b18a0[_0x5b8557(0x812)]['measureTextWidth'](_0x3b2f73+'\x20');_0x3b18a0['bitmap'][_0x5b8557(0xcba)]=ColorManager['getColor'](_0x44fd35[_0x5b8557(0xcba)]),_0x3b18a0[_0x5b8557(0x812)][_0x5b8557(0x524)](_0x3b2f73,_0x4f417f,0x0,_0x26b4ef-_0x4f417f,_0x5833f1,_0x5b8557(0x83a));const _0x460692=Math[_0x5b8557(0x5c1)]((_0x5833f1-ImageManager[_0x5b8557(0xcdf)])/0x2),_0x4c4d5c=_0x26b4ef/0x2-ImageManager[_0x5b8557(0x6f8)]-_0x3e9625/0x2+_0x4f417f/0x2,_0x462e93=ImageManager[_0x5b8557(0x498)]('IconSet'),_0x2a7436=ImageManager['iconWidth'],_0x14eb55=ImageManager['iconHeight'],_0x33b730=_0x4f9162%0x10*_0x2a7436,_0x491264=Math[_0x5b8557(0x9b3)](_0x4f9162/0x10)*_0x14eb55;_0x3b18a0[_0x5b8557(0x812)][_0x5b8557(0x250)](_0x462e93,_0x33b730,_0x491264,_0x2a7436,_0x14eb55,_0x4c4d5c,_0x460692),this[_0x5b8557(0x224)]=_0x44fd35['flashColor']||[0x0,0x0,0x0,0x0],this[_0x5b8557(0x224)]=JsonEx[_0x5b8557(0x388)](this[_0x5b8557(0x224)]),this['_flashDuration']=_0x44fd35[_0x5b8557(0xd28)]||0x0,_0x3b18a0['dy']=0x0;},VisuMZ['BattleCore'][_0x5c342f(0x7ce)]=Sprite_Damage[_0x5c342f(0xca4)][_0x5c342f(0x8b1)],Sprite_Damage[_0x5c342f(0xca4)][_0x5c342f(0x8b1)]=function(_0x5dae4d,_0x33be46){const _0x1499fb=_0x5c342f;return _0x33be46=Math['round'](_0x33be46*1.2),VisuMZ[_0x1499fb(0xca2)][_0x1499fb(0x7ce)][_0x1499fb(0xded)](this,_0x5dae4d,_0x33be46);},VisuMZ['BattleCore'][_0x5c342f(0x73a)]=Sprite_StateIcon[_0x5c342f(0xca4)][_0x5c342f(0x5f8)],Sprite_StateIcon[_0x5c342f(0xca4)]['updateFrame']=function(){const _0x28a27b=_0x5c342f;VisuMZ[_0x28a27b(0xca2)][_0x28a27b(0x73a)]['call'](this),this[_0x28a27b(0xc0c)]=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x6c6)]=Sprite_Weapon[_0x5c342f(0xca4)]['loadBitmap'],Sprite_Weapon[_0x5c342f(0xca4)][_0x5c342f(0x45d)]=function(){const _0x5b8d38=_0x5c342f;VisuMZ[_0x5b8d38(0xca2)][_0x5b8d38(0x6c6)][_0x5b8d38(0xded)](this);if(this['bitmap']){if(_0x5b8d38(0x93c)!=='WxCZk'){let _0x21c981=0x0;return _0x21c981;}else this['bitmap'][_0x5b8d38(0xd09)]=VisuMZ[_0x5b8d38(0xca2)][_0x5b8d38(0xc90)][_0x5b8d38(0xe29)][_0x5b8d38(0x6af)];}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x2dc)]=Sprite_Gauge[_0x5c342f(0xca4)][_0x5c342f(0xdd3)],Sprite_Gauge[_0x5c342f(0xca4)][_0x5c342f(0xdd3)]=function(){const _0x177a7f=_0x5c342f;if(this[_0x177a7f(0xd18)]!==_0x177a7f(0x6fc)){if(_0x177a7f(0xbff)===_0x177a7f(0xbff))return VisuMZ['BattleCore']['Settings'][_0x177a7f(0x82c)][_0x177a7f(0x8a7)]??0x14;else this[_0x177a7f(0x2a3)][_0x177a7f(0x393)](new _0x54e57a());}else return VisuMZ['BattleCore'][_0x177a7f(0x2dc)][_0x177a7f(0xded)](this);};function Sprite_HpGauge(){const _0x3f6f17=_0x5c342f;this[_0x3f6f17(0xd5a)](...arguments);}Sprite_HpGauge['prototype']=Object[_0x5c342f(0xccb)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x5c342f(0xca4)][_0x5c342f(0x43e)]=Sprite_HpGauge,Sprite_HpGauge[_0x5c342f(0xca4)][_0x5c342f(0xd5a)]=function(){const _0x5988d1=_0x5c342f;Sprite_Gauge[_0x5988d1(0xca4)][_0x5988d1(0xd5a)]['call'](this);},Sprite_HpGauge[_0x5c342f(0xca4)][_0x5c342f(0xaa0)]=function(){return 0x0;},Sprite_HpGauge[_0x5c342f(0xca4)]['redraw']=function(){const _0x1046e5=_0x5c342f;this[_0x1046e5(0x812)][_0x1046e5(0xa52)]();const _0x110599=this[_0x1046e5(0xc1d)]();!isNaN(_0x110599)&&this['drawGauge']();};function Sprite_EnemyName(){const _0x3f31fd=_0x5c342f;this[_0x3f31fd(0xd5a)](...arguments);}Sprite_EnemyName[_0x5c342f(0xca4)]=Object['create'](Sprite_Name[_0x5c342f(0xca4)]),Sprite_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0x43e)]=Sprite_EnemyName,Sprite_EnemyName['prototype'][_0x5c342f(0xd5a)]=function(){const _0x5f4806=_0x5c342f;Sprite_Name[_0x5f4806(0xca4)]['initialize']['call'](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0xa41)]=function(){const _0x4add6c=_0x5c342f;Sprite_Name['prototype'][_0x4add6c(0xa41)][_0x4add6c(0xded)](this),this['opacity']=0x0,this['_linkedSprite']=null,this[_0x4add6c(0xaab)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName['prototype'][_0x5c342f(0x171)]=function(){const _0x13ebb8=_0x5c342f;VisuMZ[_0x13ebb8(0xca2)]['Settings'][_0x13ebb8(0x4f1)]['NameAttachStateIcon']&&(_0x13ebb8(0x471)!==_0x13ebb8(0x471)?_0x3b6ed5[_0x13ebb8(0xca4)][_0x13ebb8(0x50d)][_0x13ebb8(0xded)](this):(this[_0x13ebb8(0x216)]=new Sprite_StateIcon(),this[_0x13ebb8(0x393)](this[_0x13ebb8(0x216)])));},Sprite_EnemyName['prototype'][_0x5c342f(0x3e5)]=function(){const _0x45d1f3=_0x5c342f;return Graphics[_0x45d1f3(0xba3)];},Sprite_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0x3cb)]=function(){const _0x369a1f=_0x5c342f;return this[_0x369a1f(0x18e)]=this[_0x369a1f(0x18e)]||Window_Base[_0x369a1f(0xca4)]['lineHeight']()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x5c342f(0xca4)]['fontSize']=function(){const _0x1ba7ad=_0x5c342f;return VisuMZ[_0x1ba7ad(0xca2)][_0x1ba7ad(0xc90)][_0x1ba7ad(0x4f1)][_0x1ba7ad(0x2b4)]||$gameSystem['mainFontSize']();},Sprite_EnemyName['prototype']['linkSprite']=function(_0x40b5d0){const _0x3ef0bc=_0x5c342f;this[_0x3ef0bc(0xe20)]=_0x40b5d0;},Sprite_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0x2a5)]=function(){const _0x4e9bf3=_0x5c342f;Sprite_Name['prototype'][_0x4e9bf3(0x2a5)][_0x4e9bf3(0xded)](this),this[_0x4e9bf3(0x354)](),this[_0x4e9bf3(0xb40)](),this['updateAttachedSprites'](),this[_0x4e9bf3(0xbe7)]();},Sprite_EnemyName['prototype'][_0x5c342f(0x6bf)]=function(){const _0x35a72c=_0x5c342f;this[_0x35a72c(0x78d)]=undefined;const _0x18c985=this['name'](),_0x3d5b9a=this['bitmapWidth'](),_0x502a38=Window_Base['prototype'][_0x35a72c(0x8f4)]();this[_0x35a72c(0xdac)](),this[_0x35a72c(0x812)][_0x35a72c(0xa52)](),this[_0x35a72c(0x812)][_0x35a72c(0x524)](_0x18c985,0x0,0x0,_0x3d5b9a,_0x502a38,_0x35a72c(0x83a));},Sprite_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0x354)]=function(){const _0x30109e=_0x5c342f;if(!this[_0x30109e(0xe20)])return;this[_0x30109e(0xca5)]!==this[_0x30109e(0xe20)][_0x30109e(0xca5)]&&this[_0x30109e(0x5bd)](this[_0x30109e(0xe20)][_0x30109e(0xca5)]);},Sprite_EnemyName[_0x5c342f(0xca4)]['updatePosition']=function(){const _0x5c89f5=_0x5c342f;if(!this['_linkedSprite'])return;this[_0x5c89f5(0x18e)]=this[_0x5c89f5(0x18e)]||Window_Base[_0x5c89f5(0xca4)]['lineHeight'](),this['x']=Math[_0x5c89f5(0x5c1)](this[_0x5c89f5(0xe20)][_0x5c89f5(0xda2)]),this['y']=Math[_0x5c89f5(0x5c1)](this[_0x5c89f5(0xe20)][_0x5c89f5(0x256)]-this[_0x5c89f5(0x18e)]*0.5);const _0x25fa85=VisuMZ[_0x5c89f5(0xca2)][_0x5c89f5(0xc90)]['Enemy'];this['x']+=Math[_0x5c89f5(0x5c1)](_0x25fa85[_0x5c89f5(0xd2f)]||0x0),this['y']+=Math[_0x5c89f5(0x5c1)](_0x25fa85[_0x5c89f5(0x642)]||0x0);},Sprite_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0xb05)]=function(){const _0x867b8=_0x5c342f;this[_0x867b8(0x89b)]();},Sprite_EnemyName[_0x5c342f(0xca4)]['updateStateIconSprite']=function(){const _0x37a9f6=_0x5c342f;if(!this[_0x37a9f6(0x216)])return;this[_0x37a9f6(0xca5)]!==this[_0x37a9f6(0x216)][_0x37a9f6(0xca5)]&&this['_stateIconSprite'][_0x37a9f6(0x5bd)](this['_battler']);const _0x51181d=this[_0x37a9f6(0x2a4)]();this[_0x37a9f6(0x18e)]=this[_0x37a9f6(0x18e)]||Window_Base[_0x37a9f6(0xca4)][_0x37a9f6(0x8f4)](),this[_0x37a9f6(0x216)]['x']=Math[_0x37a9f6(0x5c1)]((_0x51181d+ImageManager[_0x37a9f6(0x6f8)])/0x2)+0x8,this['_stateIconSprite']['y']=this[_0x37a9f6(0x18e)]/0x2;const _0x24d830=VisuMZ['BattleCore']['Settings']['Enemy'];this[_0x37a9f6(0x216)]['x']+=_0x24d830[_0x37a9f6(0x55c)]||0x0,this[_0x37a9f6(0x216)]['y']+=_0x24d830['AttachStateOffsetY']||0x0;},Sprite_EnemyName['prototype'][_0x5c342f(0xbe7)]=function(){const _0x1aea5a=_0x5c342f,_0x16d3e8=this[_0x1aea5a(0x89d)]();if(_0x16d3e8&&this[_0x1aea5a(0xc0c)]<0xff)this[_0x1aea5a(0xc0c)]+=0x10;else!_0x16d3e8&&this[_0x1aea5a(0xc0c)]>0x0&&(_0x1aea5a(0xc69)===_0x1aea5a(0xacc)?(this['damageContainer']()[_0x1aea5a(0x72d)](_0x4e8dac),this[_0x1aea5a(0x546)][_0x1aea5a(0x5e1)](_0x34aa0b),_0x374d07[_0x1aea5a(0xa78)]()):this[_0x1aea5a(0xc0c)]-=0x10);},Sprite_EnemyName[_0x5c342f(0xca4)]['visibilityState']=function(){const _0x30dc38=_0x5c342f;if(this['isAlwaysHidden']())return![];else{if(!this[_0x30dc38(0xca5)])return![];else{if(this[_0x30dc38(0xca5)][_0x30dc38(0x541)]())return![];else{if(!this[_0x30dc38(0xca5)][_0x30dc38(0xba9)]())return![];else{if(this[_0x30dc38(0x4c2)]())return!![];else{if(this['isAlwaysVisible']())return!![];else{if(this['isIncludedInEnemyWindow']()){if(_0x30dc38(0xaeb)===_0x30dc38(0x3de))this[_0x30dc38(0x1b9)]();else return!![];}else{if(this[_0x30dc38(0xc0c)]>0x0)return![];}}}}}}}},Sprite_EnemyName['prototype'][_0x5c342f(0x4aa)]=function(){const _0x543320=_0x5c342f;return VisuMZ[_0x543320(0xca2)][_0x543320(0xc90)][_0x543320(0x4f1)][_0x543320(0xa5d)];},Sprite_EnemyName['prototype']['compatibilityVisible']=function(){return![];},Sprite_EnemyName['prototype'][_0x5c342f(0x5e6)]=function(){const _0x50b8df=_0x5c342f;return VisuMZ['BattleCore'][_0x50b8df(0xc90)]['Enemy'][_0x50b8df(0xa36)];},Sprite_EnemyName[_0x5c342f(0xca4)]['isIncludedInEnemyWindow']=function(){const _0x9edc8b=_0x5c342f;if(VisuMZ[_0x9edc8b(0xca2)][_0x9edc8b(0xc90)][_0x9edc8b(0x4f1)][_0x9edc8b(0xb12)])return this[_0x9edc8b(0xca5)][_0x9edc8b(0x89c)]();else{if(_0x9edc8b(0x38b)!==_0x9edc8b(0x823))return SceneManager[_0x9edc8b(0x201)][_0x9edc8b(0x995)]&&SceneManager[_0x9edc8b(0x201)][_0x9edc8b(0x995)][_0x9edc8b(0x344)]&&SceneManager[_0x9edc8b(0x201)][_0x9edc8b(0x995)][_0x9edc8b(0x96a)]['includes'](this['_battler']);else _0x237f78+=_0x34f44c[_0x9edc8b(0x47b)]()?-_0x50235a:_0x528ad3,_0x5b9635+=_0x395ba4['isActor']()?-_0x2fa396:_0x4e99ea;}},Sprite_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0x2a4)]=function(){const _0x1f4d5f=_0x5c342f;if(!this['_battler'])return 0x0;if(this['_cacheTextWidth'])return this[_0x1f4d5f(0x78d)];const _0x538b4d=this['name']();return this[_0x1f4d5f(0xdac)](),this['_cacheTextWidth']=this['bitmap'][_0x1f4d5f(0xd3e)](_0x538b4d)||0x1,this[_0x1f4d5f(0x78d)];},VisuMZ[_0x5c342f(0xca2)]['Sprite_Battleback_adjustPosition']=Sprite_Battleback[_0x5c342f(0xca4)][_0x5c342f(0xe04)],Sprite_Battleback[_0x5c342f(0xca4)][_0x5c342f(0xe04)]=function(){const _0x2e4c08=_0x5c342f,_0x5ba055=VisuMZ[_0x2e4c08(0xca2)][_0x2e4c08(0xc90)][_0x2e4c08(0x481)];if(!_0x5ba055){if('grpGz'!==_0x2e4c08(0x173))return VisuMZ['BattleCore'][_0x2e4c08(0xc99)][_0x2e4c08(0xded)](this);else _0x1b8086[_0x2e4c08(0x812)]=new _0x42fb2c(this[_0x2e4c08(0x6e4)]||0x1,this['height']||0x1);}const _0x2f0704=String(_0x5ba055[_0x2e4c08(0x337)])||'MZ';switch(_0x2f0704){case'MZ':VisuMZ[_0x2e4c08(0xca2)]['Sprite_Battleback_adjustPosition'][_0x2e4c08(0xded)](this);break;case _0x2e4c08(0x2af):this[_0x2e4c08(0x624)]();break;case'ScaleToFit':this[_0x2e4c08(0xb61)]();break;case'ScaleDown':this[_0x2e4c08(0x7c9)]();break;case _0x2e4c08(0x7c3):this['adjustPosition_ScaleUp']();break;}},Sprite_Battleback[_0x5c342f(0xca4)][_0x5c342f(0x624)]=function(){const _0x590636=_0x5c342f,_0x436624=VisuMZ[_0x590636(0xca2)][_0x590636(0xc90)]['BattlebackScale'];if(_0x436624&&_0x436624[_0x590636(0x707)]){if(_0x590636(0x29c)===_0x590636(0x3e1))return;else return _0x436624['jsOneForOne'][_0x590636(0xded)](this);}this['width']=Graphics['width'],this['height']=Graphics[_0x590636(0x880)];const _0x5f844b=0x1;this[_0x590636(0x339)]['x']=_0x5f844b,this[_0x590636(0x339)]['y']=_0x5f844b,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x5c342f(0xb61)]=function(){const _0x13ef22=_0x5c342f,_0x2871cf=VisuMZ[_0x13ef22(0xca2)][_0x13ef22(0xc90)]['BattlebackScale'];if(_0x2871cf&&_0x2871cf['jsScaleToFit'])return _0x2871cf[_0x13ef22(0x63e)][_0x13ef22(0xded)](this);this['width']=Graphics['width'],this['height']=Graphics[_0x13ef22(0x880)];const _0x148705=this[_0x13ef22(0x6e4)]/this[_0x13ef22(0x812)][_0x13ef22(0x6e4)],_0x18e80b=this['height']/this[_0x13ef22(0x812)]['height'],_0x520b24=Math[_0x13ef22(0xaee)](_0x148705,_0x18e80b);this[_0x13ef22(0x339)]['x']=_0x520b24,this[_0x13ef22(0x339)]['y']=_0x520b24,this['x']=(Graphics[_0x13ef22(0x6e4)]-this[_0x13ef22(0x6e4)])/0x2,this['y']=Graphics[_0x13ef22(0x880)]-this['height'];},Sprite_Battleback[_0x5c342f(0xca4)][_0x5c342f(0x7c9)]=function(){const _0x1e932a=_0x5c342f,_0x2bf18c=VisuMZ[_0x1e932a(0xca2)][_0x1e932a(0xc90)][_0x1e932a(0x481)];if(_0x2bf18c&&_0x2bf18c['jsScaleDown'])return _0x2bf18c[_0x1e932a(0xd49)][_0x1e932a(0xded)](this);this[_0x1e932a(0x6e4)]=Graphics[_0x1e932a(0x6e4)],this[_0x1e932a(0x880)]=Graphics[_0x1e932a(0x880)];const _0xe8fda=Math['min'](0x1,this[_0x1e932a(0x6e4)]/this[_0x1e932a(0x812)][_0x1e932a(0x6e4)]),_0x556ce5=Math[_0x1e932a(0x7b9)](0x1,this[_0x1e932a(0x880)]/this[_0x1e932a(0x812)]['height']),_0xfb73ea=Math[_0x1e932a(0xaee)](_0xe8fda,_0x556ce5);this[_0x1e932a(0x339)]['x']=_0xfb73ea,this[_0x1e932a(0x339)]['y']=_0xfb73ea,this['x']=(Graphics[_0x1e932a(0x6e4)]-this[_0x1e932a(0x6e4)])/0x2,this['y']=Graphics[_0x1e932a(0x880)]-this[_0x1e932a(0x880)];},Sprite_Battleback[_0x5c342f(0xca4)]['adjustPosition_ScaleUp']=function(){const _0x3deeca=_0x5c342f,_0x332a64=VisuMZ['BattleCore'][_0x3deeca(0xc90)][_0x3deeca(0x481)];if(_0x332a64&&_0x332a64[_0x3deeca(0xdb7)]){if(_0x3deeca(0x377)!==_0x3deeca(0x377))_0x17df51['prototype'][_0x3deeca(0xd04)][_0x3deeca(0xded)](this),this['contents'][_0x3deeca(0xa91)]=_0x186b79[_0x3deeca(0xca2)][_0x3deeca(0xc90)]['Enemy']['NameFontSize'];else return _0x332a64['jsScaleUp']['call'](this);}this[_0x3deeca(0x6e4)]=Graphics[_0x3deeca(0x6e4)],this[_0x3deeca(0x880)]=Graphics[_0x3deeca(0x880)];const _0x309545=Math[_0x3deeca(0xaee)](0x1,this['width']/this[_0x3deeca(0x812)]['width']),_0x5c4ab9=Math['max'](0x1,this[_0x3deeca(0x880)]/this[_0x3deeca(0x812)][_0x3deeca(0x880)]),_0x24c414=Math['max'](_0x309545,_0x5c4ab9);this['scale']['x']=_0x24c414,this[_0x3deeca(0x339)]['y']=_0x24c414,this['x']=(Graphics[_0x3deeca(0x6e4)]-this[_0x3deeca(0x6e4)])/0x2,this['y']=Graphics[_0x3deeca(0x880)]-this[_0x3deeca(0x880)];},Spriteset_Battle[_0x5c342f(0xde4)]=VisuMZ[_0x5c342f(0xca2)]['Settings']['BattleLayout'][_0x5c342f(0x341)]??!![],Spriteset_Battle['prototype'][_0x5c342f(0x4d3)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0xd22)]=function(){return 0x0;},Spriteset_Battle['prototype'][_0x5c342f(0xc2f)]=function(){return 0x0;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x42e)]=Spriteset_Battle[_0x5c342f(0xca4)]['createLowerLayer'],Spriteset_Battle[_0x5c342f(0xca4)]['createLowerLayer']=function(){const _0x37330e=_0x5c342f;VisuMZ['BattleCore']['Spriteset_Battle_createLowerLayer'][_0x37330e(0xded)](this),this[_0x37330e(0x4da)](),this['createEnemyNames']();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc12)]=Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x2a5)],Spriteset_Battle['prototype'][_0x5c342f(0x2a5)]=function(){const _0x250b55=_0x5c342f;VisuMZ[_0x250b55(0xca2)]['Spriteset_Battle_update'][_0x250b55(0xded)](this),this[_0x250b55(0x248)](),this[_0x250b55(0xb44)](),this['updateWeather'](),this[_0x250b55(0x5aa)]();},Spriteset_Battle[_0x5c342f(0xca4)]['createWeather']=function(){const _0x4d1dda=_0x5c342f;this[_0x4d1dda(0x653)]=new Weather(),this['_battleField']['addChild'](this['_weather']);},Spriteset_Battle['prototype'][_0x5c342f(0xbef)]=function(){const _0x4eca28=_0x5c342f;this[_0x4eca28(0x653)][_0x4eca28(0xb48)]=$gameScreen[_0x4eca28(0x4cd)](),this[_0x4eca28(0x653)][_0x4eca28(0x34c)]=$gameScreen[_0x4eca28(0x53a)]();},Game_Interpreter['prototype'][_0x5c342f(0x6e0)]=function(_0x2c25b7){const _0x3709ce=_0x5c342f;$gameScreen[_0x3709ce(0x566)](_0x2c25b7[0x0],_0x2c25b7[0x1],_0x2c25b7[0x2]);if(_0x2c25b7[0x3])this[_0x3709ce(0x630)](_0x2c25b7[0x2]);return!![];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xce6)]=Game_Interpreter[_0x5c342f(0xca4)][_0x5c342f(0xc6a)],Game_Interpreter[_0x5c342f(0xca4)][_0x5c342f(0xc6a)]=function(_0x5af3ed){const _0x193834=_0x5c342f;return SceneManager[_0x193834(0x371)]()?(SceneManager[_0x193834(0x201)][_0x193834(0x3ed)][_0x193834(0x775)](_0x5af3ed[0x0],_0x5af3ed[0x1]),!![]):VisuMZ[_0x193834(0xca2)][_0x193834(0xce6)][_0x193834(0xded)](this,_0x5af3ed);},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x424)]=function(_0x5f5948,_0x5ef026){const _0x96ff4c=_0x5c342f;_0x5f5948[_0x96ff4c(0x812)]=_0x5ef026;},Spriteset_Battle[_0x5c342f(0xca4)]['changeBattlebacks']=function(_0x40860f,_0xc276b8){const _0x4bca84=_0x5c342f;_0x40860f=_0x40860f||'',_0xc276b8=_0xc276b8||'';if(_0x40860f===''&&_0xc276b8===''){if('QxoRB'===_0x4bca84(0x792))return _0x1ebd54[_0x4bca84(0xca2)][_0x4bca84(0xc90)][_0x4bca84(0xe29)][_0x4bca84(0xc71)];else _0x40860f=this[_0x4bca84(0xb53)]['battleback1Name'](),_0xc276b8=this[_0x4bca84(0x2ef)][_0x4bca84(0xe2c)]();}const _0x31edd8=ImageManager[_0x4bca84(0x180)](_0x40860f),_0x351933=ImageManager[_0x4bca84(0x948)](_0xc276b8);_0x31edd8[_0x4bca84(0x4bc)](this[_0x4bca84(0x439)][_0x4bca84(0x5c9)](this,this[_0x4bca84(0xb53)],this['_back2Sprite'],_0x31edd8,_0x351933));},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x439)]=function(_0x3e9f6a,_0x96714,_0x227068,_0xddbcde){const _0xeb6393=_0x5c342f;_0xddbcde[_0xeb6393(0x4bc)](this[_0xeb6393(0xb1d)][_0xeb6393(0x5c9)](this,_0x3e9f6a,_0x96714,_0x227068,_0xddbcde));},Spriteset_Battle['prototype'][_0x5c342f(0xb1d)]=function(_0x21385a,_0x486cc5,_0x2e7f45,_0x55be91){const _0x3f4e19=_0x5c342f;_0x21385a[_0x3f4e19(0x812)]=_0x2e7f45,_0x486cc5['bitmap']=_0x55be91,_0x21385a[_0x3f4e19(0xe04)](),_0x486cc5[_0x3f4e19(0xe04)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x683)]=Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x5ff)],Spriteset_Battle['prototype']['createBattleField']=function(){const _0x1b1798=_0x5c342f;VisuMZ[_0x1b1798(0xca2)]['Spriteset_Battle_createBattleField']['call'](this),this[_0x1b1798(0x22f)]();},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x22f)]=function(){const _0x237403=_0x5c342f;this[_0x237403(0x46a)](),this['createUIContainer'](),this['createAnimationContainer'](),this[_0x237403(0x834)](),this['adjustFlippedBattlefield']();},Spriteset_Battle['prototype'][_0x5c342f(0x46a)]=function(){const _0x7b1418=_0x5c342f;this[_0x7b1418(0x440)]=new Sprite(),this[_0x7b1418(0x6d9)]['addChild'](this[_0x7b1418(0x440)]);},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x692)]=function(){const _0x324926=_0x5c342f;this[_0x324926(0x3bb)]=new Sprite();if(Spriteset_Battle[_0x324926(0xde4)]){if(_0x324926(0x99d)!=='fibHr'){const _0x3fb56a=_0x4353d9[_0x324926(0x7a0)](_0xceecfe);_0x3fb56a['addLoadListener'](this[_0x324926(0x7cd)][_0x324926(0x5c9)](this,_0x3fb56a));}else this[_0x324926(0x393)](this[_0x324926(0x3bb)]);}else this['_battleField']['addChild'](this[_0x324926(0x3bb)]);},Spriteset_Battle['prototype'][_0x5c342f(0x834)]=function(){const _0x366e68=_0x5c342f;this[_0x366e68(0x2d5)]=new Sprite(),this[_0x366e68(0x2d5)]['x']=this[_0x366e68(0x6d9)]['x'],this[_0x366e68(0x2d5)]['y']=this[_0x366e68(0x6d9)]['y'],this[_0x366e68(0x393)](this[_0x366e68(0x2d5)]);},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x733)]=function(){const _0x29735c=_0x5c342f;if(!this[_0x29735c(0x4d3)]())return;this[_0x29735c(0x440)][_0x29735c(0x339)]['x']=-0x1,this[_0x29735c(0x440)]['x']=this[_0x29735c(0x6d9)][_0x29735c(0x6e4)],this[_0x29735c(0x1b6)][_0x29735c(0x339)]['x']=-0x1,this['_uiContainer']['x']=this[_0x29735c(0x6d9)][_0x29735c(0x6e4)],this[_0x29735c(0x3bb)][_0x29735c(0x339)]['x']=-0x1,this['_animationContainer']['x']=this[_0x29735c(0x6d9)]['width'],this[_0x29735c(0x2d5)][_0x29735c(0x339)]['x']=-0x1,this['_damageContainer']['x']=this[_0x29735c(0x6d9)]['x']+this[_0x29735c(0x6d9)]['width'];},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x1ac)]=function(){const _0x5f301f=_0x5c342f;Imported[_0x5f301f(0xad9)]&&this['coreEngineRepositionEnemies']()&&this[_0x5f301f(0x77c)]();const _0x571b88=$gameTroop[_0x5f301f(0xe06)](),_0x216091=[];for(const _0x3d14e5 of _0x571b88){_0x5f301f(0xdef)!==_0x5f301f(0x3ec)?_0x216091['push'](new Sprite_Enemy(_0x3d14e5)):(this['isNonSubmenuCancel']()?(this[_0x5f301f(0x338)][_0x5f301f(0x828)](),this[_0x5f301f(0x995)]['hide'](),this[_0x5f301f(0x8c1)]['activate']()):_0x5d224a[_0x5f301f(0xca2)][_0x5f301f(0x937)][_0x5f301f(0xded)](this),this[_0x5f301f(0x5ed)](),this[_0x5f301f(0x995)][_0x5f301f(0xb60)]());}_0x216091[_0x5f301f(0x293)](this[_0x5f301f(0x8e8)][_0x5f301f(0x5c9)](this));for(const _0x50081a of _0x216091){if(_0x5f301f(0x4e0)===_0x5f301f(0xdc9)){const _0x42e488=this['battleLayoutStyle']();['xp',_0x5f301f(0x483),_0x5f301f(0x966)][_0x5f301f(0xaec)](_0x42e488)&&this['_actorCommandWindow'][_0x5f301f(0xd12)](),(_0x42e488===_0x5f301f(0x966)||this[_0x5f301f(0x92a)]())&&(this['_skillWindow'][_0x5f301f(0xd12)](),this[_0x5f301f(0xd5d)][_0x5f301f(0xd12)]());}else this[_0x5f301f(0x440)][_0x5f301f(0x393)](_0x50081a);}this[_0x5f301f(0xe15)]=_0x216091;},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x825)]=function(){const _0x756e95=_0x5c342f;this[_0x756e95(0x36f)]=[];for(let _0x3b0097=0x0;_0x3b0097<$gameParty[_0x756e95(0x39d)]();_0x3b0097++){const _0x221f64=$gameParty[_0x756e95(0xd90)]()[_0x3b0097],_0x91c0a2=new Sprite_Actor();_0x91c0a2[_0x756e95(0x85c)](_0x221f64),_0x91c0a2[_0x756e95(0xb89)](_0x221f64),_0x91c0a2[_0x756e95(0x2a5)](),this[_0x756e95(0x36f)]['push'](_0x91c0a2),this[_0x756e95(0x440)][_0x756e95(0x393)](_0x91c0a2);}},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0xdcd)]=function(_0x3824dc,_0x38f9a8,_0x24f842,_0x19e2ef){const _0x3d86cc=_0x5c342f,_0x154909=this[_0x3d86cc(0x246)](_0x38f9a8),_0x5049af=new(_0x154909?Sprite_AnimationMV:Sprite_Animation)(),_0x37c28e=this[_0x3d86cc(0xde3)](_0x3824dc);this[_0x3d86cc(0xbb4)](_0x3824dc[0x0])&&(_0x24f842=!_0x24f842),_0x5049af[_0x3d86cc(0x244)]=_0x3824dc,_0x5049af['setup'](_0x37c28e,_0x38f9a8,_0x24f842,_0x19e2ef),this['addAnimationSpriteToContainer'](_0x5049af);},Spriteset_Battle[_0x5c342f(0xca4)]['addAnimationSpriteToContainer']=function(_0x41a6fa){const _0x51e575=_0x5c342f;if(this[_0x51e575(0x870)](_0x41a6fa))this[_0x51e575(0xa8f)]()[_0x51e575(0x393)](_0x41a6fa),_0x41a6fa[_0x51e575(0x766)]=!![];else{this[_0x51e575(0x3bb)][_0x51e575(0x393)](_0x41a6fa);if(Spriteset_Battle['ANTI_TINT_UI']){if(_0x51e575(0xd20)==='nceQn')return this[_0x51e575(0x690)]['_offsetX']===0x0&&this['parent'][_0x51e575(0xde5)]===0x0;else this[_0x51e575(0x3bb)]['x']=this[_0x51e575(0x8a6)]['x'],this[_0x51e575(0x3bb)]['y']=this['_effectsContainer']['y'];}}this[_0x51e575(0x696)][_0x51e575(0x843)](_0x41a6fa);},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x870)]=function(_0x3f3328){const _0x4f5b7c=_0x5c342f;if(!_0x3f3328)return![];if(!_0x3f3328[_0x4f5b7c(0x2b2)])return![];if(!_0x3f3328[_0x4f5b7c(0x244)][0x0])return![];if(_0x3f3328[_0x4f5b7c(0x244)][0x0][_0x4f5b7c(0x47b)]&&!_0x3f3328[_0x4f5b7c(0x244)][0x0][_0x4f5b7c(0x47b)]())return![];if($gameSystem[_0x4f5b7c(0x9a3)]())return![];if(!this[_0x4f5b7c(0xa8f)]())return![];if(_0x3f3328[_0x4f5b7c(0x43e)]===Sprite_Animation){if(_0x4f5b7c(0xd47)===_0x4f5b7c(0x949)){const _0x134a5d=_0x25af80[_0x46ef82];if(_0x134a5d)_0x5b20bc=this[_0x4f5b7c(0xb42)]()['indexOf'](_0x134a5d);}else{if(_0x3f3328[_0x4f5b7c(0x2b2)][_0x4f5b7c(0x675)]!==0x0)return![];}}else{if(_0x3f3328[_0x4f5b7c(0x43e)]===Sprite_AnimationMV){if(_0x3f3328[_0x4f5b7c(0x2b2)][_0x4f5b7c(0x560)]===0x3)return![];}}return!![];const _0x31f058=Window_BattleStatus[_0x4f5b7c(0xca4)][_0x4f5b7c(0xcf1)]();return['xp',_0x4f5b7c(0x483)][_0x4f5b7c(0x6f6)](_0x31f058);},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0xa8f)]=function(){const _0x21512f=_0x5c342f;if(!SceneManager[_0x21512f(0x201)])return null;if(!SceneManager[_0x21512f(0x201)][_0x21512f(0x338)])return null;if(!SceneManager[_0x21512f(0x201)]['_statusWindow']['_effectsContainer'])return null;return SceneManager['_scene'][_0x21512f(0x338)]['_effectsContainer'];},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0xa67)]=function(_0x2b363a){const _0x4d33e0=_0x5c342f;this[_0x4d33e0(0xb52)](_0x2b363a);for(const _0x19bc1d of _0x2b363a[_0x4d33e0(0x244)]){_0x19bc1d[_0x4d33e0(0x487)]&&_0x19bc1d[_0x4d33e0(0x487)]();}_0x2b363a['destroy']();},Spriteset_Battle['prototype'][_0x5c342f(0xb52)]=function(_0x10cc54){const _0x5e410=_0x5c342f;this[_0x5e410(0x870)](_0x10cc54)?this[_0x5e410(0xa8f)]()[_0x5e410(0x72d)](_0x10cc54):this['_animationContainer'][_0x5e410(0x72d)](_0x10cc54);this[_0x5e410(0x8a6)][_0x5e410(0x72d)](_0x10cc54),this[_0x5e410(0x3bb)][_0x5e410(0x72d)](_0x10cc54),this['_animationSprites']['remove'](_0x10cc54);if(this['_fauxAnimationSprites'])this[_0x5e410(0x3ab)][_0x5e410(0x5e1)](_0x10cc54);},VisuMZ['BattleCore']['Spriteset_Battle_updateActors']=Spriteset_Battle['prototype'][_0x5c342f(0x552)],Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x552)]=function(){const _0x4622d7=_0x5c342f;VisuMZ['BattleCore'][_0x4622d7(0x59f)][_0x4622d7(0xded)](this),this[_0x4622d7(0x248)]();},Spriteset_Battle['prototype'][_0x5c342f(0x248)]=function(){const _0x4e9aab=_0x5c342f;this[_0x4e9aab(0x440)]['children'][_0x4e9aab(0x293)](this[_0x4e9aab(0x4ed)]['bind'](this)),this[_0x4e9aab(0xd73)]();if(!this[_0x4e9aab(0x440)])return;this[_0x4e9aab(0x440)][_0x4e9aab(0xc0c)]=this[_0x4e9aab(0x780)]();},Spriteset_Battle[_0x5c342f(0xca4)]['compareBattlerSprites']=function(_0x56c14c,_0x4c332a){const _0x69f5c4=_0x5c342f;if(VisuMZ[_0x69f5c4(0xca2)][_0x69f5c4(0xc90)][_0x69f5c4(0xe29)][_0x69f5c4(0x7b1)]){if('YbvDd'!==_0x69f5c4(0x923)){if(_0x56c14c['_battler']&&_0x4c332a[_0x69f5c4(0xca5)]){if(_0x56c14c[_0x69f5c4(0xca5)]['isActor']()&&_0x4c332a['_battler'][_0x69f5c4(0x796)]()){if(_0x69f5c4(0xe25)!==_0x69f5c4(0xe25))this[_0x69f5c4(0x466)]=this[_0x69f5c4(0x669)];else return 0x1;}else{if(_0x4c332a['_battler'][_0x69f5c4(0x47b)]()&&_0x56c14c[_0x69f5c4(0xca5)][_0x69f5c4(0x796)]()){if(_0x69f5c4(0xdbb)!==_0x69f5c4(0xdbb)){const _0x480915=this[_0x69f5c4(0xde1)];_0x480915[_0x69f5c4(0x524)](_0x4b0c14,0x0,_0x4d415d['y'],_0x480915[_0x69f5c4(0x178)],_0x69f5c4(0x83a));}else return-0x1;}}}}else this['_tpbNeedsPartyCommand']=![];}return _0x56c14c[_0x69f5c4(0x256)]!==_0x4c332a['_baseY']?_0x56c14c['_baseY']-_0x4c332a[_0x69f5c4(0x256)]:_0x4c332a[_0x69f5c4(0x738)]-_0x56c14c['spriteId'];},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0xd73)]=function(){const _0x4c0bb5=_0x5c342f;if(!VisuMZ['BattleCore'][_0x4c0bb5(0xc90)][_0x4c0bb5(0xe29)][_0x4c0bb5(0xc5f)])return;const _0x2054a6=BattleManager[_0x4c0bb5(0x52b)];if(_0x2054a6){if(_0x2054a6['isActor']()&&!$gameSystem['isSideView']())return;const _0x3a2ca0=_0x2054a6[_0x4c0bb5(0x9d3)]();if(_0x3a2ca0&&_0x2054a6[_0x4c0bb5(0x47b)]())this[_0x4c0bb5(0x440)][_0x4c0bb5(0x393)](_0x3a2ca0);}},Spriteset_Battle['prototype'][_0x5c342f(0x24d)]=function(){const _0x35585c=_0x5c342f;for(const _0x4d3e0f of $gameParty[_0x35585c(0x4e9)]()){if(!_0x4d3e0f)continue;if(!_0x4d3e0f[_0x35585c(0x9d3)]())continue;_0x4d3e0f['battler']()[_0x35585c(0x6d2)]=!![],_0x4d3e0f[_0x35585c(0x9d3)]()['retreat']();}},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x89f)]=function(){const _0x28adee=_0x5c342f;this[_0x28adee(0x1b6)]=new Sprite();if(Spriteset_Battle[_0x28adee(0xde4)])_0x28adee(0x726)===_0x28adee(0x586)?(_0xd42907[_0x28adee(0xca2)]['BattleManager_onEncounter']['call'](this),this[_0x28adee(0x335)]()):this[_0x28adee(0x393)](this[_0x28adee(0x1b6)]);else{if(_0x28adee(0x32b)!==_0x28adee(0xe32))this[_0x28adee(0x6d9)]['addChild'](this['_uiContainer']);else return this[_0x28adee(0x690)];}SceneManager[_0x28adee(0x201)][_0x28adee(0x1b6)]=this['_uiContainer'];},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x36a)]=function(){const _0x1ccf68=_0x5c342f;if(VisuMZ[_0x1ccf68(0xca2)][_0x1ccf68(0xc90)][_0x1ccf68(0x4f1)]['NameLegacy'])return;this[_0x1ccf68(0xd48)]=new Sprite(),BattleManager['addChildToUiContainer'](this['_enemyNameContainer']);for(const _0x25580b of this[_0x1ccf68(0xe15)]){if(_0x1ccf68(0xa4b)===_0x1ccf68(0x8cd)){if(!_0x15ee93[_0x1ccf68(0x371)]())return;const _0x275061=this[_0x1ccf68(0x9d3)]();if(!_0x275061)return;let _0x943978=this[_0x1ccf68(0x47b)]()?_0x275061['_weaponSprite']:_0x275061['_svBattlerSprite'][_0x1ccf68(0x7c5)];_0x943978&&_0x943978[_0x1ccf68(0x5bd)](0x0);}else{const _0x3bb336=new Sprite_EnemyName();this[_0x1ccf68(0xd48)][_0x1ccf68(0x393)](_0x3bb336),_0x3bb336[_0x1ccf68(0x1e6)](_0x25580b);}}},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0xb44)]=function(){const _0x2c5447=_0x5c342f;if(!this[_0x2c5447(0x2d5)])return;if(!this[_0x2c5447(0x1b6)])return;const _0xd09a32=Spriteset_Battle[_0x2c5447(0xde4)]?this[_0x2c5447(0x2d5)]['x']:0x0,_0x4ed663=Spriteset_Battle[_0x2c5447(0xde4)]?this[_0x2c5447(0x2d5)]['y']:0x0,_0x454a06=Imported[_0x2c5447(0xb02)]?this['_battleField']['x']:0x0,_0x4eddb3=Imported[_0x2c5447(0xb02)]?this[_0x2c5447(0x6d9)]['y']:0x0;this[_0x2c5447(0x1b6)]['x']=_0xd09a32+_0x454a06,this['_uiContainer']['y']=_0x4ed663+_0x4eddb3;},BattleManager['addChildToUiContainer']=function(_0x954682){const _0x496a97=_0x5c342f;if(!SceneManager[_0x496a97(0x201)][_0x496a97(0x1b6)])return;SceneManager[_0x496a97(0x201)][_0x496a97(0x1b6)][_0x496a97(0x393)](_0x954682);},BattleManager['removeChildFromUiContainer']=function(_0x55daa1){const _0x54f060=_0x5c342f;if(!SceneManager['_scene'][_0x54f060(0x1b6)])return;SceneManager[_0x54f060(0x201)]['_uiContainer'][_0x54f060(0x72d)](_0x55daa1);},Spriteset_Battle['prototype'][_0x5c342f(0x780)]=function(){return 0xff;},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x203)]=function(){return![];},Spriteset_Battle['prototype'][_0x5c342f(0xbdf)]=function(){const _0x4da492=_0x5c342f;return this['battlerSprites']()[_0x4da492(0x967)](_0x1031e0=>_0x1031e0[_0x4da492(0x8b3)]());},Spriteset_Battle['prototype'][_0x5c342f(0x9dd)]=function(){const _0x3f4242=_0x5c342f;return this['battlerSprites']()[_0x3f4242(0x967)](_0x47d8b3=>_0x47d8b3[_0x3f4242(0x329)]());},Spriteset_Battle['prototype'][_0x5c342f(0x7f8)]=function(){const _0x3991fa=_0x5c342f;return this['battlerSprites']()[_0x3991fa(0x967)](_0x5d94c9=>_0x5d94c9[_0x3991fa(0x196)]());},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0xe40)]=function(){const _0x2e3d76=_0x5c342f;return this['battlerSprites']()[_0x2e3d76(0x967)](_0x5d4cc9=>_0x5d4cc9['isSkewing']());},Spriteset_Battle[_0x5c342f(0xca4)]['isAnyoneSpinning']=function(){const _0x415c12=_0x5c342f;return this['battlerSprites']()[_0x415c12(0x967)](_0xc4c245=>_0xc4c245['isSpinning']());},Spriteset_Battle[_0x5c342f(0xca4)][_0x5c342f(0x361)]=function(){const _0x4b64b7=_0x5c342f;return this[_0x4b64b7(0x21f)]()[_0x4b64b7(0x967)](_0x19795a=>_0x19795a['isChangingOpacity']());},VisuMZ[_0x5c342f(0xca2)]['Window_ItemList_maxCols']=Window_ItemList['prototype']['maxCols'],Window_ItemList[_0x5c342f(0xca4)][_0x5c342f(0x52c)]=function(){const _0x1ce1fc=_0x5c342f;if(SceneManager[_0x1ce1fc(0x371)]())return SceneManager[_0x1ce1fc(0x201)][_0x1ce1fc(0xcf1)]()==='border'?VisuMZ[_0x1ce1fc(0xca2)][_0x1ce1fc(0xc90)][_0x1ce1fc(0xaa5)][_0x1ce1fc(0x894)]:_0x1ce1fc(0x640)===_0x1ce1fc(0xbb1)?_0x4bef38[_0x1ce1fc(0x1a2)]:VisuMZ[_0x1ce1fc(0xca2)][_0x1ce1fc(0xc90)][_0x1ce1fc(0xaa5)][_0x1ce1fc(0xc42)];else{if('ugtyR'===_0x1ce1fc(0xa2a))return VisuMZ[_0x1ce1fc(0xca2)]['Window_ItemList_maxCols'][_0x1ce1fc(0xded)](this);else{const _0x606db7=_0x290bbf(_0x39909d['$1'])[_0x1ce1fc(0x68e)](/[\r\n]+/)[_0x1ce1fc(0x5e1)]('');_0x52a5a0[_0x1ce1fc(0x25e)]=_0x161ccb[_0x1ce1fc(0xd84)](_0x606db7);}}},VisuMZ[_0x5c342f(0xca2)]['Window_SkillList_maxCols']=Window_SkillList[_0x5c342f(0xca4)][_0x5c342f(0x52c)],Window_SkillList[_0x5c342f(0xca4)][_0x5c342f(0x52c)]=function(){const _0x19f3a0=_0x5c342f;if(SceneManager[_0x19f3a0(0x371)]()){if(_0x19f3a0(0x5b4)===_0x19f3a0(0x5b4)){if(SceneManager[_0x19f3a0(0x201)]['battleLayoutStyle']()===_0x19f3a0(0x966)){if(_0x19f3a0(0x9d9)===_0x19f3a0(0xbde)){this['_motion']=_0x1ac6c8[_0x19f3a0(0x5f6)]['dead'];return;}else return VisuMZ['BattleCore'][_0x19f3a0(0xc90)][_0x19f3a0(0xaa5)]['SkillItemBorderCols'];}else return VisuMZ[_0x19f3a0(0xca2)][_0x19f3a0(0xc90)][_0x19f3a0(0xaa5)][_0x19f3a0(0xc42)];}else{if(_0x2a8ea4[_0x19f3a0(0x3d0)]()['skewDuration']>0x0)return!![];this[_0x19f3a0(0xcd7)]='';}}else return VisuMZ[_0x19f3a0(0xca2)][_0x19f3a0(0x672)][_0x19f3a0(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x6c7)]=Window_Options[_0x5c342f(0xca4)]['addGeneralOptions'],Window_Options['prototype']['addGeneralOptions']=function(){const _0x5b3f6f=_0x5c342f;VisuMZ[_0x5b3f6f(0xca2)][_0x5b3f6f(0x6c7)]['call'](this),this[_0x5b3f6f(0x390)](),this['addShowHpGaugeCommand']();},Window_Options[_0x5c342f(0xca4)][_0x5c342f(0x390)]=function(){const _0x36ae80=_0x5c342f;VisuMZ[_0x36ae80(0xca2)][_0x36ae80(0xc90)][_0x36ae80(0xdeb)]['AddOption']&&(_0x36ae80(0x44f)===_0x36ae80(0x44f)?(this[_0x36ae80(0x830)](),this[_0x36ae80(0x955)]()):(this[_0x36ae80(0xb81)]=_0xd17b53,this[_0x36ae80(0x844)]&&(this[_0x36ae80(0x6e2)]=0x0,this[_0x36ae80(0xb81)]=0x0)));},Window_Options['prototype'][_0x5c342f(0x38c)]=function(){const _0xd7c9ca=_0x5c342f;if(!VisuMZ['BattleCore'][_0xd7c9ca(0xc90)][_0xd7c9ca(0x82c)][_0xd7c9ca(0x842)])return;const _0x4fb8ca=TextManager[_0xd7c9ca(0xd8e)],_0x4fc848=_0xd7c9ca(0xd8e);this[_0xd7c9ca(0xb75)](_0x4fb8ca,_0x4fc848);},Window_Options[_0x5c342f(0xca4)][_0x5c342f(0x830)]=function(){const _0x146af7=_0x5c342f,_0x5d526a=TextManager['autoBattleStart'],_0x1c2492=_0x146af7(0xb7d);this[_0x146af7(0xb75)](_0x5d526a,_0x1c2492);},Window_Options[_0x5c342f(0xca4)][_0x5c342f(0x955)]=function(){const _0x2ed083=_0x5c342f,_0xdbc9a2=TextManager[_0x2ed083(0x814)],_0x176521=_0x2ed083(0x378);this[_0x2ed083(0xb75)](_0xdbc9a2,_0x176521);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x511)]=Window_Options['prototype'][_0x5c342f(0xddb)],Window_Options[_0x5c342f(0xca4)][_0x5c342f(0xddb)]=function(_0x5ba8f7){const _0x22e7e3=_0x5c342f,_0x346436=this[_0x22e7e3(0x957)](_0x5ba8f7);return _0x346436==='autoBattleUseSkills'?this['statusTextAutoBattleStyle']():VisuMZ['BattleCore']['Window_Options_statusText'][_0x22e7e3(0xded)](this,_0x5ba8f7);},Window_Options[_0x5c342f(0xca4)][_0x5c342f(0x27f)]=function(){const _0x10b9f3=_0x5c342f,_0x9a2ae1=VisuMZ[_0x10b9f3(0xca2)][_0x10b9f3(0xc90)][_0x10b9f3(0xdeb)],_0x3c5cd3=this[_0x10b9f3(0xb90)](_0x10b9f3(0x378));return _0x3c5cd3?_0x9a2ae1['StyleON']:_0x9a2ae1[_0x10b9f3(0x6b1)];},Window_ShopStatus['prototype'][_0x5c342f(0xc92)]=function(){const _0x22fdc7=_0x5c342f,_0x41c257=DataManager[_0x22fdc7(0x271)](this[_0x22fdc7(0x505)]),_0x5afbb5=VisuMZ[_0x22fdc7(0xa30)][_0x41c257];if(!_0x5afbb5)return this[_0x22fdc7(0xbd6)]();const _0x39638e='DamageType%1'[_0x22fdc7(0x266)](this[_0x22fdc7(0x505)]['damage'][_0x22fdc7(0xb48)]),_0x1e2f8d=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x22fdc7(0x505)][_0x22fdc7(0x8f5)]['type']];return _0x5afbb5[_0x39638e][_0x22fdc7(0x266)](_0x1e2f8d);},Window_ShopStatus[_0x5c342f(0xca4)][_0x5c342f(0xae2)]=function(){const _0x42245d=_0x5c342f,_0x283b00=DataManager['getDamageStyle'](this[_0x42245d(0x505)]),_0x27cdcd=VisuMZ['DamageStyles'][_0x283b00];if(!_0x27cdcd)return this[_0x42245d(0x5be)]();return _0x27cdcd[_0x42245d(0x6c8)][_0x42245d(0xded)](this);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x676)]=Window_PartyCommand['prototype'][_0x5c342f(0xd5a)],Window_PartyCommand[_0x5c342f(0xca4)]['initialize']=function(_0x4e5fa5){const _0x5a281c=_0x5c342f;VisuMZ['BattleCore'][_0x5a281c(0x676)][_0x5a281c(0xded)](this,_0x4e5fa5),this[_0x5a281c(0x3e3)](_0x4e5fa5);},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x3e3)]=function(_0x651567){const _0x331601=_0x5c342f,_0x220c7d=new Rectangle(0x0,0x0,_0x651567[_0x331601(0x6e4)],_0x651567[_0x331601(0x880)]);this[_0x331601(0xde1)]=new Window_Base(_0x220c7d),this[_0x331601(0xde1)][_0x331601(0xc0c)]=0x0,this[_0x331601(0x393)](this[_0x331601(0xde1)]),this[_0x331601(0xc95)]();},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x473)]=function(){const _0x47e3fa=_0x5c342f;Window_Command['prototype'][_0x47e3fa(0x473)][_0x47e3fa(0xded)](this);if(this['_commandNameWindow'])this[_0x47e3fa(0xc95)]();},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0xc95)]=function(){const _0x5615b8=_0x5c342f,_0x4643d7=this[_0x5615b8(0xde1)];_0x4643d7[_0x5615b8(0xae6)][_0x5615b8(0xa52)]();const _0x12a8d0=this[_0x5615b8(0x795)](this[_0x5615b8(0x427)]());if(_0x12a8d0===_0x5615b8(0x6e3)&&this['maxItems']()>0x0){const _0x5c91e3=this[_0x5615b8(0x9eb)](this[_0x5615b8(0x427)]());let _0x5a8444=this[_0x5615b8(0x7a2)](this[_0x5615b8(0x427)]());_0x5a8444=_0x5a8444[_0x5615b8(0xbc8)](/\\I\[(\d+)\]/gi,''),_0x4643d7['resetFontSettings'](),this[_0x5615b8(0xce0)](_0x5a8444,_0x5c91e3),this['commandNameWindowDrawText'](_0x5a8444,_0x5c91e3),this[_0x5615b8(0xdbc)](_0x5a8444,_0x5c91e3);}},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0xce0)]=function(_0x2ae388,_0x139596){},Window_PartyCommand['prototype'][_0x5c342f(0x7d4)]=function(_0x45fd01,_0x496bdc){const _0x439f13=_0x5c342f,_0x5b60d2=this[_0x439f13(0xde1)];_0x5b60d2['drawText'](_0x45fd01,0x0,_0x496bdc['y'],_0x5b60d2[_0x439f13(0x178)],_0x439f13(0x83a));},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0xdbc)]=function(_0x47ef7a,_0x2d5073){const _0x3452e5=_0x5c342f,_0xdee633=this[_0x3452e5(0xde1)],_0x558a5d=$gameSystem['windowPadding'](),_0xc3f8de=_0x2d5073['x']+Math['floor'](_0x2d5073[_0x3452e5(0x6e4)]/0x2)+_0x558a5d;_0xdee633['x']=_0xdee633[_0x3452e5(0x6e4)]/-0x2+_0xc3f8de,_0xdee633['y']=Math[_0x3452e5(0x9b3)](_0x2d5073[_0x3452e5(0x880)]/0x2);},Window_PartyCommand['prototype'][_0x5c342f(0xc02)]=function(){const _0xcaad5c=_0x5c342f;this[_0xcaad5c(0xe38)](),this[_0xcaad5c(0x2c4)](),this[_0xcaad5c(0x80b)](),this[_0xcaad5c(0x824)](),this['addEscapeCommand']();},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0xe38)]=function(){const _0x5ab713=_0x5c342f,_0x5f0e02=this[_0x5ab713(0x5b7)](),_0x380ceb=VisuMZ[_0x5ab713(0xca2)][_0x5ab713(0xc90)][_0x5ab713(0x7e4)][_0x5ab713(0x680)],_0x131024=_0x5f0e02===_0x5ab713(0x911)?TextManager[_0x5ab713(0x4b8)]:'\x5cI[%1]%2'[_0x5ab713(0x266)](_0x380ceb,TextManager[_0x5ab713(0x4b8)]),_0x3e6b75=this[_0x5ab713(0x791)]();this[_0x5ab713(0xb75)](_0x131024,_0x5ab713(0x4b8),_0x3e6b75);},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x791)]=function(){return!![];},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x2c4)]=function(){const _0x1a6cfc=_0x5c342f;if(!this['isAutoBattleCommandAdded']())return;const _0x3cb24e=this['commandStyle'](),_0x507771=VisuMZ[_0x1a6cfc(0xca2)][_0x1a6cfc(0xc90)][_0x1a6cfc(0x7e4)]['CmdIconAutoBattle'],_0x478b01=_0x3cb24e===_0x1a6cfc(0x911)?TextManager['autoBattle']:'\x5cI[%1]%2'[_0x1a6cfc(0x266)](_0x507771,TextManager['autoBattle']),_0x363053=this[_0x1a6cfc(0x1cc)]();this[_0x1a6cfc(0xb75)](_0x478b01,_0x1a6cfc(0x659),_0x363053);},Window_PartyCommand['prototype'][_0x5c342f(0x35e)]=function(){const _0x3601b7=_0x5c342f;return VisuMZ[_0x3601b7(0xca2)][_0x3601b7(0xc90)]['PartyCmd'][_0x3601b7(0xbe4)];},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x1cc)]=function(){return!![];},Window_PartyCommand['prototype'][_0x5c342f(0x80b)]=function(){},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x824)]=function(){const _0x1c8edd=_0x5c342f;if(!this[_0x1c8edd(0x8b2)]())return;const _0x58963f=this['commandStyle'](),_0x17e12b=VisuMZ['BattleCore'][_0x1c8edd(0xc90)][_0x1c8edd(0x7e4)][_0x1c8edd(0xc96)],_0xea4ace=_0x58963f==='text'?TextManager[_0x1c8edd(0x9b9)]:_0x1c8edd(0x973)[_0x1c8edd(0x266)](_0x17e12b,TextManager[_0x1c8edd(0x9b9)]),_0x4be3de=this['isOptionsCommandEnabled']();this[_0x1c8edd(0xb75)](_0xea4ace,_0x1c8edd(0x9b9),_0x4be3de);},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x8b2)]=function(){const _0x35026f=_0x5c342f;return VisuMZ[_0x35026f(0xca2)]['Settings'][_0x35026f(0x7e4)][_0x35026f(0xd83)];},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x4c1)]=function(){return!![];},Window_PartyCommand['prototype']['addEscapeCommand']=function(){const _0x425010=_0x5c342f,_0x449660=this[_0x425010(0x5b7)](),_0x11bff3=VisuMZ[_0x425010(0xca2)]['Settings']['PartyCmd'][_0x425010(0x235)],_0x4db0eb=_0x449660===_0x425010(0x911)?TextManager['escape']:'\x5cI[%1]%2'[_0x425010(0x266)](_0x11bff3,TextManager[_0x425010(0xa5a)]),_0x10be7b=this[_0x425010(0xd01)]();this[_0x425010(0xb75)](_0x4db0eb,_0x425010(0xa5a),_0x10be7b);},Window_PartyCommand['prototype'][_0x5c342f(0xd01)]=function(){const _0x285dfc=_0x5c342f;return BattleManager[_0x285dfc(0x66b)]();},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x770)]=function(){const _0x37c594=_0x5c342f;return VisuMZ[_0x37c594(0xca2)]['Settings'][_0x37c594(0x7e4)][_0x37c594(0x8bf)];},Window_PartyCommand['prototype']['drawItem']=function(_0xb27c53){const _0x2cdc38=_0x5c342f,_0x23ca28=this['commandStyleCheck'](_0xb27c53);if(_0x23ca28===_0x2cdc38(0xd2c)){if('ScLxj'!==_0x2cdc38(0x99a))this[_0x2cdc38(0x2ed)](_0xb27c53);else{let _0x45a78f=0x1;return _0x45a78f*=this[_0x2cdc38(0x17d)],_0x45a78f*=this[_0x2cdc38(0x24b)],_0x45a78f;}}else _0x23ca28===_0x2cdc38(0x6e3)?this[_0x2cdc38(0xc45)](_0xb27c53):_0x2cdc38(0x394)!==_0x2cdc38(0x394)?this['requestMotion'](_0x2cdc38(0x8f5)):Window_Command[_0x2cdc38(0xca4)][_0x2cdc38(0x686)][_0x2cdc38(0xded)](this,_0xb27c53);},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x5b7)]=function(){const _0x32a68d=_0x5c342f;return VisuMZ['BattleCore'][_0x32a68d(0xc90)][_0x32a68d(0x7e4)][_0x32a68d(0x77d)];},Window_PartyCommand['prototype']['commandStyleCheck']=function(_0x2893d0){const _0x4faaea=_0x5c342f;if(_0x2893d0<0x0)return _0x4faaea(0x911);const _0x52ddcc=this[_0x4faaea(0x5b7)]();if(_0x52ddcc!==_0x4faaea(0x8ad)){if(_0x4faaea(0xc66)!==_0x4faaea(0x5c5))return _0x52ddcc;else{const _0x485727=_0x1cb27b(_0x44c5d5['$1']);return[_0x3db8f5[_0x4faaea(0xab5)]()['members']()[_0x485727]];}}else{if(this[_0x4faaea(0x70f)]()>0x0){const _0x40f549=this[_0x4faaea(0x7a2)](_0x2893d0);if(_0x40f549['match'](/\\I\[(\d+)\]/i)){const _0x297d1d=this['itemLineRect'](_0x2893d0),_0x2a58ca=this['textSizeEx'](_0x40f549)[_0x4faaea(0x6e4)];if(_0x2a58ca<=_0x297d1d[_0x4faaea(0x6e4)]){if('chyAC'!==_0x4faaea(0x90e))_0x4138a9[_0x4faaea(0x580)](_0xbb7227[_0x31f46f]);else return _0x4faaea(0xd2c);}else return _0x4faaea(0x6e3);}}}return'text';},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x2ed)]=function(_0x4ba870){const _0xeb3702=_0x5c342f,_0x2dc094=this[_0xeb3702(0x9eb)](_0x4ba870),_0x463f4d=this[_0xeb3702(0x7a2)](_0x4ba870),_0x566852=this[_0xeb3702(0x55e)](_0x463f4d)['width'];this[_0xeb3702(0x760)](this[_0xeb3702(0xcb0)](_0x4ba870));const _0xbde01f=this['itemTextAlign']();if(_0xbde01f===_0xeb3702(0x1d7)){if(_0xeb3702(0xc19)===_0xeb3702(0x9de))return this[_0xeb3702(0x6dc)]();else this[_0xeb3702(0xb30)](_0x463f4d,_0x2dc094['x']+_0x2dc094[_0xeb3702(0x6e4)]-_0x566852,_0x2dc094['y'],_0x566852);}else{if(_0xbde01f==='center'){const _0x5ab4c2=_0x2dc094['x']+Math[_0xeb3702(0x9b3)]((_0x2dc094[_0xeb3702(0x6e4)]-_0x566852)/0x2);this[_0xeb3702(0xb30)](_0x463f4d,_0x5ab4c2,_0x2dc094['y'],_0x566852);}else'zYROJ'!==_0xeb3702(0x907)?(_0x4d0feb[_0xeb3702(0xca2)]['BattleManager_startInput'][_0xeb3702(0xded)](this),this[_0xeb3702(0xa39)]()&&this[_0xeb3702(0x909)]()&&!this[_0xeb3702(0x853)]&&_0x1fef2f[_0xeb3702(0xc24)]()&&this[_0xeb3702(0xb3e)]()):this['drawTextEx'](_0x463f4d,_0x2dc094['x'],_0x2dc094['y'],_0x566852);}},Window_PartyCommand['prototype'][_0x5c342f(0xc45)]=function(_0x5066a1){const _0x3da2b2=_0x5c342f;this[_0x3da2b2(0x7a2)](_0x5066a1)[_0x3da2b2(0xcbd)](/\\I\[(\d+)\]/i);const _0x59cb6c=Number(RegExp['$1'])||0x0,_0x49b05e=this[_0x3da2b2(0x9eb)](_0x5066a1),_0x34ffdb=_0x49b05e['x']+Math[_0x3da2b2(0x9b3)]((_0x49b05e['width']-ImageManager[_0x3da2b2(0x6f8)])/0x2),_0x3a017e=_0x49b05e['y']+(_0x49b05e['height']-ImageManager['iconHeight'])/0x2;this[_0x3da2b2(0xd9e)](_0x59cb6c,_0x34ffdb,_0x3a017e);},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0xa29)]=function(){},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0x5eb)]=function(){const _0x279196=_0x5c342f;Window_Command['prototype']['activate'][_0x279196(0xded)](this);const _0x27daf8=this['battleLayoutStyle']();if(_0x27daf8===_0x279196(0x966)){if(_0x279196(0x848)!=='RRYCy')this[_0x279196(0x2b0)]();else{if(this['_homeDuration']<=0x0)return;const _0x289ce6=this['_homeDuration'],_0x328e59=this[_0x279196(0x76d)],_0x55ddd9=this[_0x279196(0x861)];_0x3149f2[_0x279196(0xad9)]?(this[_0x279196(0x301)]=this[_0x279196(0x95d)](this[_0x279196(0x301)],this['_targetHomeX'],_0x289ce6,_0x328e59,_0x55ddd9),this[_0x279196(0x3f1)]=this[_0x279196(0x95d)](this['_homeY'],this[_0x279196(0x6ef)],_0x289ce6,_0x328e59,_0x55ddd9)):(this['_homeX']=(this[_0x279196(0x301)]*(_0x289ce6-0x1)+this[_0x279196(0xa5f)])/_0x289ce6,this[_0x279196(0x3f1)]=(this[_0x279196(0x3f1)]*(_0x289ce6-0x1)+this['_targetHomeY'])/_0x289ce6);this[_0x279196(0x459)]--;if(this['_homeDuration']<=0x0)this[_0x279196(0x543)]();}}},Window_PartyCommand[_0x5c342f(0xca4)][_0x5c342f(0xcf1)]=function(){const _0x35b098=_0x5c342f;if(this['_battleLayoutStyle'])return this[_0x35b098(0x1bd)];return this[_0x35b098(0x1bd)]=SceneManager[_0x35b098(0x201)][_0x35b098(0xcf1)](),this[_0x35b098(0x1bd)];},Window_PartyCommand['prototype'][_0x5c342f(0x1d3)]=function(){const _0x47024c=_0x5c342f,_0x21e32f=VisuMZ[_0x47024c(0xca2)][_0x47024c(0xc90)][_0x47024c(0x7e4)],_0x1d0331=this[_0x47024c(0x36c)]();switch(_0x1d0331){case'fight':this[_0x47024c(0xbec)][_0x47024c(0x938)](_0x21e32f[_0x47024c(0x467)]);break;case'autoBattle':this[_0x47024c(0xbec)][_0x47024c(0x938)](_0x21e32f[_0x47024c(0x221)]);break;case _0x47024c(0x9b9):this['_helpWindow']['setText'](_0x21e32f[_0x47024c(0x65a)]);break;case'escape':this['_helpWindow'][_0x47024c(0x938)](_0x21e32f[_0x47024c(0xd26)]);break;default:this[_0x47024c(0xbec)]['setText']('');break;}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x7a9)]=Window_ActorCommand['prototype'][_0x5c342f(0xd5a)],Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0xd5a)]=function(_0x394f4c){const _0x290be1=_0x5c342f;VisuMZ[_0x290be1(0xca2)][_0x290be1(0x7a9)]['call'](this,_0x394f4c),this[_0x290be1(0x3e3)](_0x394f4c);},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x3e3)]=function(_0x1b5462){const _0x90512d=_0x5c342f,_0xfe42a5=new Rectangle(0x0,0x0,_0x1b5462[_0x90512d(0x6e4)],_0x1b5462[_0x90512d(0x880)]);this[_0x90512d(0xde1)]=new Window_Base(_0xfe42a5),this[_0x90512d(0xde1)][_0x90512d(0xc0c)]=0x0,this[_0x90512d(0x393)](this[_0x90512d(0xde1)]),this['updateCommandNameWindow']();},Window_ActorCommand['prototype'][_0x5c342f(0x473)]=function(){const _0x387ba1=_0x5c342f;Window_Command[_0x387ba1(0xca4)][_0x387ba1(0x473)][_0x387ba1(0xded)](this);if(this[_0x387ba1(0xde1)])this[_0x387ba1(0xc95)]();},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0xc95)]=function(){const _0x3e2691=_0x5c342f,_0x5102e9=this[_0x3e2691(0xde1)];_0x5102e9[_0x3e2691(0xae6)][_0x3e2691(0xa52)]();const _0x4fe0ce=this['commandStyleCheck'](this[_0x3e2691(0x427)]());if(_0x4fe0ce===_0x3e2691(0x6e3)&&this['maxItems']()>0x0){const _0x232f6c=this[_0x3e2691(0x9eb)](this[_0x3e2691(0x427)]());let _0x59a2f0=this['commandName'](this['index']());_0x59a2f0=_0x59a2f0[_0x3e2691(0xbc8)](/\\I\[(\d+)\]/gi,''),_0x5102e9[_0x3e2691(0xd04)](),this[_0x3e2691(0xce0)](_0x59a2f0,_0x232f6c),this['commandNameWindowDrawText'](_0x59a2f0,_0x232f6c),this['commandNameWindowCenter'](_0x59a2f0,_0x232f6c);}},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0xce0)]=function(_0x2c6c4d,_0x30d7ef){},Window_ActorCommand['prototype'][_0x5c342f(0x7d4)]=function(_0x16b6af,_0x569145){const _0x4eba2d=_0x5c342f,_0x555adf=this['_commandNameWindow'];_0x555adf[_0x4eba2d(0x524)](_0x16b6af,0x0,_0x569145['y'],_0x555adf[_0x4eba2d(0x178)],_0x4eba2d(0x83a));},Window_ActorCommand['prototype'][_0x5c342f(0xdbc)]=function(_0x248482,_0x56cd78){const _0xee2486=_0x5c342f,_0x30e16c=this['_commandNameWindow'],_0xd3e24e=$gameSystem[_0xee2486(0x846)](),_0x2d48c9=_0x56cd78['x']+Math[_0xee2486(0x9b3)](_0x56cd78[_0xee2486(0x6e4)]/0x2)+_0xd3e24e;_0x30e16c['x']=_0x30e16c[_0xee2486(0x6e4)]/-0x2+_0x2d48c9,_0x30e16c['y']=Math[_0xee2486(0x9b3)](_0x56cd78[_0xee2486(0x880)]/0x2);},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0xc02)]=function(){const _0x272b62=_0x5c342f;if(!this[_0x272b62(0x465)])return;const _0x21f741=this[_0x272b62(0x465)][_0x272b62(0xbe0)]();for(const _0x29d69c of _0x21f741){this[_0x272b62(0x900)](_0x29d69c[_0x272b62(0xb34)]()[_0x272b62(0xa5e)]());}},Window_ActorCommand[_0x5c342f(0xca4)]['makeBattleCommand']=function(_0xec9f3e){const _0x451e46=_0x5c342f;_0xec9f3e==='ATTACK'&&this[_0x451e46(0x863)]();[_0x451e46(0x9a7),'SKILLS'][_0x451e46(0xaec)](_0xec9f3e)&&this[_0x451e46(0x724)]();_0xec9f3e===_0x451e46(0xabc)&&this['addGuardCommand']();_0xec9f3e===_0x451e46(0x8ea)&&(_0x451e46(0x5d0)===_0x451e46(0x5de)?_0x4e1b27[_0x451e46(0x286)](_0x451e46(0x1a9),this[_0x451e46(0x3c4)][_0x451e46(0x5c9)](this)):this['addItemCommand']());if(_0xec9f3e===_0x451e46(0xba8)){if(_0x451e46(0x6b6)===_0x451e46(0x230)){if(_0x3d5394)_0x5e233f[_0x451e46(0x6d1)](_0x5d388a);}else this[_0x451e46(0x6f2)]();}if(_0xec9f3e===_0x451e46(0xcb4)){if(_0x451e46(0xa12)!==_0x451e46(0xd52))this[_0x451e46(0x2c4)]();else{const _0x173d4a=_0x10c89a['parse']('['+_0x28c62c['$1'][_0x451e46(0xcbd)](/\d+/g)+']');for(const _0x28f5f6 of _0x173d4a){if(!_0x46732a[_0x451e46(0xbc0)](_0x28f5f6))return![];}return!![];}}if(_0xec9f3e[_0x451e46(0xcbd)](/STYPE: (\d+)/i)){const _0x1f299e=Number(RegExp['$1']);this[_0x451e46(0x69e)](_0x1f299e);}else{if(_0xec9f3e[_0x451e46(0xcbd)](/STYPE: (.*)/i)){const _0x50f031=DataManager[_0x451e46(0x30a)](RegExp['$1']);this['addSkillTypeCommand'](_0x50f031);}}_0xec9f3e===_0x451e46(0x778)&&this[_0x451e46(0x95e)]();if(_0xec9f3e[_0x451e46(0xcbd)](/SKILL: (\d+)/i)){if(_0x451e46(0x1ca)!==_0x451e46(0x1ca)){const _0x470335=this['getAttackWeaponAnimationId']();this[_0x451e46(0x69f)](_0x470335);}else{const _0x14b7e7=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x14b7e7]);}}else{if(_0xec9f3e[_0x451e46(0xcbd)](/SKILL: (.*)/i)){if('TAWjh'!==_0x451e46(0x561)){const _0x16e897=DataManager[_0x451e46(0x3df)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x16e897]);}else{const _0x7f1faa=/<BYPASS DAMAGE CAP>/i;if(this[_0x451e46(0xa87)]()[_0x451e46(0x340)]['match'](_0x7f1faa))return!![];if(this[_0x451e46(0xdda)]()[_0x451e46(0xd63)]()[_0x451e46(0x967)](_0x43a878=>_0x43a878&&_0x43a878[_0x451e46(0x340)][_0x451e46(0xcbd)](_0x7f1faa)))return!![];return!_0x1d130a['BattleCore'][_0x451e46(0xc90)][_0x451e46(0x603)][_0x451e46(0x363)];}}}_0xec9f3e===_0x451e46(0x9e1)&&Imported[_0x451e46(0xa19)]&&(_0x451e46(0x532)!=='xRGOY'?this[_0x451e46(0x843)](_0x451e46(0x5d2),_0x4cfd6a,_0xb05eff):this['addPartyCommand']()),[_0x451e46(0xa27),_0x451e46(0xb45)]['includes'](_0xec9f3e)&&Imported['VisuMZ_4_CombatLog']&&this[_0x451e46(0xa01)](),_0xec9f3e===_0x451e46(0x200)&&Imported[_0x451e46(0x5e4)]&&(_0x451e46(0x762)!==_0x451e46(0xb49)?this[_0x451e46(0x17f)](!![]):this[_0x451e46(0xc45)](_0x26278a)),_0xec9f3e===_0x451e46(0xa26)&&Imported[_0x451e46(0x56d)]&&this[_0x451e46(0xac9)]();},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x863)]=function(){const _0x3f8d20=_0x5c342f,_0x3d0894=$dataSkills[this[_0x3f8d20(0x465)]['attackSkillId']()];if(!_0x3d0894)return;if(!this[_0x3f8d20(0x4ec)](_0x3d0894))return;const _0x2e0d22=this[_0x3f8d20(0x5b7)](),_0x2e6d1a=DataManager[_0x3f8d20(0xe09)](_0x3d0894),_0x4e9ac5=DataManager[_0x3f8d20(0xbf9)](_0x3d0894),_0x447971=_0x2e0d22===_0x3f8d20(0x911)?_0x2e6d1a:_0x3f8d20(0x973)['format'](_0x4e9ac5,_0x2e6d1a);this[_0x3f8d20(0xb75)](_0x447971,_0x3f8d20(0x97a),this[_0x3f8d20(0x465)][_0x3f8d20(0x856)]());},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x6f9)]=function(){const _0x3c1748=_0x5c342f,_0x495e82=$dataSkills[this[_0x3c1748(0x465)][_0x3c1748(0x610)]()];if(!_0x495e82)return;if(!this['canAddSkillCommand'](_0x495e82))return;const _0x5e383c=this[_0x3c1748(0x5b7)](),_0x39f8c6=DataManager['battleCommandName'](_0x495e82),_0x3c3cff=DataManager[_0x3c1748(0xbf9)](_0x495e82),_0x2bf949=_0x5e383c===_0x3c1748(0x911)?_0x39f8c6:'\x5cI[%1]%2'[_0x3c1748(0x266)](_0x3c3cff,_0x39f8c6);this['addCommand'](_0x2bf949,_0x3c1748(0xc98),this[_0x3c1748(0x465)]['canGuard']());},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0xe33)]=function(){const _0x28eaba=_0x5c342f,_0x1f0789=this[_0x28eaba(0x5b7)](),_0x4f8260=VisuMZ['BattleCore'][_0x28eaba(0xc90)][_0x28eaba(0x890)][_0x28eaba(0xa88)],_0x3827e4=_0x1f0789===_0x28eaba(0x911)?TextManager[_0x28eaba(0xa87)]:_0x28eaba(0x973)[_0x28eaba(0x266)](_0x4f8260,TextManager['item']),_0x17ddec=this[_0x28eaba(0xb98)]();this[_0x28eaba(0xb75)](_0x3827e4,'item',_0x17ddec);},Window_ActorCommand['prototype'][_0x5c342f(0xb98)]=function(){const _0x1d085b=_0x5c342f;return this[_0x1d085b(0x465)]&&this[_0x1d085b(0x465)]['canUseItemCommand']();},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x724)]=function(){const _0x3cb7cd=_0x5c342f,_0x25f57a=this[_0x3cb7cd(0x465)][_0x3cb7cd(0xd7f)]();for(const _0xb812a9 of _0x25f57a){this[_0x3cb7cd(0x69e)](_0xb812a9);}},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x69e)]=function(_0x28e5cf){const _0x2adfc4=_0x5c342f;let _0x599cff=$dataSystem[_0x2adfc4(0xd7f)][_0x28e5cf];if(!_0x599cff)return;let _0x4d5fe2=_0x599cff;const _0x5c0105=this[_0x2adfc4(0x5b7)]();if(_0x5c0105===_0x2adfc4(0x911))_0x4d5fe2=_0x4d5fe2['replace'](/\x1I\[(\d+)\]/gi,''),_0x4d5fe2=_0x4d5fe2[_0x2adfc4(0xbc8)](/\\I\[(\d+)\]/gi,'');else{if(!_0x599cff[_0x2adfc4(0xcbd)](/\\I\[(\d+)\]/i)){if(_0x2adfc4(0xb62)!==_0x2adfc4(0xb62))_0x220d48[_0x2adfc4(0xca2)][_0x2adfc4(0x8d4)][_0x2adfc4(0xded)](this),_0x3b7d50[_0x2adfc4(0x84f)]()&&_0x4bbf9f[_0x2adfc4(0x272)]&&(_0x1728c6[_0x2adfc4(0x272)]=![],this['actorCommandCancelTPB']());else{const _0x50d792=Imported[_0x2adfc4(0x3e0)]?VisuMZ[_0x2adfc4(0xbcc)]['Settings'][_0x2adfc4(0x8cc)]:VisuMZ[_0x2adfc4(0xca2)][_0x2adfc4(0xc90)]['ActorCmd'],_0x46fcfb=$dataSystem[_0x2adfc4(0xbd9)][_0x2adfc4(0xaec)](_0x28e5cf),_0x48b062=_0x46fcfb?_0x50d792[_0x2adfc4(0xb04)]:_0x50d792[_0x2adfc4(0x52f)];_0x4d5fe2='\x5cI[%1]%2'[_0x2adfc4(0x266)](_0x48b062,_0x599cff);}}}this[_0x2adfc4(0xb75)](_0x4d5fe2,_0x2adfc4(0x802),!![],_0x28e5cf);},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x95e)]=function(){const _0x714640=_0x5c342f,_0x29bc50=this[_0x714640(0x465)][_0x714640(0xd7f)](),_0x3ae876=this[_0x714640(0x465)]['skills']();for(const _0x50217d of _0x3ae876){if(!_0x50217d)continue;if(Imported[_0x714640(0x3e0)]){if(this[_0x714640(0x416)](_0x50217d))continue;if(this[_0x714640(0xbab)](_0x50217d))continue;}else{if(!_0x29bc50[_0x714640(0xaec)](_0x50217d[_0x714640(0x8aa)])){if('ymeFN'!=='ymeFN'){const _0x6459f=_0x42d53a[_0x714640(0x201)][_0x714640(0x338)];if(_0x6459f)_0x6459f[_0x714640(0x9f9)](_0x2b1b03,this[_0x714640(0xca5)]);}else continue;}}this[_0x714640(0x6e9)](_0x50217d);}},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x416)]=function(_0x4c4df4){const _0x5affa8=_0x5c342f,_0x4efe7c=this['_actor'][_0x5affa8(0xd7f)](),_0x3f2333=_0x4efe7c[_0x5affa8(0x3cd)](_0x48d361=>DataManager[_0x5affa8(0x555)](_0x4c4df4)[_0x5affa8(0xaec)](_0x48d361));return _0x3f2333[_0x5affa8(0xc5c)]<=0x0;},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0xbab)]=function(_0x39f7b9){const _0x45b7e3=_0x5c342f;if(Imported[_0x45b7e3(0x3e0)]){if(VisuMZ[_0x45b7e3(0xbcc)][_0x45b7e3(0xda9)]>=1.24){if(_0x45b7e3(0x20f)!==_0x45b7e3(0x20f))_0x3cb026['setValue'](_0xd49b50[_0x45b7e3(0x3e7)],!![]);else{if(this[_0x45b7e3(0x465)]){if('vWcnj'!==_0x45b7e3(0x48b)){if(!VisuMZ[_0x45b7e3(0xbcc)][_0x45b7e3(0xdf5)](this[_0x45b7e3(0x465)],_0x39f7b9))return!![];if(!VisuMZ[_0x45b7e3(0xbcc)]['CheckVisibleSwitchNotetags'](this[_0x45b7e3(0x465)],_0x39f7b9))return!![];if(!VisuMZ[_0x45b7e3(0xbcc)][_0x45b7e3(0x447)](this[_0x45b7e3(0x465)],_0x39f7b9))return!![];}else return'iconText';}}}else{if(!Window_SkillList[_0x45b7e3(0xca4)][_0x45b7e3(0x46f)][_0x45b7e3(0xded)](this,_0x39f7b9))return!![];if(!Window_SkillList['prototype']['checkShowHideSwitchNotetags']['call'](this,_0x39f7b9))return!![];if(!Window_SkillList[_0x45b7e3(0xca4)][_0x45b7e3(0x358)][_0x45b7e3(0xded)](this,_0x39f7b9))return!![];}}return![];},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x6e9)]=function(_0x48136e){const _0x439383=_0x5c342f;if(!_0x48136e)return;if(!this[_0x439383(0x4ec)](_0x48136e))return;const _0x226b2c=this[_0x439383(0x5b7)](),_0x4dcb7f=DataManager[_0x439383(0xe09)](_0x48136e),_0x4ffb78=DataManager[_0x439383(0xbf9)](_0x48136e),_0x2df1be=_0x226b2c===_0x439383(0x911)?_0x4dcb7f:'\x5cI[%1]%2'[_0x439383(0x266)](_0x4ffb78,_0x4dcb7f),_0x22b0d3=this[_0x439383(0x465)][_0x439383(0x48e)](_0x48136e);this[_0x439383(0xb75)](_0x2df1be,_0x439383(0xc4f),_0x22b0d3,_0x48136e['id']);},Window_ActorCommand[_0x5c342f(0xca4)]['canAddSkillCommand']=function(_0x4590ee){const _0x5208f7=_0x5c342f,_0x1944e9=_0x4590ee[_0x5208f7(0x340)];if(_0x1944e9[_0x5208f7(0xcbd)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x5208f7(0x465)]['isLearnedSkill'](_0x4590ee['id']))return![];}if(_0x1944e9[_0x5208f7(0xcbd)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x5208f7(0x465)][_0x5208f7(0x4ef)](_0x4590ee['id']))return![];}const _0x5d1ed2=VisuMZ[_0x5208f7(0xca2)][_0x5208f7(0xdd1)](_0x4590ee,_0x5208f7(0x56c));if(VisuMZ[_0x5208f7(0xca2)]['JS'][_0x5d1ed2]){if(!VisuMZ[_0x5208f7(0xca2)]['JS'][_0x5d1ed2]['call'](this,this[_0x5208f7(0x465)],_0x4590ee))return![];}return VisuMZ[_0x5208f7(0xca2)]['CheckSkillCommandShowSwitches'](_0x4590ee);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x5cf)]=function(_0x18ba02){const _0x354a6d=_0x5c342f,_0x1d87a1=_0x18ba02[_0x354a6d(0x340)];if(_0x1d87a1[_0x354a6d(0xcbd)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xdafa7c=JSON[_0x354a6d(0xda6)]('['+RegExp['$1'][_0x354a6d(0xcbd)](/\d+/g)+']');for(const _0x38f7cc of _0xdafa7c){if(_0x354a6d(0x31e)!==_0x354a6d(0x790)){if(!$gameSwitches[_0x354a6d(0xbc0)](_0x38f7cc))return![];}else _0x40a289[_0x354a6d(0xa93)][_0x354a6d(0x88c)](_0x49187e);}return!![];}if(_0x1d87a1[_0x354a6d(0xcbd)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('kCZTh'==='LbNPH')_0x13f8c4[_0x354a6d(0xca2)][_0x354a6d(0xc90)]['Enemy'][_0x354a6d(0xb8b)]&&(this[_0x354a6d(0x216)]=new _0x4a030d(),this['addChild'](this[_0x354a6d(0x216)]));else{const _0x2cf70d=JSON['parse']('['+RegExp['$1'][_0x354a6d(0xcbd)](/\d+/g)+']');for(const _0x98390a of _0x2cf70d){if(!$gameSwitches['value'](_0x98390a))return![];}return!![];}}if(_0x1d87a1[_0x354a6d(0xcbd)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x354a6d(0x81d)===_0x354a6d(0xdc0))return[_0x39d450];else{const _0x267e43=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x7b8079 of _0x267e43){if($gameSwitches[_0x354a6d(0xbc0)](_0x7b8079))return!![];}return![];}}if(_0x1d87a1[_0x354a6d(0xcbd)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x363369=JSON['parse']('['+RegExp['$1'][_0x354a6d(0xcbd)](/\d+/g)+']');for(const _0x4dc222 of _0x363369){if(!$gameSwitches[_0x354a6d(0xbc0)](_0x4dc222))return!![];}return![];}if(_0x1d87a1['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xbade67=JSON[_0x354a6d(0xda6)]('['+RegExp['$1'][_0x354a6d(0xcbd)](/\d+/g)+']');for(const _0x1a6e9f of _0xbade67){if(!$gameSwitches[_0x354a6d(0xbc0)](_0x1a6e9f))return!![];}return![];}if(_0x1d87a1[_0x354a6d(0xcbd)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x109998=JSON[_0x354a6d(0xda6)]('['+RegExp['$1'][_0x354a6d(0xcbd)](/\d+/g)+']');for(const _0x3aada7 of _0x109998){if(_0x354a6d(0x6db)!==_0x354a6d(0x72c)){if($gameSwitches[_0x354a6d(0xbc0)](_0x3aada7))return![];}else _0x4e35e1[_0x354a6d(0xca2)][_0x354a6d(0xab7)][_0x354a6d(0xded)](this),this[_0x354a6d(0x40f)]=this[_0x354a6d(0x40f)]['filter'](_0x28fe2e=>_0x28fe2e&&_0x28fe2e[_0x354a6d(0xba9)]());}return!![];}return!![];},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x6f2)]=function(){const _0x13744f=_0x5c342f,_0x494218=this[_0x13744f(0x5b7)](),_0x53b6ce=VisuMZ['BattleCore'][_0x13744f(0xc90)]['PartyCmd']['CmdIconEscape'],_0x598e94=_0x494218==='text'?TextManager[_0x13744f(0xa5a)]:_0x13744f(0x973)[_0x13744f(0x266)](_0x53b6ce,TextManager[_0x13744f(0xa5a)]),_0x28a05d=this[_0x13744f(0xd01)]();this[_0x13744f(0xb75)](_0x598e94,_0x13744f(0xa5a),_0x28a05d);},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0xd01)]=function(){const _0x5b2787=_0x5c342f;return BattleManager[_0x5b2787(0x66b)]();},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x2c4)]=function(){const _0x46cd2f=_0x5c342f,_0x1f0144=this[_0x46cd2f(0x5b7)](),_0x523bd0=VisuMZ['BattleCore'][_0x46cd2f(0xc90)][_0x46cd2f(0x7e4)]['CmdIconAutoBattle'],_0x57213e=_0x1f0144===_0x46cd2f(0x911)?TextManager[_0x46cd2f(0x659)]:'\x5cI[%1]%2'[_0x46cd2f(0x266)](_0x523bd0,TextManager[_0x46cd2f(0x659)]),_0x29ce0e=this[_0x46cd2f(0x1cc)]();this[_0x46cd2f(0xb75)](_0x57213e,_0x46cd2f(0x659),_0x29ce0e);},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x1cc)]=function(){return!![];},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x770)]=function(){const _0x217278=_0x5c342f;return VisuMZ[_0x217278(0xca2)][_0x217278(0xc90)][_0x217278(0x890)][_0x217278(0x8bf)];},Window_ActorCommand['prototype'][_0x5c342f(0x686)]=function(_0x1794b8){const _0x38687c=_0x5c342f,_0x1e0896=this[_0x38687c(0x795)](_0x1794b8);if(_0x1e0896===_0x38687c(0xd2c)){if(_0x38687c(0x723)===_0x38687c(0x874))return this[_0x38687c(0x8c2)][_0x38687c(0xbb2)]();else this[_0x38687c(0x2ed)](_0x1794b8);}else _0x1e0896===_0x38687c(0x6e3)?this[_0x38687c(0xc45)](_0x1794b8):Window_Command[_0x38687c(0xca4)][_0x38687c(0x686)][_0x38687c(0xded)](this,_0x1794b8);this[_0x38687c(0x4e1)](_0x1794b8);},Window_ActorCommand['prototype'][_0x5c342f(0x5b7)]=function(){const _0x3c67ef=_0x5c342f;return VisuMZ[_0x3c67ef(0xca2)][_0x3c67ef(0xc90)][_0x3c67ef(0x890)][_0x3c67ef(0x77d)];},Window_ActorCommand[_0x5c342f(0xca4)]['commandStyleCheck']=function(_0x5061ae){const _0x523b9d=_0x5c342f;if(_0x5061ae<0x0)return _0x523b9d(0x911);const _0x3ce1d9=this['commandStyle']();if(_0x3ce1d9!=='auto')return _0x3ce1d9;else{if(this[_0x523b9d(0x70f)]()>0x0){if(_0x523b9d(0x18a)!==_0x523b9d(0x529)){const _0x3125eb=this[_0x523b9d(0x7a2)](_0x5061ae);if(_0x3125eb[_0x523b9d(0xcbd)](/\\I\[(\d+)\]/i)){if(_0x523b9d(0xc39)===_0x523b9d(0xc39)){const _0x4ef389=this[_0x523b9d(0x9eb)](_0x5061ae),_0x58e3f1=this[_0x523b9d(0x55e)](_0x3125eb)['width'];if(_0x58e3f1<=_0x4ef389[_0x523b9d(0x6e4)]){if(_0x523b9d(0x1bc)===_0x523b9d(0xc14))_0x5dfb33[_0x523b9d(0xca2)][_0x523b9d(0x1d8)][_0x523b9d(0xded)](this,_0x38bce4),this[_0x523b9d(0x24a)]();else return _0x523b9d(0xd2c);}else return _0x523b9d(0x6e3);}else this[_0x523b9d(0x2d5)]=new _0x551205(),this[_0x523b9d(0x2d5)]['x']=this[_0x523b9d(0x6d9)]['x'],this[_0x523b9d(0x2d5)]['y']=this[_0x523b9d(0x6d9)]['y'],this['addChild'](this['_damageContainer']);}}else _0x48d110[_0x523b9d(0xca4)][_0x523b9d(0x1e8)][_0x523b9d(0xded)](this),this['_enemyWindowMode']?this[_0x523b9d(0x3b4)]():_0x3fc8e1[_0x523b9d(0xca2)][_0x523b9d(0x637)][_0x523b9d(0xded)](this);}}return'text';},Window_ActorCommand[_0x5c342f(0xca4)]['drawItemStyleIconText']=function(_0x4ed016){const _0x25e042=_0x5c342f,_0x2decbd=this['itemLineRect'](_0x4ed016),_0x7c0e8b=this[_0x25e042(0x7a2)](_0x4ed016),_0x4f8f3b=this['textSizeEx'](_0x7c0e8b)[_0x25e042(0x6e4)];this[_0x25e042(0x760)](this[_0x25e042(0xcb0)](_0x4ed016));const _0x163543=this['itemTextAlign']();if(_0x163543===_0x25e042(0x1d7)){if(_0x25e042(0x6f5)!==_0x25e042(0x6f5)){if(!this[_0x25e042(0xbd5)]())return;if(!this['_distortionSprite'])return;if(this[_0x25e042(0xba4)]===_0x17c962&&this['_targetGrowY']===_0x4bbccc)return;this[_0x25e042(0xba4)]=_0x47d6e6,this['_targetGrowY']=_0x1a44aa,this[_0x25e042(0x295)]=_0x566dc9,this[_0x25e042(0x2e6)]=_0x57cd76,this[_0x25e042(0x855)]=_0xea2f29||_0x25e042(0x7bc),_0x377e4e<=0x0&&(this['_growX']=this[_0x25e042(0xba4)],this[_0x25e042(0x625)]=this[_0x25e042(0xdfd)]);}else this['drawTextEx'](_0x7c0e8b,_0x2decbd['x']+_0x2decbd[_0x25e042(0x6e4)]-_0x4f8f3b,_0x2decbd['y'],_0x4f8f3b);}else{if(_0x163543===_0x25e042(0x83a)){if('LLqNH'!==_0x25e042(0xe36)){const _0x5646b1=_0x2decbd['x']+Math[_0x25e042(0x9b3)]((_0x2decbd[_0x25e042(0x6e4)]-_0x4f8f3b)/0x2);this['drawTextEx'](_0x7c0e8b,_0x5646b1,_0x2decbd['y'],_0x4f8f3b);}else this[_0x25e042(0xde9)]=0x0;}else this[_0x25e042(0xb30)](_0x7c0e8b,_0x2decbd['x'],_0x2decbd['y'],_0x4f8f3b);}},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0xc45)]=function(_0x3542cf){const _0x3dd24b=_0x5c342f;this[_0x3dd24b(0x7a2)](_0x3542cf)[_0x3dd24b(0xcbd)](/\\I\[(\d+)\]/i);const _0x48dbc7=Number(RegExp['$1'])||0x0,_0x3f5671=this[_0x3dd24b(0x9eb)](_0x3542cf),_0x22b3bc=_0x3f5671['x']+Math[_0x3dd24b(0x9b3)]((_0x3f5671[_0x3dd24b(0x6e4)]-ImageManager[_0x3dd24b(0x6f8)])/0x2),_0x42c724=_0x3f5671['y']+(_0x3f5671[_0x3dd24b(0x880)]-ImageManager['iconHeight'])/0x2;this[_0x3dd24b(0xd9e)](_0x48dbc7,_0x22b3bc,_0x42c724);},Window_ActorCommand['prototype'][_0x5c342f(0x4e1)]=function(_0x2948e1){const _0x4e12d6=_0x5c342f;if(!(VisuMZ[_0x4e12d6(0xca2)][_0x4e12d6(0xc90)][_0x4e12d6(0x890)][_0x4e12d6(0xa53)]??!![]))return;const _0x1bec91=this[_0x4e12d6(0x957)](_0x2948e1);if(![_0x4e12d6(0x97a),_0x4e12d6(0xc98),_0x4e12d6(0xc4f)]['includes'](_0x1bec91))return;const _0xd410f0=this[_0x4e12d6(0x9eb)](_0x2948e1);let _0x3ea04e=null;if(_0x1bec91===_0x4e12d6(0x97a))_0x3ea04e=$dataSkills[this['_actor'][_0x4e12d6(0x25d)]()];else _0x1bec91===_0x4e12d6(0xc98)?_0x3ea04e=$dataSkills[this[_0x4e12d6(0x465)][_0x4e12d6(0x610)]()]:_0x3ea04e=$dataSkills[this[_0x4e12d6(0xb77)][_0x2948e1]['ext']];this[_0x4e12d6(0x34f)](this[_0x4e12d6(0x465)],_0x3ea04e,_0xd410f0['x'],_0xd410f0['y'],_0xd410f0[_0x4e12d6(0x6e4)]);},Window_ActorCommand['prototype'][_0x5c342f(0x34f)]=function(_0x99c07d,_0x4685ef,_0x18549c,_0x3796b0,_0x48cf63){const _0x3725a8=_0x5c342f;if(!_0x4685ef)return;Imported[_0x3725a8(0x3e0)]?Window_Command[_0x3725a8(0xca4)]['drawSkillCost']['call'](this,_0x99c07d,_0x4685ef,_0x18549c,_0x3796b0,_0x48cf63):_0x3725a8(0x715)!=='HXTdz'?Window_SkillList[_0x3725a8(0xca4)][_0x3725a8(0x34f)][_0x3725a8(0xded)](this,_0x4685ef,_0x18549c,_0x3796b0,_0x48cf63):this[_0x3725a8(0x843)]('performMagicEvasion',_0x472482);},Window_ActorCommand['prototype'][_0x5c342f(0xa29)]=function(){},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x5eb)]=function(){const _0x588a47=_0x5c342f;Window_Command['prototype'][_0x588a47(0x5eb)][_0x588a47(0xded)](this);const _0x43f2d9=this[_0x588a47(0xcf1)]();if(_0x43f2d9===_0x588a47(0x966)){if(_0x588a47(0xaf4)!=='csEhu')this[_0x588a47(0x2b0)]();else return!![];}},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0xcf1)]=function(){const _0x213ebf=_0x5c342f;if(this[_0x213ebf(0x1bd)])return this[_0x213ebf(0x1bd)];return this[_0x213ebf(0x1bd)]=SceneManager['_scene']['battleLayoutStyle'](),this['_battleLayoutStyle'];},VisuMZ['BattleCore'][_0x5c342f(0x45b)]=Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x5bd)],Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x5bd)]=function(_0x223d76){const _0x4cfb9a=_0x5c342f,_0x4a41bb=this[_0x4cfb9a(0xcf1)]();if(_0x223d76&&['xp',_0x4cfb9a(0x483)][_0x4cfb9a(0xaec)](_0x4a41bb))this['resizeWindowXPStyle'](_0x223d76);else _0x223d76&&[_0x4cfb9a(0x966)][_0x4cfb9a(0xaec)](_0x4a41bb)&&(this['resizeWindowBorderStyle'](_0x223d76),this['showHelpWindow']());VisuMZ[_0x4cfb9a(0xca2)]['Window_ActorCommand_setup']['call'](this,_0x223d76);if(_0x223d76&&$gameTroop[_0x4cfb9a(0x4e9)]()[_0x4cfb9a(0xc5c)]>0x0&&_0x223d76['battler']()){if(_0x4cfb9a(0xb68)===_0x4cfb9a(0xb68))_0x223d76[_0x4cfb9a(0x9d3)]()[_0x4cfb9a(0x632)]();else{const _0x123d1d=this['forActor']()?_0x4cfb9a(0xd33):_0x4cfb9a(0x31b);_0x224750['virtualClick'](_0x123d1d);}}},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0xd36)]=function(_0x5145d9){const _0x2800b2=_0x5c342f,_0x3ff7d3=VisuMZ[_0x2800b2(0xca2)]['Settings'][_0x2800b2(0xaa5)][_0x2800b2(0xb33)],_0x3f15e7=Math[_0x2800b2(0x5c1)](Graphics[_0x2800b2(0xba3)]/0x3),_0x5aab79=Math[_0x2800b2(0x5c1)](Graphics[_0x2800b2(0xba3)]/$gameParty[_0x2800b2(0xd90)]()['length']),_0x1b35fa=Math[_0x2800b2(0xaee)](Math[_0x2800b2(0x7b9)](_0x3f15e7,_0x5aab79),_0x3ff7d3),_0x347fa9=this['fittingHeight'](VisuMZ['BattleCore'][_0x2800b2(0xc90)][_0x2800b2(0xaa5)]['XPActorCommandLines']),_0x52068b=Math['floor']((Graphics[_0x2800b2(0xba3)]-Graphics[_0x2800b2(0x6e4)])/0x2),_0x11a1ab=Graphics['boxWidth']-_0x52068b,_0x2a4c93=(Math['round'](_0x5aab79*_0x5145d9[_0x2800b2(0x427)]())+Math[_0x2800b2(0x5c1)]((_0x5aab79-_0x1b35fa)/0x2))[_0x2800b2(0x3f8)](_0x52068b,_0x11a1ab-_0x1b35fa),_0x514ad2=Math[_0x2800b2(0x5c1)](SceneManager[_0x2800b2(0x201)]['_statusWindow']['y']-_0x347fa9);this[_0x2800b2(0x579)](_0x2a4c93,_0x514ad2,_0x1b35fa,_0x347fa9),this[_0x2800b2(0xc5d)](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x60f)]=function(_0x4524d6){const _0x34b067=_0x5c342f,_0x77ee88=SceneManager['_scene'][_0x34b067(0x194)]();this[_0x34b067(0x579)](_0x77ee88['x'],_0x77ee88['y'],_0x77ee88['width'],_0x77ee88[_0x34b067(0x880)]),this[_0x34b067(0xc5d)](),this[_0x34b067(0x623)](0x0);},Window_ActorCommand['prototype']['refreshDimmerBitmap']=function(){const _0x385a1e=_0x5c342f;if(this['_dimmerSprite']){if(_0x385a1e(0xdb9)!==_0x385a1e(0x2b3)){const _0xa10c32=this[_0x385a1e(0x841)][_0x385a1e(0x812)],_0x59c265=this[_0x385a1e(0x6e4)]-0x8,_0x2e68f5=this['height'],_0x38f5ed=this[_0x385a1e(0xde9)],_0xada4d2=ColorManager['dimColor1'](),_0x4616be=ColorManager[_0x385a1e(0x705)]();this[_0x385a1e(0x841)]['x']=0x4,_0xa10c32[_0x385a1e(0x227)](_0x59c265,_0x2e68f5),_0xa10c32[_0x385a1e(0xcfb)](0x0,0x0,_0x59c265,_0x38f5ed,_0x4616be,_0xada4d2,!![]),_0xa10c32[_0x385a1e(0x17a)](0x0,_0x38f5ed,_0x59c265,_0x2e68f5-_0x38f5ed*0x2,_0xada4d2),_0xa10c32[_0x385a1e(0xcfb)](0x0,_0x2e68f5-_0x38f5ed,_0x59c265,_0x38f5ed,_0xada4d2,_0x4616be,!![]),this['_dimmerSprite'][_0x385a1e(0x79b)](0x0,0x0,_0x59c265,_0x2e68f5);}else this[_0x385a1e(0x6e6)]()&&(this[_0x385a1e(0x3d3)]=!![]),_0x2c816f[_0x385a1e(0xca2)][_0x385a1e(0x572)][_0x385a1e(0xded)](this),this[_0x385a1e(0xb35)]();}},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x1d3)]=function(){const _0x237b17=_0x5c342f;if(!this[_0x237b17(0x465)])return;const _0x2017b4=VisuMZ[_0x237b17(0xca2)][_0x237b17(0xc90)][_0x237b17(0x890)],_0x22f1b9=this[_0x237b17(0x36c)]();switch(_0x22f1b9){case _0x237b17(0x97a):this['setHelpWindowItem']($dataSkills[this[_0x237b17(0x465)]['attackSkillId']()]);break;case _0x237b17(0xc98):this[_0x237b17(0x78b)]($dataSkills[this['_actor'][_0x237b17(0x610)]()]);break;case _0x237b17(0x802):const _0x284150=_0x2017b4[_0x237b17(0x87c)],_0x3828cf=_0x284150[_0x237b17(0x266)]($dataSystem[_0x237b17(0xd7f)][this['currentExt']()]);this[_0x237b17(0xbec)][_0x237b17(0x938)](_0x3828cf);break;case _0x237b17(0xc4f):this[_0x237b17(0x78b)]($dataSkills[this[_0x237b17(0xd29)]()]);break;case _0x237b17(0xa87):this[_0x237b17(0xbec)][_0x237b17(0x938)](_0x2017b4['HelpItem']);break;case'escape':this['_helpWindow'][_0x237b17(0x938)](_0x2017b4[_0x237b17(0xd26)]);break;case'autoBattle':this[_0x237b17(0xbec)][_0x237b17(0x938)](_0x2017b4[_0x237b17(0x221)]);break;default:this[_0x237b17(0xbec)][_0x237b17(0x938)]('');break;}},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x6a0)]=function(){const _0x1ec2f0=_0x5c342f;this[_0x1ec2f0(0xdcb)](0x0);if(this['_actor']&&ConfigManager[_0x1ec2f0(0x994)]){if('BfvLA'===_0x1ec2f0(0x8ab))_0x3a48f4[_0x1ec2f0(0x201)][_0x1ec2f0(0x338)]['removeDamageSprite'](_0x31335f);else{const _0x506584=this[_0x1ec2f0(0x465)][_0x1ec2f0(0x303)]();this['selectSymbol'](_0x506584);if(_0x506584===_0x1ec2f0(0x802)){if(_0x1ec2f0(0x674)!==_0x1ec2f0(0x674))_0x3366c0[_0x1ec2f0(0xa1e)](_0x18e2b8),this['makeSuccess'](_0x16ae42);else{const _0x2312a6=this[_0x1ec2f0(0x465)][_0x1ec2f0(0x641)]();if(_0x2312a6){if(_0x1ec2f0(0x31f)===_0x1ec2f0(0x31f)){const _0xfcbee2=this[_0x1ec2f0(0x899)]('skill',_0x2312a6[_0x1ec2f0(0x8aa)]);this[_0x1ec2f0(0x908)](_0xfcbee2||0x0);}else return this[_0x1ec2f0(0x8e7)](_0x9b396a);}}}else{if(_0x506584===_0x1ec2f0(0xc4f)){const _0x24a557=this[_0x1ec2f0(0x465)][_0x1ec2f0(0x641)]();if(_0x24a557){if(_0x1ec2f0(0xd44)!=='BazIb')this[_0x1ec2f0(0x40a)]('chant');else{const _0x9fd2e4=this[_0x1ec2f0(0x899)](_0x1ec2f0(0xc4f),_0x24a557['id']);this[_0x1ec2f0(0x908)](_0x9fd2e4||0x0);}}}}}}},Window_ActorCommand[_0x5c342f(0xca4)][_0x5c342f(0x899)]=function(_0x334225,_0x2e28db){const _0x40e6aa=_0x5c342f;return this[_0x40e6aa(0xb77)][_0x40e6aa(0x7cc)](_0x1e563a=>_0x1e563a['symbol']===_0x334225&&_0x1e563a[_0x40e6aa(0xb87)]===_0x2e28db);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x37f)]=Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xd5a)],Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xd5a)]=function(_0x2ec432){const _0x23af17=_0x5c342f;VisuMZ[_0x23af17(0xca2)][_0x23af17(0x37f)]['call'](this,_0x2ec432),this[_0x23af17(0xcda)](),this[_0x23af17(0x521)]();},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xcf1)]=function(){const _0x3f4d41=_0x5c342f;if(this['_battleLayoutStyle'])return this[_0x3f4d41(0x1bd)];return this['_battleLayoutStyle']=SceneManager['_scene'][_0x3f4d41(0xcf1)](),this[_0x3f4d41(0x1bd)];},Window_BattleStatus['prototype'][_0x5c342f(0xcda)]=function(){const _0x474ffc=_0x5c342f;this['frameVisible']=this['isFrameVisible']();const _0x41c088=VisuMZ[_0x474ffc(0xca2)][_0x474ffc(0xc90)]['BattleLayout'];if(_0x41c088[_0x474ffc(0x965)]){if(_0x474ffc(0x20d)!=='DZybR')this[_0x474ffc(0xc0c)]=0x0;else return this[_0x474ffc(0x864)]();}},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x1a4)]=function(){const _0x31b132=_0x5c342f,_0x27b0dd=VisuMZ['BattleCore'][_0x31b132(0xc90)]['BattleLayout'];if(_0x27b0dd['StatusWindowSkinFilename'])return!![];const _0x37875f=this[_0x31b132(0xcf1)]();switch(_0x37875f){case _0x31b132(0x594):case _0x31b132(0x966):return!![];break;case _0x31b132(0x4e4):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x7bf)]=function(){const _0x15121c=_0x5c342f;if(this['isFrameVisible']()){if('KPsIM'!==_0x15121c(0xb99))this['cancelActorInput'](),this[_0x15121c(0x4f5)]=null,this['_inputting']=![];else return 0x0;}else return 0xa;},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x52c)]=function(){const _0x342028=_0x5c342f,_0x36a62f=this[_0x342028(0xcf1)]();switch(_0x36a62f){case'list':return 0x1;break;case'xp':case'portrait':return $gameParty[_0x342028(0xd90)]()[_0x342028(0xc5c)];break;case _0x342028(0x4e4):default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus['prototype'][_0x5c342f(0x98b)]=function(){const _0x132fe0=_0x5c342f,_0x4c80dc=this[_0x132fe0(0xcf1)]();switch(_0x4c80dc){case _0x132fe0(0x594):return Window_StatusBase['prototype'][_0x132fe0(0x98b)]['call'](this);break;case _0x132fe0(0x4e4):case'xp':case _0x132fe0(0x483):default:return this[_0x132fe0(0x2d2)];break;}},Window_BattleStatus['prototype'][_0x5c342f(0x947)]=function(){const _0x31fe7a=_0x5c342f,_0x14d5d5=this[_0x31fe7a(0xcf1)]();switch(_0x14d5d5){case _0x31fe7a(0x594):return Window_StatusBase['prototype'][_0x31fe7a(0x947)][_0x31fe7a(0xded)](this);break;case'default':case'xp':case _0x31fe7a(0x483):default:return 0x0;break;}},Window_BattleStatus[_0x5c342f(0xca4)]['updatePadding']=function(){const _0x18cf90=_0x5c342f;if(this[_0x18cf90(0x1a4)]()){if(_0x18cf90(0x3d8)===_0x18cf90(0x2cb)){const _0x15c60d=_0x124dbc[_0x18cf90(0xca2)][_0x18cf90(0xc90)][_0x18cf90(0x535)],_0x2735b7=_0x15c60d[_0x18cf90(0x5b1)];_0x2735b7&&_0x1c43c6[_0x18cf90(0xca2)]['CheckMapBattleEventValid'](_0x2735b7)&&(this[_0x18cf90(0x269)]=!![],_0x27e5f2[_0x18cf90(0x580)](_0x15c60d[_0x18cf90(0x5b1)]),_0x557758['updateInterpreter'](),_0x835094[_0x18cf90(0xb7e)][_0x18cf90(0xbae)]=!![]),_0x15c60d[_0x18cf90(0x3aa)]>0x0&&(this[_0x18cf90(0xd2a)]=!![]);}else Window_StatusBase['prototype'][_0x18cf90(0x50d)][_0x18cf90(0xded)](this);}else this[_0x18cf90(0xde9)]=0x8;},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xcf2)]=function(){const _0x907ff6=_0x5c342f,_0x44ac55=VisuMZ[_0x907ff6(0xca2)]['Settings'][_0x907ff6(0xaa5)];_0x44ac55[_0x907ff6(0xae4)]?this[_0x907ff6(0x743)]=ImageManager[_0x907ff6(0x498)](_0x44ac55[_0x907ff6(0xae4)]):Window_StatusBase[_0x907ff6(0xca4)][_0x907ff6(0xcf2)]['call'](this);},Window_BattleStatus[_0x5c342f(0xca4)]['drawItemBackground']=function(_0x53bb57){const _0x2932d8=_0x5c342f,_0x1b1818=VisuMZ[_0x2932d8(0xca2)][_0x2932d8(0xc90)]['BattleLayout'];if(_0x1b1818[_0x2932d8(0x636)])return;Window_StatusBase[_0x2932d8(0xca4)][_0x2932d8(0x3d4)][_0x2932d8(0xded)](this,_0x53bb57);},Window_BattleStatus[_0x5c342f(0xca4)]['requestRefresh']=function(){const _0x5287d5=_0x5c342f;this[_0x5287d5(0xa79)]=!![];},Window_BattleStatus['prototype'][_0x5c342f(0x2a5)]=function(){const _0x5cc2e4=_0x5c342f;Window_StatusBase[_0x5cc2e4(0xca4)]['update'][_0x5cc2e4(0xded)](this),this[_0x5cc2e4(0x577)](),this[_0x5cc2e4(0x9aa)]();if(this[_0x5cc2e4(0xcf1)]()===_0x5cc2e4(0x966))this[_0x5cc2e4(0xcbc)]();},Window_BattleStatus['prototype'][_0x5c342f(0x577)]=function(){const _0x472e07=_0x5c342f;if($gameTemp[_0x472e07(0x214)]()){if('xZIyh'===_0x472e07(0x19d)){if(!_0x4a89fc[_0x472e07(0xca2)][_0x472e07(0xc90)][_0x472e07(0x831)][_0x472e07(0x6da)])return;_0x213427[_0x472e07(0xca2)][_0x472e07(0xc0b)][_0x472e07(0xded)](this,_0x3e113f);}else this['preparePartyRefresh'](),this['_requestRefresh']=![],$gameTemp[_0x472e07(0xda7)]();}else this[_0x472e07(0xa79)]&&(this[_0x472e07(0xa79)]=![],this[_0x472e07(0x4af)](),this[_0x472e07(0xcfc)]());},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x828)]=function(){const _0x4ba2d9=_0x5c342f;Window_StatusBase[_0x4ba2d9(0xca4)][_0x4ba2d9(0x828)]['call'](this);if(!$gameSystem[_0x4ba2d9(0x9a3)]())this[_0x4ba2d9(0x4af)]();},Window_BattleStatus['prototype'][_0x5c342f(0xa29)]=function(){const _0x8c37a7=_0x5c342f;if(this[_0x8c37a7(0x43e)]===Window_BattleStatus)return;Window_StatusBase[_0x8c37a7(0xca4)][_0x8c37a7(0xa29)]['call'](this);},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x37a)]=function(_0x4b1754){const _0x3102c3=_0x5c342f,_0xacd8bb=this[_0x3102c3(0xcf1)]();switch(_0xacd8bb){case'xp':case _0x3102c3(0x483):break;case _0x3102c3(0x4e4):case'list':case _0x3102c3(0x966):default:return Window_StatusBase[_0x3102c3(0xca4)][_0x3102c3(0x37a)]['call'](this,_0x4b1754);break;}},VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xd32)],Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xd32)]=function(_0x552542){const _0x3024cf=_0x5c342f,_0x310759=this[_0x3024cf(0xcf1)]();switch(_0x310759){case'list':this[_0x3024cf(0x5ef)](_0x552542);break;case'xp':this['drawItemImageXPStyle'](_0x552542);break;case _0x3024cf(0x483):this[_0x3024cf(0xb73)](_0x552542);break;case _0x3024cf(0x4e4):case _0x3024cf(0x966):default:VisuMZ[_0x3024cf(0xca2)][_0x3024cf(0x9ff)][_0x3024cf(0xded)](this,_0x552542);break;}},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x662)]=function(_0x740348){const _0x9a2eba=_0x5c342f,_0x474fd8=this[_0x9a2eba(0xcf1)]();if(!$gameSystem[_0x9a2eba(0x9a3)]())this[_0x9a2eba(0x186)](_0x740348);switch(_0x474fd8){case _0x9a2eba(0x594):this['drawItemStatusListStyle'](_0x740348);break;case'xp':case'portrait':case _0x9a2eba(0x4e4):case _0x9a2eba(0x966):default:this[_0x9a2eba(0x39b)](_0x740348);break;}},Window_BattleStatus['prototype'][_0x5c342f(0x704)]=function(){const _0x26c1d8=_0x5c342f,_0x24f1cc=this[_0x26c1d8(0xcf1)]();if(['xp'][_0x26c1d8(0xaec)](_0x24f1cc)&&!$gameSystem[_0x26c1d8(0x9a3)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x26c1d8(0xca4)]['refreshCursor']['call'](this);},Window_BattleStatus['prototype'][_0x5c342f(0x186)]=function(_0xe5c978){const _0xbe00a9=_0x5c342f,_0x292a21=this['actor'](_0xe5c978)[_0xbe00a9(0x9d3)]();if(!_0x292a21)return;const _0x4c86da=this['battleLayoutStyle'](),_0x2b1f67=this['itemRect'](_0xe5c978);let _0x536f05=Math[_0xbe00a9(0x5c1)](_0x2b1f67['x']+_0x2b1f67[_0xbe00a9(0x6e4)]/0x2)+this['padding'];[_0xbe00a9(0x594)][_0xbe00a9(0xaec)](_0x4c86da)&&(_0x536f05=_0x2b1f67[_0xbe00a9(0x6e4)]/$gameParty[_0xbe00a9(0xd90)]()[_0xbe00a9(0xc5c)],_0x536f05*=_0xe5c978,_0x536f05+=_0x2b1f67[_0xbe00a9(0x6e4)]/$gameParty[_0xbe00a9(0xd90)]()[_0xbe00a9(0xc5c)]/0x2);let _0x1595e5=Math[_0xbe00a9(0x5c1)](this['frontviewSpriteY'](_0xe5c978,_0x292a21,_0x2b1f67));_0x292a21[_0xbe00a9(0x2a0)](_0x536f05,_0x1595e5),this[_0xbe00a9(0x619)](_0x292a21,0x1),_0x292a21[_0xbe00a9(0x828)](),this[_0xbe00a9(0x78a)](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xbee)]=function(_0x12d9b5,_0xf91c1e,_0x406658){const _0xccc0f3=_0x5c342f,_0x18e473=VisuMZ['BattleCore'][_0xccc0f3(0xc90)][_0xccc0f3(0xaa5)],_0x2ef727=this[_0xccc0f3(0xcf1)]();if(_0x2ef727==='xp'){if(_0xccc0f3(0x837)===_0xccc0f3(0x837)){const _0x33c072=_0x18e473[_0xccc0f3(0x4c5)];switch(_0x33c072[_0xccc0f3(0xda0)]()[_0xccc0f3(0xa5e)]()){case _0xccc0f3(0xbc7):return _0x406658[_0xccc0f3(0x880)]-_0xf91c1e[_0xccc0f3(0x811)][_0xccc0f3(0x880)]/0x4;break;case _0xccc0f3(0x83a):const _0x50360b=_0x18e473[_0xccc0f3(0x7d3)];return(_0x406658[_0xccc0f3(0x880)]+(_0xf91c1e['height']||_0x50360b))/0x2;break;case _0xccc0f3(0x6e8):return 0x0;case'name':default:return this[_0xccc0f3(0x470)](_0x406658);break;}}else this[_0xccc0f3(0x843)]('fnordRemovedStates'),this[_0xccc0f3(0x843)](_0xccc0f3(0x3c2)),this[_0xccc0f3(0x843)](_0xccc0f3(0x236)),this[_0xccc0f3(0x843)](_0xccc0f3(0x3ff),_0x49c699['message4'][_0xccc0f3(0x266)](_0xd8da44[_0xccc0f3(0x25e)]())),this[_0xccc0f3(0x843)](_0xccc0f3(0x630));}else{if(_0x2ef727===_0xccc0f3(0x483)){}}return _0xf91c1e[_0xccc0f3(0x880)];},Sprite_Name[_0x5c342f(0xca4)][_0x5c342f(0x3cb)]=function(){return 0x24;},Sprite_Name[_0x5c342f(0xca4)][_0x5c342f(0x6bf)]=function(){const _0x24e930=_0x5c342f,_0x18d2d9=this[_0x24e930(0x25e)](),_0x56d22a=this[_0x24e930(0x3e5)](),_0x40f8f4=this[_0x24e930(0x3cb)]();this[_0x24e930(0xdac)](),this[_0x24e930(0x812)][_0x24e930(0xa52)](),this[_0x24e930(0x812)][_0x24e930(0x6a9)](_0x18d2d9,0x4,0x0,_0x56d22a,_0x40f8f4,'left');},Bitmap['prototype'][_0x5c342f(0x6a9)]=function(_0x525868,_0x3e1c74,_0x5c9b93,_0x32d26d,_0x3b9a35,_0x4369be){const _0x1fde5b=_0x5c342f;TextManager['parseLocalizedText']&&(_0x525868=TextManager[_0x1fde5b(0x8e9)](_0x525868));const _0x4272bc=this[_0x1fde5b(0x241)],_0x170299=_0x4272bc[_0x1fde5b(0x47d)];_0x32d26d=_0x32d26d||0xffffffff;let _0x592969=_0x3e1c74,_0x54554=Math['round'](_0x5c9b93+0x18/0x2+this[_0x1fde5b(0xa91)]*0.35);_0x4369be===_0x1fde5b(0x83a)&&(_0x592969+=_0x32d26d/0x2);if(_0x4369be===_0x1fde5b(0x1d7)){if(_0x1fde5b(0x671)==='igJjF'){if(!_0x2ec5a0['isSceneBattle']())return;_0x592ce1['ConvertParams'](_0x3d6a13,_0x16436a);const _0x4657b1=_0x2a0548[_0x1fde5b(0x56f)],_0x20ef4c=_0x5bab5d[_0x1fde5b(0x1f9)]&&_0x48d11a[_0x1fde5b(0x629)];_0x4657b1[_0x1fde5b(0x3ff)](_0x34194a[_0x1fde5b(0x491)]),_0x20ef4c&&_0x2cc6cb[_0x1fde5b(0x629)]&&_0x139beb[_0x1fde5b(0xa0e)](_0x142df3[_0x1fde5b(0x491)]||'',_0x417040[_0x1fde5b(0x573)]||0x0);}else _0x592969+=_0x32d26d;}_0x4272bc['save'](),_0x4272bc[_0x1fde5b(0xb4c)]=this[_0x1fde5b(0xa1a)](),_0x4272bc[_0x1fde5b(0x359)]=_0x4369be,_0x4272bc[_0x1fde5b(0x6ae)]=_0x1fde5b(0xb82),_0x4272bc[_0x1fde5b(0x47d)]=0x1,this[_0x1fde5b(0xae3)](_0x525868,_0x592969,_0x54554,_0x32d26d),_0x4272bc[_0x1fde5b(0x47d)]=_0x170299,this[_0x1fde5b(0x1bb)](_0x525868,_0x592969,_0x54554,_0x32d26d),_0x4272bc[_0x1fde5b(0x81b)](),this['_baseTexture']['update']();},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x470)]=function(_0x2985c7){const _0x400ff1=_0x5c342f;return this['basicGaugesY'](_0x2985c7)-this[_0x400ff1(0xd87)]();},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x5ef)]=function(_0x2f5153){const _0x1edbef=_0x5c342f;if(!VisuMZ[_0x1edbef(0xca2)]['Settings'][_0x1edbef(0xaa5)][_0x1edbef(0x689)])return;const _0x17cf5c=this[_0x1edbef(0x761)](_0x2f5153),_0x2406cb=this[_0x1edbef(0x7c0)](_0x2f5153);_0x2406cb[_0x1edbef(0x6e4)]=ImageManager[_0x1edbef(0x61d)],_0x2406cb[_0x1edbef(0x880)]-=0x2,this[_0x1edbef(0xb67)](_0x17cf5c,_0x2406cb['x']+0x1,_0x2406cb['y']+0x1,_0x2406cb[_0x1edbef(0x6e4)],_0x2406cb['height']);},Window_BattleStatus[_0x5c342f(0xca4)]['drawItemStatusListStyle']=function(_0x5a545d){const _0x2e9dcf=_0x5c342f,_0x5dc4fb=VisuMZ[_0x2e9dcf(0xca2)][_0x2e9dcf(0xc90)][_0x2e9dcf(0xaa5)],_0x55bd3d=$dataSystem['optDisplayTp']?0x4:0x3,_0x2afdc3=_0x55bd3d*0x80+(_0x55bd3d-0x1)*0x8+0x4,_0x5ec8c8=this[_0x2e9dcf(0x761)](_0x5a545d),_0x695360=this[_0x2e9dcf(0x7c0)](_0x5a545d);let _0x3c6ca9=_0x695360['x']+this[_0x2e9dcf(0xde9)];_0x5dc4fb[_0x2e9dcf(0x689)]?_0x3c6ca9=_0x695360['x']+ImageManager[_0x2e9dcf(0x61d)]+0x8:_0x3c6ca9+=ImageManager[_0x2e9dcf(0x6f8)];const _0x1351b8=Math[_0x2e9dcf(0x5c1)](Math['min'](_0x695360['x']+_0x695360[_0x2e9dcf(0x6e4)]-_0x2afdc3,_0x3c6ca9)),_0x494837=Math[_0x2e9dcf(0x5c1)](_0x695360['y']+(_0x695360[_0x2e9dcf(0x880)]-Sprite_Name[_0x2e9dcf(0xca4)][_0x2e9dcf(0x3cb)]())/0x2),_0x5f0d7b=Math[_0x2e9dcf(0x5c1)](_0x1351b8-ImageManager[_0x2e9dcf(0x6f8)]/0x2-0x4),_0x2c165c=Math[_0x2e9dcf(0x5c1)](_0x695360['y']+(_0x695360['height']-ImageManager[_0x2e9dcf(0xcdf)])/0x2+ImageManager[_0x2e9dcf(0xcdf)]/0x2);let _0x3e6cf0=_0x1351b8+0x88;const _0x132823=_0x494837;this[_0x2e9dcf(0x23f)](_0x5ec8c8,_0x1351b8-0x4+(_0x5dc4fb[_0x2e9dcf(0xbea)]||0x0),_0x494837+(_0x5dc4fb[_0x2e9dcf(0x8e6)]||0x0)),this[_0x2e9dcf(0x1e7)](_0x5ec8c8,_0x1351b8+(_0x5dc4fb[_0x2e9dcf(0xd2f)]||0x0),_0x494837+(_0x5dc4fb[_0x2e9dcf(0x642)]||0x0)),this[_0x2e9dcf(0xadb)](_0x5ec8c8,_0x5f0d7b+(_0x5dc4fb[_0x2e9dcf(0xb72)]||0x0),_0x2c165c+(_0x5dc4fb[_0x2e9dcf(0x876)]||0x0)),this['placeGauge'](_0x5ec8c8,'hp',_0x3e6cf0+0x88*0x0+(_0x5dc4fb[_0x2e9dcf(0x634)]||0x0),_0x132823+(_0x5dc4fb[_0x2e9dcf(0xdee)]||0x0)),this[_0x2e9dcf(0x273)](_0x5ec8c8,'mp',_0x3e6cf0+0x88*0x1+(_0x5dc4fb[_0x2e9dcf(0x8f6)]||0x0),_0x132823+(_0x5dc4fb[_0x2e9dcf(0xa61)]||0x0)),$dataSystem[_0x2e9dcf(0xd42)]&&this[_0x2e9dcf(0x273)](_0x5ec8c8,'tp',_0x3e6cf0+0x88*0x2+(_0x5dc4fb[_0x2e9dcf(0x270)]||0x0),_0x132823+(_0x5dc4fb[_0x2e9dcf(0x68b)]||0x0));},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xcdc)]=function(_0x329879){const _0x466d49=_0x5c342f;if(!$gameSystem[_0x466d49(0x9a3)]())return;VisuMZ['BattleCore'][_0x466d49(0x9ff)][_0x466d49(0xded)](this,_0x329879);},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x39b)]=function(_0x23a037){const _0x5061d3=_0x5c342f,_0x42d111=VisuMZ[_0x5061d3(0xca2)][_0x5061d3(0xc90)][_0x5061d3(0xaa5)],_0x85302d=this[_0x5061d3(0x761)](_0x23a037),_0x100d6b=this['itemRect'](_0x23a037),_0x3c5988=Math[_0x5061d3(0x5c1)](_0x100d6b['x']+(_0x100d6b[_0x5061d3(0x6e4)]-0x80)/0x2),_0x4e9315=this[_0x5061d3(0x470)](_0x100d6b);let _0x2eba75=_0x3c5988-ImageManager[_0x5061d3(0x6f8)]/0x2-0x4,_0x364859=_0x4e9315+ImageManager[_0x5061d3(0xcdf)]/0x2;if(_0x2eba75-ImageManager['iconWidth']/0x2<_0x100d6b['x']){if('XfLvM'!==_0x5061d3(0xc93)){let _0x421b54=_0xf3bb51(_0x255e1b['$1']);while(_0x421b54--){_0x20c410[_0x5061d3(0x843)](this['friendsUnit']()[_0x5061d3(0x8eb)]());}return this[_0x5061d3(0xce4)](_0x14b64c);}else _0x2eba75=_0x3c5988+ImageManager[_0x5061d3(0x6f8)]/0x2-0x4,_0x364859=_0x4e9315-ImageManager[_0x5061d3(0xcdf)]/0x2;}const _0x5424b5=_0x3c5988,_0x544749=this[_0x5061d3(0x58e)](_0x100d6b);this[_0x5061d3(0x23f)](_0x85302d,_0x3c5988+(_0x42d111[_0x5061d3(0xbea)]||0x0),_0x4e9315+(_0x42d111['TpbGaugeOffsetY']||0x0)),this['placeActorName'](_0x85302d,_0x3c5988+(_0x42d111['NameOffsetX']||0x0),_0x4e9315+(_0x42d111[_0x5061d3(0x642)]||0x0)),this['placeStateIcon'](_0x85302d,_0x2eba75+(_0x42d111['StateIconOffsetX']||0x0),_0x364859+(_0x42d111[_0x5061d3(0x876)]||0x0)),this[_0x5061d3(0x273)](_0x85302d,'hp',_0x5424b5+(_0x42d111[_0x5061d3(0x634)]||0x0),_0x544749+(_0x42d111[_0x5061d3(0xdee)]||0x0)),this[_0x5061d3(0x273)](_0x85302d,'mp',_0x5424b5+(_0x42d111['MpGaugeOffsetX']||0x0),_0x544749+this[_0x5061d3(0xd87)]()+(_0x42d111[_0x5061d3(0xa61)]||0x0)),$dataSystem[_0x5061d3(0xd42)]&&(_0x5061d3(0x77b)==='mCEQE'?this[_0x5061d3(0x34e)]():this[_0x5061d3(0x273)](_0x85302d,'tp',_0x5424b5+(_0x42d111[_0x5061d3(0x270)]||0x0),_0x544749+this['gaugeLineHeight']()*0x2+(_0x42d111[_0x5061d3(0x68b)]||0x0)));},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xcf7)]=function(_0x5202b0){const _0x11a782=_0x5c342f;if(!VisuMZ[_0x11a782(0xca2)][_0x11a782(0xc90)][_0x11a782(0xaa5)]['ShowPortraits'])return![];if(_0x5202b0[_0x11a782(0xd92)]())return!![];return Imported[_0x11a782(0xb2a)]&&_0x5202b0[_0x11a782(0x6dc)]();},Game_Actor[_0x5c342f(0xca4)]['getBattlePortraitOffsetX']=function(){const _0xa8cb0a=_0x5c342f;if(this[_0xa8cb0a(0x761)]()[_0xa8cb0a(0x340)][_0xa8cb0a(0xcbd)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0xa8cb0a(0x340)][_0xa8cb0a(0xcbd)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x5c342f(0xca4)][_0x5c342f(0xd0f)]=function(){const _0x126778=_0x5c342f;if(this[_0x126778(0x761)]()[_0x126778(0x340)][_0x126778(0xcbd)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x126778(0x6ce)!==_0x126778(0x74d)?Number(RegExp['$1']):_0x342d2b['VisuMZ_0_CoreEngine']?_0x106a79[_0x126778(0xd1e)]('ok'):_0x431633['BattleCore'][_0x126778(0xc90)]['AutoBattle'][_0x126778(0x93e)];else{if(this['actor']()[_0x126778(0x340)][_0x126778(0xcbd)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x126778(0xc77)===_0x126778(0xc77))return Number(RegExp['$2']);else{if(_0x309df4[_0x126778(0xbc6)]&&_0x3fe2c7['isBattleTest']())return!![];if(this[_0x126778(0xca5)][_0x126778(0xa18)])return![];return this[_0x126778(0xca5)][_0x126778(0x2f0)]();}}}return 0x0;},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xb73)]=function(_0x29097b){const _0x4e2c15=_0x5c342f,_0x4534fe=this[_0x4e2c15(0x761)](_0x29097b);if(this[_0x4e2c15(0xcf7)](_0x4534fe)){const _0x4cc575=_0x4e2c15(0x873)['format'](_0x4534fe[_0x4e2c15(0xd99)]()),_0x356c50=this[_0x4e2c15(0x72e)](_0x4cc575,Sprite),_0x4f121c=_0x4534fe[_0x4e2c15(0x23e)]();_0x4f121c!==''?_0x356c50[_0x4e2c15(0x812)]=ImageManager['loadPicture'](_0x4f121c):_0x356c50['bitmap']=ImageManager[_0x4e2c15(0xa77)];const _0x457014=this[_0x4e2c15(0x7c0)](_0x29097b);_0x356c50[_0x4e2c15(0xaab)]['x']=0.5,_0x356c50[_0x4e2c15(0xaab)]['y']=0x1;let _0x4382f0=Math[_0x4e2c15(0x5c1)](_0x457014['x']+_0x457014[_0x4e2c15(0x6e4)]/0x2)+this[_0x4e2c15(0xde9)];_0x4382f0+=_0x4534fe[_0x4e2c15(0x76c)]();let _0x12fcad=Math[_0x4e2c15(0x5c1)](this[_0x4e2c15(0x880)]);_0x12fcad+=_0x4534fe[_0x4e2c15(0xd0f)](),_0x356c50[_0x4e2c15(0x579)](_0x4382f0,_0x12fcad);const _0x4cc0b7=VisuMZ[_0x4e2c15(0xca2)]['Settings'][_0x4e2c15(0xaa5)]['PortraitScale'];_0x356c50[_0x4e2c15(0x339)]['x']=_0x4cc0b7,_0x356c50[_0x4e2c15(0x339)]['y']=_0x4cc0b7,_0x356c50[_0x4e2c15(0x828)]();}else{const _0xd66a91=this[_0x4e2c15(0xb4a)](_0x29097b);this[_0x4e2c15(0xb67)](_0x4534fe,_0xd66a91['x'],_0xd66a91['y'],_0xd66a91[_0x4e2c15(0x6e4)],_0xd66a91[_0x4e2c15(0x880)]);}},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x72e)]=function(_0x759c28,_0x5b5fa5){const _0x152c3c=_0x5c342f,_0x50749c=this['_additionalSprites'];if(_0x50749c[_0x759c28]){if(_0x152c3c(0x92c)!==_0x152c3c(0x92c))this[_0x152c3c(0xca5)]['isSpriteVisible']()&&this[_0x152c3c(0xd94)]();else return _0x50749c[_0x759c28];}else{if(_0x152c3c(0x6e5)==='nELRQ'){const _0x5ac64a=new _0x5b5fa5();return _0x50749c[_0x759c28]=_0x5ac64a,this['addChildToBack'](_0x5ac64a),this[_0x152c3c(0x61b)](this[_0x152c3c(0x6cd)]),_0x5ac64a;}else{const _0x52d925=_0x1185ca[_0x152c3c(0xca2)]['Settings'][_0x152c3c(0xe29)];this[_0x152c3c(0x52d)]=_0x14448b[_0x152c3c(0xc9d)]((_0x52d925[_0x152c3c(0x464)]??0x18)*_0x481c78),this[_0x152c3c(0x9db)]=_0x5fb6f0[_0x152c3c(0xaee)](this[_0x152c3c(0x9db)],_0x48bd36);}}},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xdab)]=function(){const _0x36703c=_0x5c342f;this[_0x36703c(0xbfe)](),this[_0x36703c(0x7a5)](),Window_StatusBase[_0x36703c(0xca4)][_0x36703c(0xdab)][_0x36703c(0xded)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xbfe)]=function(){const _0x724c0c=_0x5c342f;this['_cursorArea']=new Sprite(),this[_0x724c0c(0x6cd)][_0x724c0c(0xcac)]=[new PIXI['filters'][(_0x724c0c(0x4f7))]()],this[_0x724c0c(0x6cd)][_0x724c0c(0xe22)]=new Rectangle(),this[_0x724c0c(0x6cd)]['move'](this['_padding'],this[_0x724c0c(0x347)]),this['addChild'](this['_cursorArea']);},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x7a5)]=function(){const _0x40bb03=_0x5c342f;this[_0x40bb03(0x8a6)]=new Sprite(),this[_0x40bb03(0x393)](this[_0x40bb03(0x8a6)]);},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x78a)]=function(){const _0x43a485=_0x5c342f;this['_effectsContainer']&&this[_0x43a485(0x393)](this['_effectsContainer']);},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xaac)]=function(){const _0x19e173=_0x5c342f;this['_damageContainer']=new Sprite(),this[_0x19e173(0x393)](this['_damageContainer']);},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x263)]=function(){const _0x3869c2=_0x5c342f;this[_0x3869c2(0x2a3)]=new Sprite();for(let _0x47ca47=0x0;_0x47ca47<0x9;_0x47ca47++){_0x3869c2(0x403)!==_0x3869c2(0x403)?!_0x52445a[_0x3869c2(0xd90)]()['includes'](this[_0x3869c2(0x1dc)])&&(this['_tpbSceneChangeCacheActor']=null):this[_0x3869c2(0x2a3)][_0x3869c2(0x393)](new Sprite());}this[_0x3869c2(0x6cd)]['addChild'](this[_0x3869c2(0x2a3)]);},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x93d)]=function(){const _0x4314fc=_0x5c342f;Window_StatusBase[_0x4314fc(0xca4)][_0x4314fc(0x93d)][_0x4314fc(0xded)](this),this['_updateCursorArea']();},Window_BattleStatus['prototype'][_0x5c342f(0x7af)]=function(){const _0x5af02f=_0x5c342f,_0x59ca3b=this[_0x5af02f(0x347)];this[_0x5af02f(0x6cd)][_0x5af02f(0x579)](_0x59ca3b,_0x59ca3b),this[_0x5af02f(0x6cd)]['x']=_0x59ca3b-this['origin']['x'],this['_cursorArea']['y']=_0x59ca3b-this[_0x5af02f(0x96c)]['y'],this[_0x5af02f(0x178)]>0x0&&this[_0x5af02f(0x2d2)]>0x0?this[_0x5af02f(0x6cd)][_0x5af02f(0x747)]=this[_0x5af02f(0x691)]():this[_0x5af02f(0x6cd)]['visible']=![];},Window_BattleStatus['prototype'][_0x5c342f(0x3fc)]=function(){const _0x54e017=_0x5c342f;Window_StatusBase[_0x54e017(0xca4)][_0x54e017(0x3fc)][_0x54e017(0xded)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xd1f)]=function(){const _0x3b81fc=_0x5c342f,_0x275d25=this[_0x3b81fc(0x6cd)][_0x3b81fc(0x598)][_0x3b81fc(0x3fd)](new Point(0x0,0x0)),_0x3a60e2=this['_cursorArea'][_0x3b81fc(0xe22)];_0x3a60e2['x']=_0x275d25['x']+this['origin']['x'],_0x3a60e2['y']=_0x275d25['y']+this[_0x3b81fc(0x96c)]['y'],_0x3a60e2[_0x3b81fc(0x6e4)]=this[_0x3b81fc(0x178)],_0x3a60e2[_0x3b81fc(0x880)]=this[_0x3b81fc(0x2d2)];},Window_BattleStatus['prototype'][_0x5c342f(0x493)]=function(_0x378d13){const _0xd54e9b=_0x5c342f;if(this[_0xd54e9b(0xcf1)]()!==_0xd54e9b(0x483))return;this[_0xd54e9b(0xb73)](_0x378d13[_0xd54e9b(0x427)]());},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x9f9)]=function(_0x5cff86,_0x129616){const _0x3ce18=_0x5c342f;if(!this[_0x3ce18(0x2d5)])return;if(!_0x5cff86)return;if(!_0x129616)return;const _0x1a3cc5=this[_0x3ce18(0x7c0)](_0x129616[_0x3ce18(0x427)]());_0x1a3cc5['x']+=_0x1a3cc5['width']/0x2+this[_0x3ce18(0xde9)],_0x5cff86['x']=_0x1a3cc5['x'],_0x5cff86['y']=_0x1a3cc5['y'],this['_damageContainer'][_0x3ce18(0x393)](_0x5cff86);},Window_BattleStatus['prototype'][_0x5c342f(0xa2f)]=function(_0x1f14a6){const _0x55dc70=_0x5c342f;if(!this[_0x55dc70(0x2d5)])return;if(!_0x1f14a6)return;this['_damageContainer'][_0x55dc70(0x72d)](_0x1f14a6);},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xcbc)]=function(){const _0x19198e=_0x5c342f;if(!this[_0x19198e(0xc6c)]())return;if(!this['_borderPortraitSprite'])this[_0x19198e(0x5cb)]();this[_0x19198e(0x46d)](),this[_0x19198e(0xc76)]();},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xc6c)]=function(){const _0x1ff6d2=_0x5c342f;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x1ff6d2(0x371)]())return![];return VisuMZ[_0x1ff6d2(0xca2)]['Settings'][_0x1ff6d2(0xaa5)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x5c342f(0xca4)]['createBorderStylePortraitSprite']=function(){const _0xf0e131=_0x5c342f;this[_0xf0e131(0x1aa)]=new Sprite();const _0x930a6a=SceneManager[_0xf0e131(0x201)],_0x17a112=_0x930a6a[_0xf0e131(0xd89)][_0xf0e131(0x570)](_0x930a6a[_0xf0e131(0xd2e)]);_0x930a6a[_0xf0e131(0x619)](this[_0xf0e131(0x1aa)],_0x17a112),this[_0xf0e131(0x1aa)][_0xf0e131(0xaab)]['x']=0.5,this[_0xf0e131(0x1aa)][_0xf0e131(0xaab)]['y']=0x1;const _0x442a5b=VisuMZ[_0xf0e131(0xca2)][_0xf0e131(0xc90)][_0xf0e131(0xaa5)]['PortraitScaleBorderStyle'];this['_borderPortraitSprite'][_0xf0e131(0x339)]['x']=_0x442a5b,this[_0xf0e131(0x1aa)][_0xf0e131(0x339)]['y']=_0x442a5b,this[_0xf0e131(0x1aa)]['y']=this['y']+this['height'],this[_0xf0e131(0x550)]=0x0;},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xca6)]=function(){const _0xd87b4d=_0x5c342f;return BattleManager[_0xd87b4d(0xa83)]();},Window_BattleStatus['prototype'][_0x5c342f(0x46d)]=function(){const _0x97c5e4=_0x5c342f;this['_borderPortraitSprite']['visible']=this['isBorderPortraitSpriteVisible']();const _0x2e84ed=BattleManager['actor'](),_0x1ac13e=_0x2e84ed?_0x2e84ed[_0x97c5e4(0x23e)]()||'':'';if(_0x2e84ed===this[_0x97c5e4(0x1aa)]['actor']&&_0x1ac13e===this[_0x97c5e4(0x1aa)][_0x97c5e4(0xb9a)])return;this[_0x97c5e4(0x1aa)][_0x97c5e4(0x761)]=_0x2e84ed||this[_0x97c5e4(0x1aa)][_0x97c5e4(0x761)],this['_borderPortraitSprite'][_0x97c5e4(0xb9a)]=_0x1ac13e;if(!_0x2e84ed)return;else{if(_0x1ac13e===''){this[_0x97c5e4(0x1aa)][_0x97c5e4(0x812)]=ImageManager[_0x97c5e4(0xa77)],this[_0x97c5e4(0x1aa)][_0x97c5e4(0xb9a)]='';return;}else{if(_0x97c5e4(0x5d9)===_0x97c5e4(0xc48))return _0x17a2f4[_0x97c5e4(0xe06)]()[this[_0x97c5e4(0x2f6)]];else{const _0x1c5280=ImageManager[_0x97c5e4(0x429)](_0x1ac13e);this[_0x97c5e4(0x1aa)][_0x97c5e4(0xc0c)]=0x0,_0x1c5280[_0x97c5e4(0x4bc)](this[_0x97c5e4(0xc4c)]['bind'](this,_0x1c5280));}}}},Window_BattleStatus[_0x5c342f(0xca4)]['processBorderActor']=function(_0x40bd4a){const _0x220017=_0x5c342f;this[_0x220017(0x550)]=0x14,this[_0x220017(0x1aa)][_0x220017(0x812)]=_0x40bd4a;if(SceneManager[_0x220017(0x201)]['isRightInputMode']()){if(_0x220017(0x4de)===_0x220017(0x8ef))return _0x435523[_0x220017(0xca4)][_0x220017(0x6fa)]['call'](this);else this[_0x220017(0x1aa)]['x']=0x0,this[_0x220017(0x2f2)]=Math['ceil'](_0x40bd4a[_0x220017(0x6e4)]/0x2);}else this[_0x220017(0x1aa)]['x']=this[_0x220017(0x6e4)],this[_0x220017(0x2f2)]=this[_0x220017(0x6e4)]*0x3/0x4;this[_0x220017(0x1aa)][_0x220017(0xc0c)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x220017(0x880)];const _0x494227=BattleManager[_0x220017(0x761)]();_0x494227&&(this[_0x220017(0x2f2)]+=_0x494227[_0x220017(0x76c)](),this[_0x220017(0x1aa)]['y']+=_0x494227['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0xc76)]=function(){const _0x5e0131=_0x5c342f;if(this['_borderPortraitDuration']>0x0){if('NrebP'===_0x5e0131(0x7e5)){const _0x3a2db6=this[_0x5e0131(0x550)],_0x208682=this[_0x5e0131(0x1aa)];_0x208682['x']=(_0x208682['x']*(_0x3a2db6-0x1)+this['_borderPortraitTargetX'])/_0x3a2db6,_0x208682[_0x5e0131(0xc0c)]=(_0x208682['opacity']*(_0x3a2db6-0x1)+0xff)/_0x3a2db6,this[_0x5e0131(0x550)]--;}else{this[_0x5e0131(0x224)]=_0x5dbc08['flashColor']||[0x0,0x0,0x0,0x0],this[_0x5e0131(0x224)]=_0x567f68[_0x5e0131(0x388)](this[_0x5e0131(0x224)]),this[_0x5e0131(0x64d)]=_0x296e73[_0x5e0131(0xd28)]||0x0;const _0x3e2143=this[_0x5e0131(0xa91)](),_0x123cf8=_0x1072ae[_0x5e0131(0x9b3)](_0x3e2143*0x1e),_0x400495=this[_0x5e0131(0x8b1)](_0x123cf8,_0x3e2143);_0x400495[_0x5e0131(0x812)][_0x5e0131(0xcba)]=_0x922b30[_0x5e0131(0x915)](_0x4a3ec9[_0x5e0131(0xcba)]),_0x400495['bitmap'][_0x5e0131(0x524)](_0x1efd30,0x0,0x0,_0x123cf8,_0x3e2143,'center'),_0x400495['dy']=0x0;}}},Window_BattleStatus[_0x5c342f(0xca4)]['updateEffectContainers']=function(){const _0x53e50a=_0x5c342f;return;this[_0x53e50a(0x8a6)]&&(this[_0x53e50a(0x8a6)]['x']=this['x'],this[_0x53e50a(0x8a6)]['y']=this['y']),this[_0x53e50a(0x2d5)]&&(this['_damageContainer']['x']=this['x'],this[_0x53e50a(0x2d5)]['y']=this['y']);},Window_BattleStatus[_0x5c342f(0xca4)][_0x5c342f(0x521)]=function(){const _0x57e03f=_0x5c342f,_0x271705=VisuMZ['BattleCore'][_0x57e03f(0xc90)]['BattleLayout'];if(_0x271705['StatusWindowAttachmentBack']){const _0x4e595a=new Sprite();_0x4e595a[_0x57e03f(0x812)]=ImageManager[_0x57e03f(0x498)](_0x271705['StatusWindowAttachmentBack']),_0x4e595a['x']=_0x271705[_0x57e03f(0x277)]||0x0,_0x4e595a['y']=_0x271705[_0x57e03f(0x45c)]||0x0,this[_0x57e03f(0x61b)](_0x4e595a),this[_0x57e03f(0x62e)]=_0x4e595a;}if(_0x271705[_0x57e03f(0x85a)]){if(_0x57e03f(0x993)!=='mbcJN'){const _0x19870a=new Sprite();_0x19870a[_0x57e03f(0x812)]=ImageManager[_0x57e03f(0x498)](_0x271705['StatusWindowAttachmentFront']),_0x19870a['x']=_0x271705['StatusWindowAttachmentFrontOffsetX']||0x0,_0x19870a['y']=_0x271705[_0x57e03f(0x486)]||0x0,this['addChild'](_0x19870a),this[_0x57e03f(0x98a)]=_0x19870a;}else this[_0x57e03f(0x843)](_0x57e03f(0x3ff),'<CENTER>%1'['format'](_0x55a34e['battleDisplayText'](_0x56e74b)));}},Window_BattleStatus[_0x5c342f(0xca4)]['updateAttachmentSprites']=function(){const _0x34e885=_0x5c342f;this[_0x34e885(0x98a)]&&this['addChild'](this['_frontAttachmentSprite']),this[_0x34e885(0x62e)]&&this['addChildToBack'](this[_0x34e885(0x62e)]);},Window_BattleActor[_0x5c342f(0xca4)]['isCurrentItemEnabled']=function(){const _0x9f599e=_0x5c342f;return this[_0x9f599e(0x179)]();},Window_BattleActor['prototype']['isActionSelectionValid']=function(){const _0x17dbb4=_0x5c342f,_0x3beaf2=BattleManager[_0x17dbb4(0xc3f)]();if(!_0x3beaf2)return!![];if(!_0x3beaf2[_0x17dbb4(0xa87)]())return!![];const _0x1d1f08=this['actor'](this[_0x17dbb4(0x427)]()),_0xdd5fa9=_0x3beaf2[_0x17dbb4(0xa87)]()[_0x17dbb4(0x340)];if(_0x3beaf2[_0x17dbb4(0x3fe)]()){if(_0x1d1f08===BattleManager[_0x17dbb4(0x761)]())return![];}if(_0x3beaf2[_0x17dbb4(0xd6e)]()){if(_0x17dbb4(0x901)===_0x17dbb4(0x879))return this[_0x17dbb4(0xac3)](_0x426530);else{if(!_0x1d1f08['isDead']())return![];}}if(_0x3beaf2[_0x17dbb4(0xac4)]()){if(_0x17dbb4(0x3da)===_0x17dbb4(0x37e))this['initialize'](...arguments);else{if(!_0x1d1f08[_0x17dbb4(0x920)]())return![];}}return!![];},Window_BattleActor[_0x5c342f(0xca4)][_0x5c342f(0x7c1)]=function(_0x30e33f){const _0x527781=_0x5c342f;this[_0x527781(0x74b)]=_0x30e33f;},VisuMZ['BattleCore'][_0x5c342f(0x637)]=Window_BattleActor[_0x5c342f(0xca4)]['processTouch'],Window_BattleActor[_0x5c342f(0xca4)][_0x5c342f(0x1e8)]=function(){const _0x5425cd=_0x5c342f;Window_BattleStatus[_0x5425cd(0xca4)]['processTouch'][_0x5425cd(0xded)](this),this[_0x5425cd(0x74b)]?this['processEnemyModeTouchBattleCore']():_0x5425cd(0xaca)!==_0x5425cd(0xaca)?this[_0x5425cd(0x4c7)][_0x5425cd(0x36d)]=!![]:VisuMZ[_0x5425cd(0xca2)][_0x5425cd(0x637)][_0x5425cd(0xded)](this);},Window_BattleActor[_0x5c342f(0xca4)]['processEnemyModeTouchBattleCore']=function(){const _0xebc507=_0x5c342f,_0x5a6331=SceneManager['_scene']['_enemyWindow'];if(!_0x5a6331)return;this[_0xebc507(0x987)]=![];const _0x523fde=this[_0xebc507(0xc40)]();if(_0x523fde>=0x0){if(_0xebc507(0xb37)===_0xebc507(0x6a1)){if(_0x5a09ca[_0xebc507(0xca2)][_0xebc507(0xc90)]['Damage'][_0xebc507(0xae7)]??!![])return![];return _0x25315f[_0xebc507(0x371)]()&&this[_0xebc507(0xb80)];}else{this[_0xebc507(0x908)](_0x523fde);if(TouchInput[_0xebc507(0xd54)]()){if(_0xebc507(0xc33)!==_0xebc507(0x61e)){const _0x44d21d=$gameParty[_0xebc507(0xe06)]()[_0x523fde],_0x239d6b=_0x5a6331[_0xebc507(0x96a)][_0xebc507(0x570)](_0x44d21d);if(_0x239d6b>=0x0){if(_0xebc507(0x858)===_0xebc507(0x858))_0x5a6331[_0xebc507(0x908)](_0x239d6b),_0x5a6331[_0xebc507(0x234)]();else return _0x8769db(_0x3e1759['$1']);}}else this['_battlerContainer']=new _0x328e3d(),this[_0xebc507(0x6d9)][_0xebc507(0x393)](this[_0xebc507(0x440)]);}}}},Window_BattleActor[_0x5c342f(0xca4)]['_makeCursorAlpha']=function(){const _0x545081=_0x5c342f;if(this[_0x545081(0x74b)]){if('VNkmK'!==_0x545081(0x600))this['_animationCount']++,this[_0x545081(0x344)]=!![];else{_0x41871a[_0x545081(0xca4)][_0x545081(0x473)][_0x545081(0xded)](this);if(this[_0x545081(0xde1)])this[_0x545081(0xc95)]();}}const _0x3c7e18=Window_BattleStatus[_0x545081(0xca4)][_0x545081(0x53f)][_0x545081(0xded)](this);if(this[_0x545081(0x74b)]){if(_0x545081(0x51b)!=='jUDeE'){if(!this[_0x545081(0x741)]()&&this!==_0xf23bb1['_subject']){if(this[_0x545081(0x9d3)]())this[_0x545081(0x9d3)]()[_0x545081(0xc59)]();}this[_0x545081(0x1b8)]();return;}else this['active']=![];}return _0x3c7e18;},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x324)]=Window_BattleActor[_0x5c342f(0xca4)][_0x5c342f(0x828)],Window_BattleActor[_0x5c342f(0xca4)][_0x5c342f(0x828)]=function(){const _0x2889fe=_0x5c342f;VisuMZ[_0x2889fe(0xca2)][_0x2889fe(0x324)][_0x2889fe(0xded)](this);const _0x8a8351=BattleManager[_0x2889fe(0xc3f)]();if(_0x8a8351){if('VhEmt'===_0x2889fe(0x323)){const _0x1255e8=$gameParty[_0x2889fe(0x4e9)]();_0x8a8351[_0x2889fe(0xc05)]()&&_0x1255e8['length']>0x1&&this['setHandler']('pagedown',this['selectAllActors'][_0x2889fe(0x5c9)](this));}else return!![];}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xcc7)]=Window_BattleActor[_0x5c342f(0xca4)]['hide'],Window_BattleActor[_0x5c342f(0xca4)][_0x5c342f(0xa29)]=function(){const _0x21502e=_0x5c342f;VisuMZ[_0x21502e(0xca2)][_0x21502e(0xcc7)]['call'](this),delete this[_0x21502e(0xdc2)][_0x21502e(0x31b)],delete this['_handlers']['pagedown'];},Window_BattleActor[_0x5c342f(0xca4)][_0x5c342f(0xcab)]=function(){const _0x5226b2=_0x5c342f,_0xf05eb5=BattleManager['inputtingAction']();if(_0xf05eb5)_0xf05eb5['setTargetBattlerKey'](_0x5226b2(0x813));this[_0x5226b2(0x234)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x222)]=Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0xd5a)],Window_BattleEnemy[_0x5c342f(0xca4)]['initialize']=function(_0x22138e){const _0xb7c933=_0x5c342f;this['_lastEnemy']=null,VisuMZ[_0xb7c933(0xca2)][_0xb7c933(0x222)]['call'](this,_0x22138e);if(Imported[_0xb7c933(0x892)]){if(VisuMZ['AggroControlSystem'][_0xb7c933(0xda9)]<1.12){let _0x2be3b8='';_0x2be3b8+=_0xb7c933(0x601),_0x2be3b8+=_0xb7c933(0x4fb),_0x2be3b8+=_0xb7c933(0x395),alert(_0x2be3b8),SceneManager[_0xb7c933(0x549)]();}}},Window_BattleEnemy[_0x5c342f(0xca4)]['maxCols']=function(){const _0xfba888=_0x5c342f;return this[_0xfba888(0x70f)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xb4b)]=Window_BattleEnemy[_0x5c342f(0xca4)]['show'],Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0x828)]=function(){const _0x4384f8=_0x5c342f;VisuMZ[_0x4384f8(0xca2)][_0x4384f8(0xb4b)]['call'](this),this['y']=Graphics['height']*0xa,this['meetsSelectFrontviewActorConditions']()&&this['openBattleActorWindow']();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x8c8)]=Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0xa29)],Window_BattleEnemy[_0x5c342f(0xca4)]['hide']=function(){const _0x4def36=_0x5c342f;VisuMZ[_0x4def36(0xca2)][_0x4def36(0x8c8)]['call'](this),$gameParty[_0x4def36(0x908)](null),delete this[_0x4def36(0xdc2)][_0x4def36(0x31b)],delete this[_0x4def36(0xdc2)][_0x4def36(0xd33)];},Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0x9f6)]=function(){const _0xe6f80a=_0x5c342f;let _0x24c7c5=$gameTroop[_0xe6f80a(0x4e9)]();const _0x19261f=BattleManager['inputtingAction']();if(_0x19261f){_0x19261f[_0xe6f80a(0xc05)]()&&_0x24c7c5['length']>0x1&&this[_0xe6f80a(0x286)](_0xe6f80a(0x31b),this[_0xe6f80a(0x66d)]['bind'](this));if(_0x19261f['isForAnyone']()){const _0x38449b=$gameParty[_0xe6f80a(0x4e9)]();_0x24c7c5=_0x24c7c5[_0xe6f80a(0x310)](_0x38449b),_0x19261f[_0xe6f80a(0xc05)]()&&_0x38449b['length']>0x1&&('wWQKY'===_0xe6f80a(0x386)?this[_0xe6f80a(0x286)](_0xe6f80a(0xd33),this[_0xe6f80a(0xcab)][_0xe6f80a(0x5c9)](this)):_0x66d0b4[_0xe6f80a(0x96f)]?this[_0xe6f80a(0xb29)]=_0xe6f80a(0xaa2):this[_0xe6f80a(0xb29)]=_0xe6f80a(0x4e4));}}return _0x24c7c5;},Window_BattleEnemy[_0x5c342f(0xca4)]['refresh']=function(){const _0x24b0b4=_0x5c342f;this[_0x24b0b4(0x96a)]=this[_0x24b0b4(0x9f6)](),this['sortEnemies'](),Window_Selectable[_0x24b0b4(0xca4)][_0x24b0b4(0x4af)][_0x24b0b4(0xded)](this);},Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0x2a8)]=function(){const _0x1ae4b5=_0x5c342f;this[_0x1ae4b5(0x96a)][_0x1ae4b5(0x293)]((_0x1cf7be,_0x179f81)=>{const _0x5a84ad=_0x1ae4b5;if(_0x1cf7be[_0x5a84ad(0x47b)]()!==_0x179f81['isActor']()){if(_0x1cf7be[_0x5a84ad(0x796)]())return-0x1;if(_0x179f81[_0x5a84ad(0x796)]())return 0x1;}if(_0x1cf7be['isActor']()&&_0x179f81['isActor']())return _0x1cf7be[_0x5a84ad(0x427)]()-_0x179f81[_0x5a84ad(0x427)]();return _0x1cf7be[_0x5a84ad(0x9d3)]()[_0x5a84ad(0xda2)]===_0x179f81[_0x5a84ad(0x9d3)]()[_0x5a84ad(0xda2)]?_0x1cf7be[_0x5a84ad(0x9d3)]()['_baseY']-_0x179f81['battler']()[_0x5a84ad(0x256)]:_0x1cf7be[_0x5a84ad(0x9d3)]()['_baseX']-_0x179f81[_0x5a84ad(0x9d3)]()[_0x5a84ad(0xda2)];}),SceneManager['isBattleFlipped']()&&this[_0x1ae4b5(0x96a)][_0x1ae4b5(0x1f2)]();},Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0x986)]=function(){const _0xfe5b36=_0x5c342f,_0x2a27bf=VisuMZ[_0xfe5b36(0xca2)][_0xfe5b36(0xc90)][_0xfe5b36(0x4f1)];_0x2a27bf[_0xfe5b36(0xc43)]?this[_0xfe5b36(0xa6c)]():this[_0xfe5b36(0x864)]();},Window_BattleEnemy[_0x5c342f(0xca4)]['autoSelectLastSelected']=function(){const _0x1f8c9a=_0x5c342f,_0x547c7b=BattleManager[_0x1f8c9a(0xc3f)]();if(_0x547c7b&&_0x547c7b[_0x1f8c9a(0x48a)]()){if(_0x547c7b[_0x1f8c9a(0x718)]()){if(this[_0x1f8c9a(0xcae)]&&this[_0x1f8c9a(0x96a)]['includes'](this[_0x1f8c9a(0xcae)])){const _0x29f244=this[_0x1f8c9a(0x96a)][_0x1f8c9a(0x570)](this[_0x1f8c9a(0xcae)]);return this[_0x1f8c9a(0xdcb)](_0x29f244);}else return this['autoSelectPriority']();}}if(this[_0x1f8c9a(0x3a9)]&&this['_enemies'][_0x1f8c9a(0xaec)](this[_0x1f8c9a(0x3a9)])){const _0x342bf7=this[_0x1f8c9a(0x96a)]['indexOf'](this[_0x1f8c9a(0x3a9)]);this['forceSelect'](_0x342bf7);}else{if('fDfub'===_0x1f8c9a(0x27a))return _0x1f8c9a(0x6e3);else this['autoSelectPriority']();}},Window_BattleEnemy['prototype'][_0x5c342f(0x864)]=function(){const _0x322a30=_0x5c342f,_0x32215f=BattleManager[_0x322a30(0xc3f)]();if(_0x32215f&&_0x32215f['isForAnyone']()){const _0x4bece3=$gameParty[_0x322a30(0x4e9)]()[0x0];let _0x4f1f99=this[_0x322a30(0x96a)][_0x322a30(0x570)](_0x4bece3);const _0x1adc7a=_0x32215f[_0x322a30(0xa87)]()[_0x322a30(0xc1c)];if(_0x1adc7a[_0x322a30(0xcbd)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x322a30(0xdcb)](_0x4f1f99);return;}else{if(_0x1adc7a['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){if(_0x322a30(0x462)===_0x322a30(0xb0e))_0x1c7147['BattleCore']['JS'][_0xf628a5][_0x322a30(0xded)](this,this[_0x322a30(0xdda)](),this['subject'](),_0x5d118f,_0x2721f5);else{this['forceSelect'](_0x4f1f99-0x1);return;}}}}const _0x80e061=VisuMZ[_0x322a30(0xca2)][_0x322a30(0xc90)][_0x322a30(0x4f1)];let _0x1a7e5a=![];if($gameSystem[_0x322a30(0x9a3)]()){if('zUFWA'!==_0x322a30(0x2f4))_0x1a7e5a=_0x80e061[_0x322a30(0xb2f)];else{const _0x16cdfa=this['_battler'][_0x322a30(0x499)];this[_0x322a30(0xb56)]=_0x153b0d[_0x322a30(0x5f6)][_0x16cdfa[_0x322a30(0x548)]],this['_pattern']=_0x16cdfa[_0x322a30(0x607)];const _0x3c6294=this[_0x322a30(0x7c5)];_0x3c6294['freezeFrame'](_0x16cdfa[_0x322a30(0xb4f)],_0x16cdfa[_0x322a30(0x607)]),this[_0x322a30(0x17e)]();}}else _0x1a7e5a=_0x80e061['FrontViewSelect'];this[_0x322a30(0xdcb)](_0x1a7e5a?this[_0x322a30(0x70f)]()-0x1:0x0);},Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0x9ca)]=function(){const _0x107099=_0x5c342f;Window_Selectable[_0x107099(0xca4)][_0x107099(0x9ca)][_0x107099(0xded)](this);if(this[_0x107099(0x455)]()[_0x107099(0x796)]())this['_lastEnemy']=this[_0x107099(0x455)]();if(this[_0x107099(0x455)]()[_0x107099(0x47b)]())this[_0x107099(0xcae)]=this[_0x107099(0x455)]();},Window_BattleEnemy['prototype']['select']=function(_0x5c780e){const _0x363994=_0x5c342f;Window_Selectable[_0x363994(0xca4)][_0x363994(0x908)]['call'](this,_0x5c780e),$gameTroop[_0x363994(0x908)](this[_0x363994(0x455)]()),$gameParty[_0x363994(0x908)](this[_0x363994(0x455)]());if(!this[_0x363994(0x455)]())return;if(this['meetsSelectFrontviewActorConditions']()){if(_0x363994(0x6a5)===_0x363994(0x6a5)){const _0x2d397c=SceneManager[_0x363994(0x201)][_0x363994(0x8f0)];if(this['enemy']()[_0x363994(0x47b)]())_0x2d397c[_0x363994(0x908)](this[_0x363994(0x455)]()[_0x363994(0x427)]());else{if(_0x363994(0x729)===_0x363994(0x5a6)){const _0x4f277f=_0xde420b[_0x363994(0xa87)]();this[_0x363994(0x264)](_0x1069ee,_0x4f277f),this[_0x363994(0x843)](_0x363994(0x41f),_0x4fb860,_0x55985e,!![]),this[_0x363994(0x843)](_0x363994(0x551),_0x2ca187,_0x16fc6f),this['push'](_0x363994(0xd27)),this[_0x363994(0x843)]('performCastAnimation',_0x4e9b25,_0xfc92cf),this[_0x363994(0x843)](_0x363994(0x793));}else _0x2d397c['deselect']();}}else return _0x1c3e85=_0x8438d3['BattleCore'][_0x363994(0xc90)][_0x363994(0x603)][_0x363994(0xa1f)][_0x363994(0xded)](this,_0x3fb192),_0x17d063=this[_0x363994(0x9f7)]['criticalDmgRate']*_0x4cf3da+this[_0x363994(0x9f7)][_0x363994(0x174)],_0x4ee25c;}},Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0xc5b)]=function(){const _0x1fac93=_0x5c342f;if(!this[_0x1fac93(0x747)])return![];if($gameSystem[_0x1fac93(0x9a3)]())return![];const _0x4b261c=SceneManager[_0x1fac93(0x201)][_0x1fac93(0xcf1)](),_0x2a3af9=[_0x1fac93(0x4e4),_0x1fac93(0x594),'xp','portrait',_0x1fac93(0x966)];return _0x2a3af9[_0x1fac93(0xaec)](_0x4b261c);},Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0xb17)]=function(){const _0x1df885=_0x5c342f,_0x3296af=SceneManager[_0x1df885(0x201)][_0x1df885(0x8f0)];_0x3296af['show'](),_0x3296af[_0x1df885(0x7c1)](!![]),_0x3296af[_0x1df885(0x4af)](),_0x3296af[_0x1df885(0x287)]();const _0x35cc80=SceneManager[_0x1df885(0x201)][_0x1df885(0xcf1)](),_0x5362b8=['xp',_0x1df885(0x483),_0x1df885(0x966)];if(_0x5362b8[_0x1df885(0xaec)](_0x35cc80)){const _0x181462=SceneManager[_0x1df885(0x201)]['_statusWindow'];_0x181462['scale']['y']=0x0;}},Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0xb60)]=function(){const _0x5afd7d=_0x5c342f,_0x23e440=SceneManager[_0x5afd7d(0x201)][_0x5afd7d(0x8f0)];_0x23e440[_0x5afd7d(0xa29)](),_0x23e440['setEnemyWindowMode'](![]),_0x23e440[_0x5afd7d(0x287)]();const _0x36a5c1=SceneManager[_0x5afd7d(0x201)]['_statusWindow'];_0x36a5c1[_0x5afd7d(0x339)]['y']=0x1;},Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0x66d)]=function(){const _0x586117=_0x5c342f,_0x435f31=BattleManager['inputtingAction']();if(_0x435f31)_0x435f31[_0x586117(0xcfa)](_0x586117(0x332));this[_0x586117(0x234)]();},Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0xcab)]=function(){const _0xd86492=_0x5c342f,_0x8c38ca=BattleManager[_0xd86492(0xc3f)]();if(_0x8c38ca)_0x8c38ca[_0xd86492(0xcfa)]('all\x20actors');this[_0xd86492(0x234)]();},Window_BattleEnemy[_0x5c342f(0xca4)][_0x5c342f(0x658)]=function(){const _0x370b72=_0x5c342f;return this[_0x370b72(0x179)]();},Window_BattleEnemy['prototype'][_0x5c342f(0x179)]=function(){const _0xbf2144=_0x5c342f,_0x44d271=BattleManager['inputtingAction']();if(!_0x44d271)return!![];if(!_0x44d271[_0xbf2144(0xa87)]())return!![];const _0x5e292d=this[_0xbf2144(0x455)](),_0x5cf897=_0x44d271[_0xbf2144(0xa87)]()['note'];if(_0x44d271[_0xbf2144(0x3fe)]()){if(_0x5e292d===BattleManager[_0xbf2144(0x761)]())return![];}return!![];},Window_BattleItem['prototype']['includes']=function(_0x4191a1){const _0x98ed84=_0x5c342f;if(!_0x4191a1)return![];return _0x4191a1[_0x98ed84(0x857)]===0x0||_0x4191a1[_0x98ed84(0x857)]===0x1;};function Window_AutoBattleCancel(){const _0x2fc02c=_0x5c342f;this[_0x2fc02c(0xd5a)](...arguments);}Window_AutoBattleCancel[_0x5c342f(0xca4)]=Object[_0x5c342f(0xccb)](Window_Base[_0x5c342f(0xca4)]),Window_AutoBattleCancel[_0x5c342f(0xca4)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x5c342f(0xca4)][_0x5c342f(0xd5a)]=function(_0x5e8aca){const _0x28722f=_0x5c342f;Window_Base[_0x28722f(0xca4)][_0x28722f(0xd5a)][_0x28722f(0xded)](this,_0x5e8aca),this[_0x28722f(0x623)](this['bgType']()),this[_0x28722f(0x4af)]();},Window_AutoBattleCancel[_0x5c342f(0xca4)]['bgType']=function(){const _0x3c8e31=_0x5c342f;return VisuMZ['BattleCore'][_0x3c8e31(0xc90)]['AutoBattle']['AutoBattleBgType'];},Window_AutoBattleCancel[_0x5c342f(0xca4)]['refresh']=function(){const _0x3d5b7a=_0x5c342f;this[_0x3d5b7a(0xae6)]['clear']();const _0x4dc24a=VisuMZ['BattleCore'][_0x3d5b7a(0xc90)][_0x3d5b7a(0xdeb)]['AutoBattleMsg'],_0x360b0f=_0x4dc24a[_0x3d5b7a(0x266)](this['okButtonText'](),this['cancelButtonText']()),_0x33e2ca=this['textSizeEx'](_0x360b0f)[_0x3d5b7a(0x6e4)],_0x26b1ff=Math['floor']((this[_0x3d5b7a(0x178)]-_0x33e2ca)/0x2);this[_0x3d5b7a(0xb30)](_0x360b0f,_0x26b1ff,0x0,_0x33e2ca);},Window_AutoBattleCancel[_0x5c342f(0xca4)][_0x5c342f(0x8db)]=function(){const _0x3ba825=_0x5c342f;if(Imported[_0x3ba825(0xad9)])return TextManager[_0x3ba825(0xd1e)]('ok');else{if(_0x3ba825(0x372)!==_0x3ba825(0x54d))return VisuMZ['BattleCore']['Settings'][_0x3ba825(0xdeb)]['AutoBattleOK'];else{if(!_0x1e2cab[_0x3ba825(0x371)]())return;if(!_0x3ad139['VisuMZ_3_ActSeqImpact'])return;const _0x3b6216=_0x3fe237[_0x3ba825(0x201)][_0x3ba825(0x3ed)];if(!_0x3b6216)return;_0x1a2d15[_0x3ba825(0x2ee)](_0x444954,_0x24345b);const _0x26975e=_0x3dfee0[_0x3ba825(0xb19)]||0x1,_0x4de0d2=_0x162096[_0x3ba825(0x7b5)]||0x1,_0x53e6b1=_0x3aafdd['EasingType']||'Linear';_0x3b6216['setupRgbSplitImpactFilter'](_0x26975e,_0x4de0d2,_0x53e6b1);}}},Window_AutoBattleCancel[_0x5c342f(0xca4)][_0x5c342f(0x887)]=function(){const _0x567d8a=_0x5c342f;if(Imported[_0x567d8a(0xad9)])return TextManager['getInputButtonString']('cancel');else{if(_0x567d8a(0x54f)===_0x567d8a(0x54f))return VisuMZ[_0x567d8a(0xca2)][_0x567d8a(0xc90)][_0x567d8a(0xdeb)][_0x567d8a(0xbb6)];else _0x55ee3c[_0x567d8a(0xca2)][_0x567d8a(0xaea)][_0x567d8a(0xded)](this),this[_0x567d8a(0x4a1)]();}},Window_AutoBattleCancel[_0x5c342f(0xca4)]['update']=function(){const _0x374bbf=_0x5c342f;Window_Base[_0x374bbf(0xca4)]['update']['call'](this),this[_0x374bbf(0x52e)](),this[_0x374bbf(0xa75)]();},Window_AutoBattleCancel[_0x5c342f(0xca4)][_0x5c342f(0x52e)]=function(){const _0xf4a3ec=_0x5c342f;this[_0xf4a3ec(0x747)]=BattleManager[_0xf4a3ec(0x7e0)];},Window_AutoBattleCancel[_0x5c342f(0xca4)][_0x5c342f(0xa75)]=function(){const _0x424965=_0x5c342f;if(!BattleManager[_0x424965(0x7e0)])return;(Input[_0x424965(0x799)]('ok')||Input[_0x424965(0x799)]('cancel')||TouchInput[_0x424965(0xd54)]()||TouchInput[_0x424965(0x294)]())&&(_0x424965(0x936)!==_0x424965(0x936)?(this[_0x424965(0x759)]=new _0x4e0784(),this[_0x424965(0x759)][_0x424965(0xaab)]['x']=0.5,this[_0x424965(0x759)][_0x424965(0xaab)]['y']=0.5,this[_0x424965(0x393)](this[_0x424965(0x759)])):(SoundManager['playCancel'](),BattleManager['_autoBattle']=![],Input['clear'](),TouchInput[_0x424965(0xa52)]()));};function Window_EnemyName(){this['initialize'](...arguments);}Window_EnemyName[_0x5c342f(0xca4)]=Object[_0x5c342f(0xccb)](Window_StatusBase[_0x5c342f(0xca4)]),Window_EnemyName[_0x5c342f(0xca4)]['constructor']=Window_EnemyName,Window_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0xd5a)]=function(_0x36b6a8){const _0x25baf6=_0x5c342f;this[_0x25baf6(0x2f6)]=_0x36b6a8,this[_0x25baf6(0xb8f)]='';const _0x3fdfb1=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x25baf6(0x8f4)]()*0x4);Window_StatusBase[_0x25baf6(0xca4)][_0x25baf6(0xd5a)][_0x25baf6(0xded)](this,_0x3fdfb1),this[_0x25baf6(0x623)](0x2),this[_0x25baf6(0x218)]=0x0;},Window_EnemyName['prototype']['updatePadding']=function(){const _0x1b656e=_0x5c342f;this[_0x1b656e(0xde9)]=0x0;},Window_EnemyName['prototype']['enemy']=function(){const _0x532b30=_0x5c342f;return $gameTroop[_0x532b30(0xe06)]()[this[_0x532b30(0x2f6)]];},Window_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0x2a5)]=function(){const _0x20e01f=_0x5c342f;Window_StatusBase['prototype'][_0x20e01f(0x2a5)][_0x20e01f(0xded)](this),this['enemy']()&&this[_0x20e01f(0x455)]()[_0x20e01f(0x25e)]()!==this['_text']&&(this['_text']=this[_0x20e01f(0x455)]()[_0x20e01f(0x25e)](),this[_0x20e01f(0x4af)]()),this[_0x20e01f(0xbe7)](),this[_0x20e01f(0xb40)]();},Window_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0xbe7)]=function(){const _0x18e69f=_0x5c342f;if(!this['enemy']()){if('RJrNV'===_0x18e69f(0x3fa)){if(this[_0x18e69f(0x218)]>0x0)this['contentsOpacity']-=0x10;}else{if(!_0x101344[_0x18e69f(0x371)]())return;if(!_0xa25cad['VisuMZ_2_BattleSystemPTB'])return;if(!_0x5051f7[_0x18e69f(0x34b)]())return;_0x48cd8b['ConvertParams'](_0x26b2b5,_0x241e0b);const _0x3f04c2=_0x57e328[_0x18e69f(0x52b)]['friendsUnit']();let _0x517df4=_0x2337cc[_0x18e69f(0xb86)],_0x1db340=_0x27ac7a['HalfActions'];_0x3f04c2[_0x18e69f(0x322)](_0x517df4),_0x3f04c2[_0x18e69f(0x5cc)](_0x1db340);}}else{if(this['enemy']()[_0x18e69f(0x541)]()){if('Baosu'===_0x18e69f(0x547)){if(this[_0x18e69f(0x218)]>0x0)this[_0x18e69f(0x218)]-=0x10;}else return this[_0x18e69f(0x70a)]()?(_0x4edaf4=this[_0x18e69f(0x9a9)](),this['repeatTargets'](_0xecd42a)):(this[_0x18e69f(0x788)]=-0x1,_0x10073a[_0x18e69f(0x843)](...this[_0x18e69f(0x556)]()),this['repeatTargets'](_0x3d8819));}else{if(SceneManager['_scene'][_0x18e69f(0x995)]&&SceneManager['_scene'][_0x18e69f(0x995)][_0x18e69f(0x344)]&&SceneManager['_scene'][_0x18e69f(0x995)][_0x18e69f(0x96a)]['includes'](this[_0x18e69f(0x455)]())){if(this[_0x18e69f(0x218)]<0xff)this[_0x18e69f(0x218)]+=0x10;}else this['contentsOpacity']>0x0&&(this[_0x18e69f(0x218)]-=0x10);}}},Window_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0xb40)]=function(){const _0x67b41a=_0x5c342f;if(!this['enemy']())return;if(SceneManager['isBattleFlipped']()){if(_0x67b41a(0x42f)!==_0x67b41a(0x42f))return;else this['x']=Graphics[_0x67b41a(0xba3)]-this['enemy']()[_0x67b41a(0x9d3)]()[_0x67b41a(0xda2)];}else this['x']=this[_0x67b41a(0x455)]()['battler']()['_baseX'];this['x']-=Math[_0x67b41a(0x5c1)](this['width']/0x2),this['y']=this[_0x67b41a(0x455)]()[_0x67b41a(0x9d3)]()['_baseY']-Math[_0x67b41a(0x5c1)](this['lineHeight']()*1.5);const _0x478194=VisuMZ[_0x67b41a(0xca2)][_0x67b41a(0xc90)]['Enemy'];this['x']+=_0x478194[_0x67b41a(0xd2f)]||0x0,this['y']+=_0x478194['NameOffsetY']||0x0;},Window_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0xd04)]=function(){const _0x46d268=_0x5c342f;Window_Base['prototype'][_0x46d268(0xd04)][_0x46d268(0xded)](this),this[_0x46d268(0xae6)]['fontSize']=VisuMZ[_0x46d268(0xca2)][_0x46d268(0xc90)]['Enemy'][_0x46d268(0x2b4)];},Window_EnemyName[_0x5c342f(0xca4)][_0x5c342f(0x4af)]=function(){const _0x213811=_0x5c342f;Window_StatusBase[_0x213811(0xca4)][_0x213811(0x4af)][_0x213811(0xded)](this),this[_0x213811(0xae6)][_0x213811(0xa52)]();if(!this[_0x213811(0x455)]())return;this[_0x213811(0xae0)]();},Window_EnemyName['prototype']['drawEnemyName']=function(){const _0x5a2434=_0x5c342f;this[_0x5a2434(0xb8f)]=this[_0x5a2434(0x455)]()[_0x5a2434(0x25e)]();const _0x61da4=this[_0x5a2434(0x55e)](this[_0x5a2434(0xb8f)])[_0x5a2434(0x6e4)],_0x3b03fc=Math[_0x5a2434(0x5c1)]((this['innerWidth']-_0x61da4)/0x2);this[_0x5a2434(0xb30)](this['_text'],_0x3b03fc,0x0,_0x61da4+0x8);},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xbc4)]=function(){const _0x420678=_0x5c342f;return VisuMZ[_0x420678(0xca2)][_0x420678(0xc90)][_0x420678(0x831)][_0x420678(0x77e)];},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x8ca)]=function(){const _0x25acfd=_0x5c342f;return VisuMZ[_0x25acfd(0xca2)][_0x25acfd(0xc90)][_0x25acfd(0x831)][_0x25acfd(0x26d)];},Window_BattleLog[_0x5c342f(0xca4)]['backColor']=function(){const _0x557810=_0x5c342f;return VisuMZ[_0x557810(0xca2)]['Settings'][_0x557810(0x831)][_0x557810(0xc3e)];},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xbb7)]=function(){return![];},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xc10)]=function(_0x564bb9,_0xbbaa61){const _0x50c308=_0x5c342f;this[_0x50c308(0xc82)](_0x50c308(0x33d)),BattleManager[_0x50c308(0x798)](_0x564bb9,_0xbbaa61),this[_0x50c308(0x24a)]();},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x9a1)]=function(_0x3e8fd3,_0xf38505,_0x221278){const _0x24877f=_0x5c342f;this[_0x24877f(0xc82)](_0x24877f(0x33d)),BattleManager[_0x24877f(0x7fe)](_0x3e8fd3,_0xf38505,_0x221278),this[_0x24877f(0x24a)]();},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x33d)]=function(){this['callNextMethod']();},Window_BattleLog['prototype'][_0x5c342f(0x843)]=function(_0x19ac2d){const _0x5be14f=_0x5c342f,_0x4d2a9b=Array[_0x5be14f(0xca4)]['slice'][_0x5be14f(0xded)](arguments,0x1),_0x14b395={'name':_0x19ac2d,'params':_0x4d2a9b},_0x52ab26=this[_0x5be14f(0x43b)]['map'](_0x12f348=>_0x12f348[_0x5be14f(0x25e)])[_0x5be14f(0x570)](_0x5be14f(0x33d));_0x52ab26>=0x0?'nLxGH'===_0x5be14f(0xc4d)?this[_0x5be14f(0x43b)][_0x5be14f(0x482)](_0x52ab26,0x0,_0x14b395):this[_0x5be14f(0x69e)](_0x2ff3a0):this[_0x5be14f(0x43b)]['push'](_0x14b395);},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xc82)]=function(_0x52e42d){const _0x22b19b=_0x5c342f,_0x113361=Array[_0x22b19b(0xca4)]['slice'][_0x22b19b(0xded)](arguments,0x1);this[_0x22b19b(0x43b)][_0x22b19b(0xc82)]({'name':_0x52e42d,'params':_0x113361});},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xd5e)]=function(){const _0x2fc863=_0x5c342f;if(!$gameTemp[_0x2fc863(0x1b4)]())return;console[_0x2fc863(0x1c4)](this[_0x2fc863(0x43b)]['map'](_0x2add76=>_0x2add76['name'])[_0x2fc863(0x7fc)]('\x0a'));},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x833)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x4af)],Window_BattleLog[_0x5c342f(0xca4)]['refresh']=function(){const _0x5e30fd=_0x5c342f;this[_0x5e30fd(0xa79)]=!![];},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xe30)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x2a5)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x2a5)]=function(){const _0x23408c=_0x5c342f;VisuMZ[_0x23408c(0xca2)][_0x23408c(0xe30)][_0x23408c(0xded)](this);if(this[_0x23408c(0xa79)])this[_0x23408c(0x631)]();},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x631)]=function(){const _0x2d122f=_0x5c342f;this[_0x2d122f(0xa79)]=![],VisuMZ['BattleCore'][_0x2d122f(0x833)]['call'](this);},Window_BattleLog[_0x5c342f(0xca4)]['drawLineText']=function(_0x32d468){const _0x4dbc09=_0x5c342f;let _0x4bca88=VisuMZ[_0x4dbc09(0xca2)][_0x4dbc09(0xc90)][_0x4dbc09(0x831)][_0x4dbc09(0x810)]['toLowerCase']()[_0x4dbc09(0xa5e)](),_0x37ec16=this[_0x4dbc09(0xbb0)][_0x32d468];if(_0x37ec16['match'](/<LEFT>/i)){if(_0x4dbc09(0x951)===_0x4dbc09(0x951))_0x4bca88=_0x4dbc09(0x16c);else return _0x543d92[_0x4dbc09(0xca2)][_0x4dbc09(0xc90)][_0x4dbc09(0x4f1)][_0x4dbc09(0xa5d)];}else{if(_0x37ec16[_0x4dbc09(0xcbd)](/<CENTER>/i))_0x4bca88='center';else _0x37ec16['match'](/<RIGHT>/i)&&(_0x4bca88=_0x4dbc09(0x1d7));}_0x37ec16=_0x37ec16[_0x4dbc09(0xbc8)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x37ec16=_0x37ec16[_0x4dbc09(0xbc8)](/\\I\[0\]/gi,'');const _0x9ce219=this[_0x4dbc09(0x732)](_0x32d468);this['contents'][_0x4dbc09(0xd21)](_0x9ce219['x'],_0x9ce219['y'],_0x9ce219[_0x4dbc09(0x6e4)],_0x9ce219[_0x4dbc09(0x880)]);const _0x3afc43=this[_0x4dbc09(0x55e)](_0x37ec16)[_0x4dbc09(0x6e4)];let _0x41d4fd=_0x9ce219['x'];if(_0x4bca88===_0x4dbc09(0x83a))'YsUiK'!==_0x4dbc09(0x710)?_0x457ba2=_0x4efb0(_0xd0ae10['$1']):_0x41d4fd+=(_0x9ce219['width']-_0x3afc43)/0x2;else{if(_0x4bca88===_0x4dbc09(0x1d7)){if(_0x4dbc09(0x9b4)!==_0x4dbc09(0xbe6))_0x41d4fd+=_0x9ce219['width']-_0x3afc43;else{if(_0x11ba81['_spriteset'][_0x4dbc09(0xaf3)]())return!![];this[_0x4dbc09(0xcd7)]=_0x4dbc09(0x26c);}}}this[_0x4dbc09(0xb30)](_0x37ec16,_0x41d4fd,_0x9ce219['y'],_0x3afc43+0x8);},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x3ff)]=function(_0x5ccc3a){const _0x121e3c=_0x5c342f;this[_0x121e3c(0xbb0)]['push'](_0x5ccc3a),this['refresh'](),this[_0x121e3c(0x24a)]();},Window_BattleLog['prototype'][_0x5c342f(0x4b2)]=function(){const _0x1aded9=_0x5c342f;let _0x3dc44c=![];switch(this['_waitMode']){case _0x1aded9(0xb88):_0x3dc44c=this['_spriteset'][_0x1aded9(0xe3f)]();break;case _0x1aded9(0xd19):_0x3dc44c=this[_0x1aded9(0x3ed)]['isAnyoneMoving']();break;case _0x1aded9(0x83c):_0x3dc44c=this[_0x1aded9(0x3ed)]['isAnimationPlaying']();break;case _0x1aded9(0xcfe):_0x3dc44c=this[_0x1aded9(0x3ed)][_0x1aded9(0xbdf)]();break;case _0x1aded9(0xd82):_0x3dc44c=this[_0x1aded9(0x3ed)][_0x1aded9(0x9dd)]();break;case _0x1aded9(0xc0c):_0x3dc44c=this[_0x1aded9(0x3ed)][_0x1aded9(0x361)]();break;}return!_0x3dc44c&&(this['_waitMode']=''),_0x3dc44c;},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x793)]=function(){const _0xb373f8=_0x5c342f;this[_0xb373f8(0x430)](_0xb373f8(0x83c));},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xa3c)]=function(){const _0x1c2c90=_0x5c342f;this[_0x1c2c90(0x430)]('float');},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x59c)]=function(){const _0x1ece74=_0x5c342f;this['setWaitMode'](_0x1ece74(0xd82));},Window_BattleLog['prototype'][_0x5c342f(0x428)]=function(){const _0x2e52f8=_0x5c342f;this[_0x2e52f8(0x430)](_0x2e52f8(0xc0c));},Window_BattleLog[_0x5c342f(0xca4)]['startTurn']=function(){const _0x841fb4=_0x5c342f,_0x207d86=VisuMZ[_0x841fb4(0xca2)][_0x841fb4(0xc90)][_0x841fb4(0x831)];if(!_0x207d86['StartTurnShow'])return;this['push'](_0x841fb4(0x3ff),_0x207d86['StartTurnMsg']['format']($gameTroop[_0x841fb4(0x89a)]())),this['push'](_0x841fb4(0x8ee),_0x207d86[_0x841fb4(0xbc3)]),this[_0x841fb4(0x843)](_0x841fb4(0xa52));},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x9e2)]=function(_0x3b7fdf,_0xbf423c,_0x21af5f){const _0x529edc=_0x5c342f;this[_0x529edc(0xb24)](_0xbf423c)?BattleManager[_0x529edc(0x72b)]():this[_0x529edc(0x6f3)](_0x3b7fdf,_0xbf423c,_0x21af5f);},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xb24)]=function(_0x2bca6c){const _0x801e5c=_0x5c342f;if(!SceneManager[_0x801e5c(0x371)]())return![];if(!_0x2bca6c)return![];if(!_0x2bca6c[_0x801e5c(0xa87)]())return![];if(_0x2bca6c[_0x801e5c(0xa87)]()['note'][_0x801e5c(0xcbd)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x801e5c(0xa7d)==='pMLMv')return!![];else{if(!this[_0x801e5c(0xbd5)]())return;if(this[_0x801e5c(0x669)]===_0x559aea)return;this['_targetFloatHeight']=_0x2d1e88,this['_floatDuration']=_0x5c5310,this[_0x801e5c(0x87e)]=_0x3a6c2e,this[_0x801e5c(0xa6b)]=_0x280765||'Linear';if(_0x38c1f4<=0x0)this[_0x801e5c(0x466)]=_0x141719;}}if(DataManager[_0x801e5c(0xbf1)](_0x2bca6c[_0x801e5c(0xa87)]()))return!![];return![];},Window_BattleLog[_0x5c342f(0xca4)]['usePremadeActionSequence']=function(_0x4f9524,_0x4b1d01,_0x48ab67){const _0x1e5895=_0x5c342f;this['setupActionSet'](_0x4f9524,_0x4b1d01,_0x48ab67),this[_0x1e5895(0x7a7)](_0x4f9524,_0x4b1d01,_0x48ab67),this[_0x1e5895(0x9fb)](_0x4f9524,_0x4b1d01,_0x48ab67);},Window_BattleLog['prototype'][_0x5c342f(0x264)]=function(_0x4ae060,_0x23d9e2){const _0x8ffc85=_0x5c342f,_0x15f497=VisuMZ['BattleCore'][_0x8ffc85(0xc90)][_0x8ffc85(0x831)];_0x15f497[_0x8ffc85(0x95a)]&&this[_0x8ffc85(0x843)]('addText',_0x8ffc85(0xc2c)[_0x8ffc85(0x266)](DataManager[_0x8ffc85(0x188)](_0x23d9e2)));if(DataManager[_0x8ffc85(0x334)](_0x23d9e2)){if(_0x15f497[_0x8ffc85(0x477)])this['displayItemMessage'](_0x23d9e2[_0x8ffc85(0x7f5)],_0x4ae060,_0x23d9e2);if(_0x15f497['ActionSkillMsg2'])this['displayItemMessage'](_0x23d9e2[_0x8ffc85(0x33c)],_0x4ae060,_0x23d9e2);}else{if(_0x8ffc85(0xe1a)===_0x8ffc85(0x2c2))_0x4a425e=_0xffb417;else{if(_0x15f497[_0x8ffc85(0x3bc)])this[_0x8ffc85(0xcea)](TextManager[_0x8ffc85(0x36e)],_0x4ae060,_0x23d9e2);}}},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xc27)]=function(_0x4b28c4,_0x39694a,_0x1b61ab){const _0xc64864=_0x5c342f,_0x1520e5=_0x39694a[_0xc64864(0xa87)]();this['displayAction'](_0x4b28c4,_0x1520e5),this[_0xc64864(0x843)]('applyImmortal',_0x4b28c4,_0x1b61ab,!![]),this['push']('performActionStart',_0x4b28c4,_0x39694a),this[_0xc64864(0x843)](_0xc64864(0xd27)),this[_0xc64864(0x843)](_0xc64864(0x96e),_0x4b28c4,_0x39694a),this[_0xc64864(0x843)](_0xc64864(0x793));},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x7a7)]=function(_0x302cb4,_0xe492da,_0x4e4309){const _0x52bd33=_0x5c342f;if(this[_0x52bd33(0x252)](_0xe492da))this['autoMeleeSingleTargetActionSet'](_0x302cb4,_0xe492da,_0x4e4309);else{if(this[_0x52bd33(0xdc3)](_0xe492da))this[_0x52bd33(0xb25)](_0x302cb4,_0xe492da,_0x4e4309);else{if(_0xe492da['isForRandom']()){if(_0x52bd33(0xab1)!==_0x52bd33(0x673))this[_0x52bd33(0x8d1)](_0x302cb4,_0xe492da,_0x4e4309);else{const _0x57d9c9=_0x1dfa6e[_0x52bd33(0x570)](this[_0x52bd33(0xdda)]());_0x56a66a[_0x57d9c9]=_0x84564b[_0x4599a9['randomInt'](_0x205f06[_0x52bd33(0xc5c)])];}}else this['wholeActionSet'](_0x302cb4,_0xe492da,_0x4e4309);}}},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x6ea)]=function(_0x425b91,_0x472d72,_0x256c38,_0x51e39a){const _0x11b14b=_0x5c342f;if(_0x472d72){if('qfnTS'===_0x11b14b(0x463))this[_0x11b14b(0xcde)](0x1);else{const _0x128fe1=_0x425b91['battler']();this[_0x11b14b(0x843)](_0x11b14b(0x5db),[_0x425b91],_0x256c38,_0x51e39a),this[_0x11b14b(0x843)](_0x11b14b(0x803),_0x425b91,_0x128fe1['_homeX'],_0x128fe1[_0x11b14b(0x3f1)],_0x51e39a,![],'Linear'),this[_0x11b14b(0x843)]('requestMotion',[_0x425b91],'evade'),this[_0x11b14b(0x843)](_0x11b14b(0xd27)),this[_0x11b14b(0x843)](_0x11b14b(0x92b),[_0x425b91],_0x11b14b(0xa6f));}}},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x252)]=function(_0x426caf){const _0x49b4f8=_0x5c342f;if(!_0x426caf[_0x49b4f8(0x5f9)]())return![];if(!_0x426caf['isForOne']())return![];if(!_0x426caf[_0x49b4f8(0x932)]())return![];return VisuMZ['BattleCore']['Settings'][_0x49b4f8(0xb55)][_0x49b4f8(0x443)];},Window_BattleLog['prototype']['autoMeleeSingleTargetActionSet']=function(_0xcec21e,_0x1bf842,_0x5ac75d){const _0x27c1b3=_0x5c342f,_0x2edecd=_0xcec21e['getAttackMotion']()[_0x27c1b3(0xb48)]<0x2,_0x131d52=0x14,_0x5e72c5=0x30;let _0x489fbe=!![];if(_0x5ac75d[_0x27c1b3(0xc5c)]>0x0&&_0xcec21e[_0x27c1b3(0x47b)]()===_0x5ac75d[0x0][_0x27c1b3(0x47b)]()){if(_0x27c1b3(0x5b8)!==_0x27c1b3(0x5b8)){const _0x2fbcb7=_0x2c65f6[_0x27c1b3(0xbcc)][_0x27c1b3(0xc90)]['States'];_0x2fbcb7&&_0x2fbcb7[_0x27c1b3(0xda5)]===![]&&this[_0x27c1b3(0xcde)](0x1);}else _0x489fbe=![];}_0x2edecd&&_0x489fbe&&(this[_0x27c1b3(0x843)]('performJump',[_0xcec21e],_0x5e72c5,_0x131d52),this[_0x27c1b3(0x843)]('performMoveToTargets',_0xcec21e,_0x5ac75d,'front\x20base',_0x131d52,!![],_0x27c1b3(0x7bc),!![]),this['push']('requestMotion',[_0xcec21e],'walk'),this[_0x27c1b3(0x843)](_0x27c1b3(0xd27)));let _0x205541=_0x1bf842[_0x27c1b3(0xc73)]()?this[_0x27c1b3(0x86c)](_0xcec21e):0x1;for(let _0x149cdb=0x0;_0x149cdb<_0x205541;_0x149cdb++){if(_0x1bf842[_0x27c1b3(0xc73)]()&&_0xcec21e[_0x27c1b3(0x47b)]()){if(_0x27c1b3(0x82b)===_0x27c1b3(0x82b))this[_0x27c1b3(0x843)](_0x27c1b3(0x5d2),_0xcec21e,_0x149cdb);else{if(!this[_0x27c1b3(0x35e)]())return;const _0x58509e=this[_0x27c1b3(0x5b7)](),_0x41d9c7=_0x42273b['BattleCore'][_0x27c1b3(0xc90)][_0x27c1b3(0x7e4)][_0x27c1b3(0x86d)],_0x80f6e6=_0x58509e===_0x27c1b3(0x911)?_0x210209[_0x27c1b3(0x659)]:_0x27c1b3(0x973)[_0x27c1b3(0x266)](_0x41d9c7,_0x19e686['autoBattle']),_0x5bdf5d=this[_0x27c1b3(0x1cc)]();this[_0x27c1b3(0xb75)](_0x80f6e6,_0x27c1b3(0x659),_0x5bdf5d);}}if(_0x1bf842[_0x27c1b3(0xa87)]()['animationId']<0x0){if(_0x27c1b3(0x2f7)!==_0x27c1b3(0x2f7)){_0xa4be57=_0x54193d||0x1,_0x11f37a--;const _0x4e4842=this[_0x27c1b3(0xe3b)]();return _0x4e4842[_0x2ceeba]?_0x4e4842[_0x4363be][_0x27c1b3(0xdaa)]:0x0;}else this[_0x27c1b3(0x8d1)](_0xcec21e,_0x1bf842,_0x5ac75d);}else this[_0x27c1b3(0x452)](_0xcec21e,_0x1bf842,_0x5ac75d);}_0x1bf842['isAttack']()&&_0xcec21e[_0x27c1b3(0x47b)]()&&this[_0x27c1b3(0x843)](_0x27c1b3(0x852),_0xcec21e),this['push'](_0x27c1b3(0x41f),_0xcec21e,_0x5ac75d,![]),this[_0x27c1b3(0x6ea)](_0xcec21e,_0x2edecd,_0x5e72c5,_0x131d52);},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xdc3)]=function(_0x1ac4da){const _0x48c61b=_0x5c342f;if(!_0x1ac4da[_0x48c61b(0x5f9)]())return![];if(!_0x1ac4da[_0x48c61b(0x9fe)]())return![];if(!_0x1ac4da[_0x48c61b(0x932)]())return![];return VisuMZ['BattleCore']['Settings'][_0x48c61b(0xb55)]['AutoMeleeAoE'];},Window_BattleLog[_0x5c342f(0xca4)]['autoMeleeMultiTargetActionSet']=function(_0x425817,_0x2944e2,_0x5a6bf3){const _0x36e007=_0x5c342f,_0x45f03a=_0x425817['getAttackMotion']()[_0x36e007(0xb48)]<0x2,_0x1711cd=0x14,_0x14a400=0x30;if(_0x45f03a){this[_0x36e007(0x843)]('performJump',[_0x425817],_0x14a400,_0x1711cd);const _0x50f918=_0x5a6bf3[_0x36e007(0xc5c)]>0x1?_0x36e007(0x44e):_0x36e007(0x7ed);this[_0x36e007(0x843)]('performMoveToTargets',_0x425817,_0x5a6bf3,_0x50f918,_0x1711cd,!![],_0x36e007(0x7bc),!![]),this['push'](_0x36e007(0x92b),[_0x425817],_0x36e007(0xa6f)),this['push'](_0x36e007(0xd27));}let _0x5e6c44=_0x2944e2['isAttack']()?this[_0x36e007(0x86c)](_0x425817):0x1;for(let _0x2fc4f5=0x0;_0x2fc4f5<_0x5e6c44;_0x2fc4f5++){if(_0x36e007(0xa8b)==='znsua'){if(_0x2944e2['isAttack']()&&_0x425817[_0x36e007(0x47b)]()){if('KonNp'!==_0x36e007(0x18d))this[_0x36e007(0x843)]('setActiveWeaponSet',_0x425817,_0x2fc4f5);else{const _0x21ef43=this[_0x36e007(0x6cd)][_0x36e007(0x598)][_0x36e007(0x3fd)](new _0x1ecda3(0x0,0x0)),_0x55aa95=this[_0x36e007(0x6cd)]['filterArea'];_0x55aa95['x']=_0x21ef43['x']+this[_0x36e007(0x96c)]['x'],_0x55aa95['y']=_0x21ef43['y']+this[_0x36e007(0x96c)]['y'],_0x55aa95[_0x36e007(0x6e4)]=this['innerWidth'],_0x55aa95['height']=this[_0x36e007(0x2d2)];}}this['wholeActionSet'](_0x425817,_0x2944e2,_0x5a6bf3);}else{if(!_0x580d19['isSceneBattle']())return;const _0x47f114=_0x1310ab['_logWindow'];_0x47f114[_0x36e007(0x3c2)]();}}_0x2944e2[_0x36e007(0xc73)]()&&_0x425817[_0x36e007(0x47b)]()&&this['push'](_0x36e007(0x852),_0x425817),this[_0x36e007(0x843)](_0x36e007(0x41f),_0x425817,_0x5a6bf3,![]),this[_0x36e007(0x6ea)](_0x425817,_0x45f03a,_0x14a400,_0x1711cd);},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x8d1)]=function(_0x3ef00f,_0x35e506,_0x4b560c){const _0x534d0d=_0x5c342f,_0x4db948=_0x35e506[_0x534d0d(0xa87)]();for(const _0x1ffff9 of _0x4b560c){if(!_0x1ffff9)continue;this[_0x534d0d(0x843)](_0x534d0d(0x7d1),_0x3ef00f,_0x35e506),this[_0x534d0d(0x843)](_0x534d0d(0x8ee),Sprite_Battler[_0x534d0d(0xaa4)]),this[_0x534d0d(0x843)](_0x534d0d(0x22a),_0x3ef00f,[_0x1ffff9],_0x4db948['animationId']),this[_0x534d0d(0x843)](_0x534d0d(0x8ee),0x18),this['push'](_0x534d0d(0xc10),_0x3ef00f,_0x1ffff9);}},Window_BattleLog['prototype']['wholeActionSet']=function(_0x4f61f6,_0x31c9bb,_0xd869e8){const _0x486a32=_0x5c342f,_0x4b4b5b=_0x31c9bb[_0x486a32(0xa87)]();let _0x3f7c8e=_0x31c9bb[_0x486a32(0xc73)]()?0x1+_0x4f61f6[_0x486a32(0xe13)]():0x1;while(_0x3f7c8e--){if('pAjfN'==='JviSa'){const _0x217de3=this[_0x486a32(0x9bc)]||'',_0xa0e5d2=_0x2763df['getBattlerFromKey'](_0x217de3);if(!_0xa0e5d2)return this['getBattlerKeyTargetReplacement']();if(!_0xa0e5d2['isAlive']())return this[_0x486a32(0xdec)]();return _0xa0e5d2;}else this[_0x486a32(0x843)](_0x486a32(0x7d1),_0x4f61f6,_0x31c9bb),this['push'](_0x486a32(0x8ee),Sprite_Battler['_motionSpeed']),this[_0x486a32(0x843)]('showAnimation',_0x4f61f6,_0xd869e8[_0x486a32(0x1ec)](),_0x4b4b5b['animationId']),this['push'](_0x486a32(0x793));}for(const _0x5d46e7 of _0xd869e8){if(!_0x5d46e7)continue;this[_0x486a32(0x843)](_0x486a32(0xc10),_0x4f61f6,_0x5d46e7);}},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x9fb)]=function(_0x54abcf,_0x16dac0,_0x202c84){const _0x1bfb70=_0x5c342f,_0x3245c3=_0x16dac0[_0x1bfb70(0xa87)]();this[_0x1bfb70(0x843)](_0x1bfb70(0x41f),_0x54abcf,_0x202c84,![]),this['push'](_0x1bfb70(0x576)),this['push'](_0x1bfb70(0x47e)),this[_0x1bfb70(0x843)]('clear'),this[_0x1bfb70(0x843)](_0x1bfb70(0x71b),_0x54abcf),this['push'](_0x1bfb70(0xd27));},Window_BattleLog['prototype']['endAction']=function(_0x3ad670){},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc0b)]=Window_BattleLog[_0x5c342f(0xca4)]['displayCurrentState'],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x4d1)]=function(_0x132fd1){const _0x452478=_0x5c342f;if(!VisuMZ[_0x452478(0xca2)][_0x452478(0xc90)][_0x452478(0x831)][_0x452478(0x6da)])return;VisuMZ[_0x452478(0xca2)][_0x452478(0xc0b)][_0x452478(0xded)](this,_0x132fd1);},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x779)]=function(_0x5eeb19){const _0x5e06e7=_0x5c342f;this['push'](_0x5e06e7(0x6fe),_0x5eeb19);VisuMZ[_0x5e06e7(0xca2)]['Settings']['ActionSequence'][_0x5e06e7(0xa7e)]&&this[_0x5e06e7(0x843)](_0x5e06e7(0x22a),_0x5eeb19,[BattleManager[_0x5e06e7(0x52b)]],-0x1);if(!VisuMZ[_0x5e06e7(0xca2)][_0x5e06e7(0xc90)][_0x5e06e7(0x831)][_0x5e06e7(0x970)])return;this['push'](_0x5e06e7(0x3ff),TextManager[_0x5e06e7(0x531)][_0x5e06e7(0x266)](_0x5eeb19['name']()));},Window_BattleLog[_0x5c342f(0xca4)]['displayReflection']=function(_0x5fc25e){const _0x22b409=_0x5c342f;this[_0x22b409(0x843)](_0x22b409(0x8d5),_0x5fc25e);if(!VisuMZ[_0x22b409(0xca2)]['Settings']['BattleLog'][_0x22b409(0x4b6)])return;this[_0x22b409(0x843)]('addText',TextManager[_0x22b409(0x516)]['format'](_0x5fc25e[_0x22b409(0x25e)]()));},Window_BattleLog[_0x5c342f(0xca4)]['displayReflectionPlayBack']=function(_0x4c3ba0,_0x24c21d){const _0x4b2c52=_0x5c342f;if(VisuMZ['BattleCore'][_0x4b2c52(0xc90)][_0x4b2c52(0xb55)][_0x4b2c52(0xd65)]){const _0x436db7=_0x24c21d[_0x4b2c52(0xa87)]();this['push']('showAnimation',_0x4c3ba0,[_0x4c3ba0],_0x436db7[_0x4b2c52(0xdaa)]);}},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x38d)]=function(_0x5bcc53,_0x5bf95c){const _0x208051=_0x5c342f;this[_0x208051(0x843)](_0x208051(0x330),_0x5bcc53,_0x5bf95c);if(!VisuMZ[_0x208051(0xca2)]['Settings'][_0x208051(0x831)]['ShowSubstitute'])return;const _0x2a1776=_0x5bcc53[_0x208051(0x25e)](),_0x4e9a71=TextManager[_0x208051(0xabf)][_0x208051(0x266)](_0x2a1776,_0x5bf95c[_0x208051(0x25e)]());this[_0x208051(0x843)](_0x208051(0x3ff),_0x4e9a71);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x522)]=Window_BattleLog[_0x5c342f(0xca4)]['displayActionResults'],Window_BattleLog['prototype'][_0x5c342f(0xa34)]=function(_0x1ab175,_0xb56122){const _0x4f2943=_0x5c342f;VisuMZ[_0x4f2943(0xca2)][_0x4f2943(0x522)][_0x4f2943(0xded)](this,_0x1ab175,_0xb56122);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x716)]=Window_BattleLog[_0x5c342f(0xca4)]['displayFailure'],Window_BattleLog[_0x5c342f(0xca4)]['displayFailure']=function(_0x5790a6){const _0x27d85a=_0x5c342f;if(!VisuMZ[_0x27d85a(0xca2)][_0x27d85a(0xc90)][_0x27d85a(0x831)]['ShowFailure'])return;VisuMZ[_0x27d85a(0xca2)][_0x27d85a(0x716)][_0x27d85a(0xded)](this,_0x5790a6);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xdba)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xad3)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xad3)]=function(_0x57c088){const _0x285945=_0x5c342f;if(!VisuMZ[_0x285945(0xca2)][_0x285945(0xc90)]['BattleLog']['ShowCritical'])return;VisuMZ[_0x285945(0xca2)]['Window_BattleLog_displayCritical'][_0x285945(0xded)](this,_0x57c088);},VisuMZ['BattleCore']['Window_BattleLog_displayMiss']=Window_BattleLog['prototype'][_0x5c342f(0xa6e)],Window_BattleLog[_0x5c342f(0xca4)]['displayMiss']=function(_0x204d31){const _0x56deb9=_0x5c342f;!VisuMZ['BattleCore'][_0x56deb9(0xc90)]['BattleLog'][_0x56deb9(0xcb5)]?'qTjaE'!==_0x56deb9(0x2e7)?this[_0x56deb9(0x843)](_0x56deb9(0x380),_0x204d31):this[_0x56deb9(0x40a)](_0x56deb9(0xc98)):_0x56deb9(0x16e)===_0x56deb9(0xa70)?(this[_0x56deb9(0x697)]=this[_0x56deb9(0x697)]||0x0,this[_0x56deb9(0x697)]++,this[_0x56deb9(0x4c7)]={}):VisuMZ[_0x56deb9(0xca2)]['Window_BattleLog_displayMiss']['call'](this,_0x204d31);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x56b)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x889)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x889)]=function(_0x2bfec3){const _0x1cec3=_0x5c342f;if(!VisuMZ[_0x1cec3(0xca2)][_0x1cec3(0xc90)][_0x1cec3(0x831)][_0x1cec3(0xcb5)]){if('rvnlF'!==_0x1cec3(0x32a)){if(!_0x1e2bed[_0x1cec3(0x9a3)]())return;const _0x40a63d=this[_0x1cec3(0x9d3)]();if(!_0x40a63d)return;this[_0x1cec3(0x47b)]()&&(_0x140e67*=-0x1,_0x4f0804*=-0x1),_0x40a63d[_0x1cec3(0xd6c)](_0x26c2e1,_0x37615b,_0xb58cc3,_0x22242e);}else{if(_0x2bfec3[_0x1cec3(0xcb2)]()[_0x1cec3(0xd10)])this[_0x1cec3(0x843)](_0x1cec3(0x22c),_0x2bfec3);else{if(_0x1cec3(0xd96)!==_0x1cec3(0x82a))this[_0x1cec3(0x843)](_0x1cec3(0xbbd),_0x2bfec3);else{const _0xf7c74d=_0x4e2ee2[_0x1cec3(0xa87)]();this[_0x1cec3(0x843)](_0x1cec3(0x41f),_0x21c98d,_0x302f0e,![]),this[_0x1cec3(0x843)](_0x1cec3(0x576)),this[_0x1cec3(0x843)](_0x1cec3(0x47e)),this[_0x1cec3(0x843)](_0x1cec3(0xa52)),this[_0x1cec3(0x843)]('performActionEnd',_0x3d83ca),this['push']('waitForMovement');}}}}else _0x1cec3(0x385)===_0x1cec3(0x5c8)?_0x452f84=(_0x14e62c+_0x25b9b8)/0x2:VisuMZ[_0x1cec3(0xca2)][_0x1cec3(0x56b)][_0x1cec3(0xded)](this,_0x2bfec3);},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xb5d)]=function(_0x54094d){const _0x1a6357=_0x5c342f;if(_0x54094d['result']()[_0x1a6357(0xca0)]){_0x54094d['_lastHpDamage']=0x0;_0x54094d[_0x1a6357(0xcb2)]()[_0x1a6357(0x81a)]>0x0&&!_0x54094d[_0x1a6357(0xcb2)]()[_0x1a6357(0x5ad)]&&(_0x1a6357(0x86f)===_0x1a6357(0xb6e)?this[_0x1a6357(0x69f)](_0x32c74d['weaponImageId']):(_0x54094d[_0x1a6357(0x99b)]=_0x54094d['result']()[_0x1a6357(0x81a)],this['push'](_0x1a6357(0x2bc),_0x54094d)));_0x54094d['result']()[_0x1a6357(0x81a)]<0x0&&(_0x1a6357(0x7d7)!=='NGthr'?this[_0x1a6357(0x843)]('performRecovery',_0x54094d):(_0x2d46e8[_0x1a6357(0x6e4)]=_0x4f19da(_0x5af7cf['$1']),_0x3e66ed[_0x1a6357(0x880)]=_0x4c959e(_0x11331d['$2'])));if(VisuMZ[_0x1a6357(0xca2)][_0x1a6357(0xc90)]['BattleLog'][_0x1a6357(0x411)]){if(_0x1a6357(0x42d)==='DxfVK')this[_0x1a6357(0x843)]('addText',this[_0x1a6357(0x8d6)](_0x54094d));else{const _0x9b143b=[];for(let _0x1541f6=0x0;_0x1541f6<this[_0x1a6357(0xabe)]();_0x1541f6++){_0x9b143b['push'](_0x12e135['trueRandomTarget']());}return _0x9b143b;}}}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x836)]=Window_BattleLog[_0x5c342f(0xca4)]['displayMpDamage'],Window_BattleLog['prototype'][_0x5c342f(0x30e)]=function(_0x2731b7){const _0x2e295f=_0x5c342f;if(!VisuMZ[_0x2e295f(0xca2)][_0x2e295f(0xc90)][_0x2e295f(0x831)][_0x2e295f(0x7b4)])return;VisuMZ[_0x2e295f(0xca2)][_0x2e295f(0x836)][_0x2e295f(0xded)](this,_0x2731b7);},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x9ec)]=Window_BattleLog[_0x5c342f(0xca4)]['displayTpDamage'],Window_BattleLog[_0x5c342f(0xca4)]['displayTpDamage']=function(_0x338eff){const _0x40f00d=_0x5c342f;if(!VisuMZ[_0x40f00d(0xca2)][_0x40f00d(0xc90)][_0x40f00d(0x831)][_0x40f00d(0x544)])return;VisuMZ[_0x40f00d(0xca2)][_0x40f00d(0x9ec)][_0x40f00d(0xded)](this,_0x338eff);},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xc00)]=function(_0x1a62a5){const _0x1ac137=_0x5c342f;_0x1a62a5[_0x1ac137(0xcb2)]()[_0x1ac137(0x8c0)]()&&(_0x1ac137(0x701)!==_0x1ac137(0x701)?(_0x2c6f41[_0x1ac137(0xca2)][_0x1ac137(0x676)][_0x1ac137(0xded)](this,_0x5b2c26),this[_0x1ac137(0x3e3)](_0x10d0b8)):(this[_0x1ac137(0x843)](_0x1ac137(0x236)),this[_0x1ac137(0x808)](_0x1a62a5),this[_0x1ac137(0xd75)](_0x1a62a5),this[_0x1ac137(0x843)]('waitForNewLine')));},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x1c9)]=function(_0x11bbc7){const _0x4e6a2c=_0x5c342f,_0x9ee5e1=_0x11bbc7[_0x4e6a2c(0xcb2)](),_0x49178c=_0x9ee5e1[_0x4e6a2c(0x512)]();for(const _0x14a653 of _0x49178c){if(_0x4e6a2c(0x960)!==_0x4e6a2c(0x960)){if(this[_0x4e6a2c(0xb27)])_0xdead30=_0x446774[_0x4e6a2c(0xaee)](0x0,this[_0x4e6a2c(0xb27)]['height']-0x4);}else{const _0xb25c9f=_0x11bbc7[_0x4e6a2c(0x47b)]()?_0x14a653[_0x4e6a2c(0x7f5)]:_0x14a653[_0x4e6a2c(0x33c)];_0xb25c9f&&VisuMZ[_0x4e6a2c(0xca2)]['Settings'][_0x4e6a2c(0x831)][_0x4e6a2c(0xa48)]&&(this[_0x4e6a2c(0x843)]('fnordAddedStates'),this['push'](_0x4e6a2c(0x3c2)),this[_0x4e6a2c(0x843)]('pushBaseLine'),this['push']('addText',_0xb25c9f[_0x4e6a2c(0x266)](_0x11bbc7[_0x4e6a2c(0x25e)]())),this[_0x4e6a2c(0x843)](_0x4e6a2c(0x630))),_0x14a653['id']===_0x11bbc7[_0x4e6a2c(0xcd2)]()&&this['push'](_0x4e6a2c(0x5b6),_0x11bbc7);}}},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x37d)]=function(){},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xc72)]=function(_0x5c6012){const _0x12faa8=_0x5c342f;if(!VisuMZ['BattleCore'][_0x12faa8(0xc90)]['BattleLog']['ShowRemovedState'])return;const _0x48c6fc=_0x5c6012['result'](),_0x3d2627=_0x48c6fc[_0x12faa8(0xcfd)]();for(const _0x46ab4d of _0x3d2627){_0x12faa8(0x655)!==_0x12faa8(0x655)?this['requestMotion'](_0x12faa8(0x774)):_0x46ab4d['message4']&&(this['push'](_0x12faa8(0xd56)),this[_0x12faa8(0x843)](_0x12faa8(0x3c2)),this[_0x12faa8(0x843)](_0x12faa8(0x236)),this[_0x12faa8(0x843)](_0x12faa8(0x3ff),_0x46ab4d[_0x12faa8(0xa9b)][_0x12faa8(0x266)](_0x5c6012['name']())),this['push'](_0x12faa8(0x630)));}},Window_BattleLog[_0x5c342f(0xca4)]['fnordRemovedStates']=function(){},Window_BattleLog['prototype'][_0x5c342f(0xd75)]=function(_0x9f7d5c){const _0x351819=_0x5c342f,_0x4685d8=VisuMZ[_0x351819(0xca2)][_0x351819(0xc90)][_0x351819(0x831)],_0x3e6ba6=_0x9f7d5c[_0x351819(0xcb2)]();if(_0x4685d8[_0x351819(0x593)])this[_0x351819(0x177)](_0x9f7d5c,_0x3e6ba6[_0x351819(0x1c8)],TextManager[_0x351819(0xac7)]);if(_0x4685d8[_0x351819(0x258)])this['displayBuffs'](_0x9f7d5c,_0x3e6ba6[_0x351819(0x90b)],TextManager[_0x351819(0xbfc)]);if(_0x4685d8[_0x351819(0x4dc)])this[_0x351819(0x177)](_0x9f7d5c,_0x3e6ba6[_0x351819(0xaaf)],TextManager[_0x351819(0x695)]);},Window_BattleLog[_0x5c342f(0xca4)]['displayBuffs']=function(_0xfd23c4,_0x35d982,_0x3164e2){const _0x4376a2=_0x5c342f;for(const _0x443a6a of _0x35d982){const _0x2b3654=_0x3164e2[_0x4376a2(0x266)](_0xfd23c4['name'](),TextManager[_0x4376a2(0x257)](_0x443a6a));this[_0x4376a2(0x843)](_0x4376a2(0x3c2)),this[_0x4376a2(0x843)](_0x4376a2(0x236)),this['push']('addText',_0x2b3654),this[_0x4376a2(0x843)]('wait');}},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x413)]=Window_BattleLog['prototype'][_0x5c342f(0xa52)],Window_BattleLog[_0x5c342f(0xca4)]['clear']=function(){const _0x3d3f09=_0x5c342f;VisuMZ[_0x3d3f09(0xca2)][_0x3d3f09(0x413)]['call'](this),this['callNextMethod']();},VisuMZ[_0x5c342f(0xca2)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x5c342f(0xca4)]['pushBaseLine'],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x236)]=function(){const _0x42b0a5=_0x5c342f;VisuMZ['BattleCore'][_0x42b0a5(0x1da)][_0x42b0a5(0xded)](this),this[_0x42b0a5(0x24a)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x407)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x3c2)],Window_BattleLog['prototype'][_0x5c342f(0x3c2)]=function(){const _0x5490f0=_0x5c342f;VisuMZ[_0x5490f0(0xca2)][_0x5490f0(0x407)][_0x5490f0(0xded)](this),this[_0x5490f0(0x631)](),this[_0x5490f0(0x24a)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x96b)]=Window_BattleLog[_0x5c342f(0xca4)]['popupDamage'],Window_BattleLog[_0x5c342f(0xca4)]['popupDamage']=function(_0x4e0683){const _0x3d3000=_0x5c342f;VisuMZ['BattleCore']['Window_BattleLog_popupDamage'][_0x3d3000(0xded)](this,_0x4e0683),this[_0x3d3000(0x24a)]();},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x576)]=function(){const _0x1b133c=_0x5c342f;let _0x202213=0x0;this[_0x1b133c(0x3ac)][_0x1b133c(0xc5c)]>0x0&&(_0x202213=this['_baseLineStack'][this['_baseLineStack'][_0x1b133c(0xc5c)]-0x1]),this[_0x1b133c(0xbb0)][_0x1b133c(0xc5c)]>_0x202213?this[_0x1b133c(0x630)]():this['callNextMethod']();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xdc4)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x551)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x551)]=function(_0x247cb1,_0x349892){const _0x43ba47=_0x5c342f;VisuMZ[_0x43ba47(0xca2)]['Window_BattleLog_performActionStart'][_0x43ba47(0xded)](this,_0x247cb1,_0x349892),this[_0x43ba47(0x24a)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xcd0)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x7d1)],Window_BattleLog['prototype'][_0x5c342f(0x7d1)]=function(_0x2cf06d,_0x462838){const _0x7b017a=_0x5c342f;VisuMZ['BattleCore'][_0x7b017a(0xcd0)][_0x7b017a(0xded)](this,_0x2cf06d,_0x462838),this[_0x7b017a(0x24a)]();},VisuMZ[_0x5c342f(0xca2)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x71b)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x71b)]=function(_0x682f3d){const _0x1e3a45=_0x5c342f;VisuMZ[_0x1e3a45(0xca2)]['Window_BattleLog_performActionEnd'][_0x1e3a45(0xded)](this,_0x682f3d);for(const _0x46557e of BattleManager['allBattleMembers']()){if(!_0x46557e)continue;if(_0x46557e['isDead']())continue;_0x46557e[_0x1e3a45(0xb18)]();}this['callNextMethod']();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x763)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x2bc)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x2bc)]=function(_0x18167c){const _0x58dea6=_0x5c342f;VisuMZ['BattleCore']['Window_BattleLog_performDamage'][_0x58dea6(0xded)](this,_0x18167c),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performMiss']=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x380)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x380)]=function(_0x298ee5){const _0x47e181=_0x5c342f;VisuMZ[_0x47e181(0xca2)][_0x47e181(0x5f4)]['call'](this,_0x298ee5),this[_0x47e181(0x24a)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xb84)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xbf6)],Window_BattleLog['prototype']['performRecovery']=function(_0x208e6a){const _0x571f54=_0x5c342f;VisuMZ[_0x571f54(0xca2)]['Window_BattleLog_performRecovery']['call'](this,_0x208e6a),this[_0x571f54(0x24a)]();},VisuMZ['BattleCore']['Window_BattleLog_performEvasion']=Window_BattleLog[_0x5c342f(0xca4)]['performEvasion'],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x22c)]=function(_0x2be651){const _0x3fbbf3=_0x5c342f;VisuMZ['BattleCore'][_0x3fbbf3(0x622)][_0x3fbbf3(0xded)](this,_0x2be651),this[_0x3fbbf3(0x24a)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xa59)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xbbd)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xbbd)]=function(_0x7a9388){const _0x307645=_0x5c342f;VisuMZ[_0x307645(0xca2)][_0x307645(0xa59)][_0x307645(0xded)](this,_0x7a9388),this[_0x307645(0x24a)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x666)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x6fe)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x6fe)]=function(_0x37d5fb){const _0x18d7e0=_0x5c342f;VisuMZ[_0x18d7e0(0xca2)][_0x18d7e0(0x666)][_0x18d7e0(0xded)](this,_0x37d5fb),this[_0x18d7e0(0x24a)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x1d8)]=Window_BattleLog[_0x5c342f(0xca4)]['performReflection'],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x8d5)]=function(_0x3a05f4){const _0x3ffeb2=_0x5c342f;VisuMZ[_0x3ffeb2(0xca2)][_0x3ffeb2(0x1d8)]['call'](this,_0x3a05f4),this[_0x3ffeb2(0x24a)]();},VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0x4d6)]=Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x330)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x330)]=function(_0x15367e,_0x13eb2b){const _0x19f8e1=_0x5c342f;VisuMZ[_0x19f8e1(0xca2)][_0x19f8e1(0x4d6)][_0x19f8e1(0xded)](this,_0x15367e,_0x13eb2b),this['callNextMethod']();},VisuMZ['BattleCore'][_0x5c342f(0x1c3)]=Window_BattleLog['prototype'][_0x5c342f(0x5b6)],Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x5b6)]=function(_0x2590aa){const _0x3a3636=_0x5c342f;VisuMZ[_0x3a3636(0xca2)][_0x3a3636(0x1c3)]['call'](this,_0x2590aa),this[_0x3a3636(0x24a)]();},Window_BattleLog['prototype'][_0x5c342f(0x96e)]=function(_0x482383,_0x2b3250){const _0x54b894=_0x5c342f;_0x482383[_0x54b894(0x96e)](_0x2b3250),this['callNextMethod']();},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0xdde)]=function(_0x5af3ab,_0x5a4ec0){const _0x4718c4=_0x5c342f,_0x4883f2=_0x5af3ab[_0x4718c4(0x8fd)]();_0x4883f2<=0x0?SoundManager[_0x4718c4(0xe21)]():this[_0x4718c4(0x251)](_0x5a4ec0,_0x4883f2);},Window_BattleLog['prototype']['applyImmortal']=function(_0x4e0332,_0x2cf19c,_0x3b7042){const _0x1bfefd=_0x5c342f,_0x5b9752=[_0x4e0332]['concat'](_0x2cf19c);for(const _0x107cb0 of _0x5b9752){if(!_0x107cb0)continue;_0x107cb0[_0x1bfefd(0x881)](_0x3b7042);}this[_0x1bfefd(0x24a)]();},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x8ee)]=function(_0x58c06c){this['_waitCount']=_0x58c06c;},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x92b)]=function(_0x542f02,_0xcc2098){const _0x520838=_0x5c342f;for(const _0x328fda of _0x542f02){if(_0x520838(0xa1d)!=='fJkXG')_0x524f27=![];else{if(!_0x328fda)continue;_0x328fda['requestMotion'](_0xcc2098);}}this[_0x520838(0x24a)]();},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x803)]=function(_0x3929aa,_0x4cd959,_0x34fde6,_0x16e8d4,_0x11a61c,_0x1b2351){_0x3929aa['moveBattlerToPoint'](_0x4cd959,_0x34fde6,_0x16e8d4,_0x11a61c,_0x1b2351,-0x1),this['callNextMethod']();},Window_BattleLog['prototype'][_0x5c342f(0x720)]=function(_0xeb66ab,_0x426469,_0x5ccd6c,_0x257bd8,_0x5711fa,_0xe1cc01,_0x17efa9){const _0x38135c=_0x5c342f,_0x4ec3f8=Math[_0x38135c(0x7b9)](..._0x426469[_0x38135c(0xd08)](_0x4e9a2b=>_0x4e9a2b[_0x38135c(0x9d3)]()['_baseX']-_0x4e9a2b[_0x38135c(0x9d3)]()[_0x38135c(0x56a)]()/0x2)),_0x226fb0=Math[_0x38135c(0xaee)](..._0x426469[_0x38135c(0xd08)](_0x43a505=>_0x43a505[_0x38135c(0x9d3)]()['_baseX']+_0x43a505[_0x38135c(0x9d3)]()[_0x38135c(0x56a)]()/0x2)),_0x1931a4=Math[_0x38135c(0x7b9)](..._0x426469[_0x38135c(0xd08)](_0x4fba39=>_0x4fba39[_0x38135c(0x9d3)]()[_0x38135c(0x256)]-_0x4fba39[_0x38135c(0x9d3)]()[_0x38135c(0x5d7)]())),_0x322b7a=Math[_0x38135c(0xaee)](..._0x426469[_0x38135c(0xd08)](_0x17855f=>_0x17855f[_0x38135c(0x9d3)]()[_0x38135c(0x256)])),_0x2ec1f2=_0x426469[_0x38135c(0x3cd)](_0x5224be=>_0x5224be['isActor']())[_0x38135c(0xc5c)],_0x3b428e=_0x426469['filter'](_0x162de1=>_0x162de1[_0x38135c(0x796)]())[_0x38135c(0xc5c)];let _0xff7f7b=0x0,_0x11efa6=0x0;if(_0x5ccd6c[_0x38135c(0xcbd)](/front/i))_0xff7f7b=_0x2ec1f2>=_0x3b428e?_0x4ec3f8:_0x226fb0;else{if(_0x5ccd6c[_0x38135c(0xcbd)](/middle/i)){if('Inxhs'===_0x38135c(0x975)){if(this[_0x38135c(0xd5b)]())return _0x3b2d27;const _0x569bc8=this[_0x38135c(0xdda)](),_0x2765f2=_0x4b12a6;let _0x550df5=[],_0x2a5ff3=[];_0x550df5[_0x38135c(0x843)](this[_0x38135c(0xb97)][_0x38135c(0x4b4)],this[_0x38135c(0xb97)]['arRedFlat']),_0x2a5ff3['push'](this['_armorPenetration'][_0x38135c(0x9c4)],this[_0x38135c(0xb97)]['arRedRate']);const _0x18f34d=this[_0x38135c(0x5f9)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0xa93fd0=this[_0x38135c(0x5f9)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x361190=this[_0x38135c(0x5f9)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x4b1391=this[_0x38135c(0x5f9)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x550df5=_0x550df5[_0x38135c(0x310)](_0x2765f2[_0x38135c(0xd63)]()['map'](_0x2e47b2=>_0x2e47b2&&_0x2e47b2[_0x38135c(0x340)]['match'](_0x18f34d)?_0x10ace1(_0x5a5056['$1']):0x0)),_0x2a5ff3=_0x2a5ff3['concat'](_0x2765f2['traitObjects']()[_0x38135c(0xd08)](_0x2828ef=>_0x2828ef&&_0x2828ef[_0x38135c(0x340)][_0x38135c(0xcbd)](_0xa93fd0)?_0x5782b1(_0x453632['$1'])/0x64:0x0)),_0x550df5=_0x550df5[_0x38135c(0x310)](_0x569bc8[_0x38135c(0xd63)]()[_0x38135c(0xd08)](_0x23a5d9=>_0x23a5d9&&_0x23a5d9['note']['match'](_0x361190)?_0x409266(_0x3dc52e['$1']):0x0)),_0x2a5ff3=_0x2a5ff3[_0x38135c(0x310)](_0x569bc8['traitObjects']()[_0x38135c(0xd08)](_0x1a74fa=>_0x1a74fa&&_0x1a74fa['note']['match'](_0x4b1391)?_0x2b6206(_0x48d231['$1'])/0x64:0x0)),this[_0x38135c(0xa87)]()[_0x38135c(0x340)][_0x38135c(0xcbd)](_0x361190)&&_0x550df5[_0x38135c(0x843)](_0x342438(_0x566484['$1'])),this[_0x38135c(0xa87)]()['note'][_0x38135c(0xcbd)](_0x4b1391)&&_0x2a5ff3[_0x38135c(0x843)](_0x1c1d73(_0x19b952['$1'])),_0xc53f6e=_0x550df5[_0x38135c(0x74c)]((_0x511a76,_0x3b3b63)=>_0x511a76-_0x3b3b63,_0x9347e2),_0x37ee01>0x0&&(_0x42c154=_0x2a5ff3['reduce']((_0x55ec53,_0x2b2f17)=>_0x55ec53*(0x1-_0x2b2f17),_0x4aac23)),_0x7ea878;}else _0xff7f7b=(_0x4ec3f8+_0x226fb0)/0x2,_0x17efa9=-0x1;}else{if(_0x5ccd6c[_0x38135c(0xcbd)](/back/i)){if(_0x38135c(0xc83)!=='ZIjbu')_0xff7f7b=_0x2ec1f2>=_0x3b428e?_0x226fb0:_0x4ec3f8;else{const _0x206e4f=this[_0x38135c(0x920)](),_0x45ee02=this[_0x38135c(0xd3b)]();_0x500540[_0x38135c(0xca2)][_0x38135c(0x757)][_0x38135c(0xded)](this,_0x307851),this[_0x38135c(0x796)]()&&_0x206e4f&&this['isDead']()&&(this[_0x38135c(0xa18)]=!this[_0x38135c(0x2f0)](),_0x53bff2[_0x38135c(0x6cc)](this[_0x38135c(0xd9d)]())),_0x42440b[_0x38135c(0x371)]()&&_0x45ee02!==this['stateMotionIndex']()&&(this[_0x38135c(0x9d3)]()&&this[_0x38135c(0x9d3)]()[_0x38135c(0xc59)]());}}}}if(_0x5ccd6c['match'](/head/i))_0x11efa6=_0x1931a4;else{if(_0x5ccd6c['match'](/center/i)){_0x11efa6=(_0x1931a4+_0x322b7a)/0x2;if(_0xeb66ab[_0x38135c(0x9d3)]())_0x11efa6+=_0xeb66ab['battler']()[_0x38135c(0x880)]/0x2;}else _0x5ccd6c['match'](/base/i)&&(_0x11efa6=_0x322b7a);}_0xeb66ab[_0x38135c(0x28f)](_0xff7f7b,_0x11efa6,_0x257bd8,_0x5711fa,_0xe1cc01,_0x17efa9),this['callNextMethod']();},Window_BattleLog[_0x5c342f(0xca4)][_0x5c342f(0x5db)]=function(_0x44e079,_0x2af889,_0x23480d){const _0x2b6d54=_0x5c342f;for(const _0x187511 of _0x44e079){if(_0x2b6d54(0x170)!==_0x2b6d54(0xa49)){if(!_0x187511)continue;_0x187511['jumpBattler'](_0x2af889,_0x23480d);}else{const _0x589f13=_0x399e0f[_0x2b6d54(0x266)](_0x876d9[_0x2b6d54(0x25e)](),_0x11ae4f[_0x2b6d54(0x257)](_0x308da0));this[_0x2b6d54(0x843)](_0x2b6d54(0x3c2)),this[_0x2b6d54(0x843)]('pushBaseLine'),this[_0x2b6d54(0x843)](_0x2b6d54(0x3ff),_0x589f13),this[_0x2b6d54(0x843)](_0x2b6d54(0x630));}}this[_0x2b6d54(0x24a)]();};function Window_BattleMultiTarget(){const _0xa6ad61=_0x5c342f;this[_0xa6ad61(0xd5a)](...arguments);}Window_BattleMultiTarget['prototype']=Object[_0x5c342f(0xccb)](Window_Command[_0x5c342f(0xca4)]),Window_BattleMultiTarget[_0x5c342f(0xca4)][_0x5c342f(0x43e)]=Window_BattleMultiTarget,VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)][_0x5c342f(0x91c)]=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)][_0x5c342f(0x91c)]||{},Window_BattleMultiTarget[_0x5c342f(0x9b5)]=VisuMZ[_0x5c342f(0xca2)]['Settings']['MultiTarget'][_0x5c342f(0xc54)]??0x118,Window_BattleMultiTarget[_0x5c342f(0xa90)]=VisuMZ['BattleCore'][_0x5c342f(0xc90)][_0x5c342f(0x91c)][_0x5c342f(0xe12)]??0x2,Window_BattleMultiTarget[_0x5c342f(0x850)]=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)][_0x5c342f(0x91c)]['ShowButton']??!![],Window_BattleMultiTarget[_0x5c342f(0x9d6)]=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)]['MultiTarget'][_0x5c342f(0x997)]??_0x5c342f(0xdd9),Window_BattleMultiTarget['ALL_ENEMIES']=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)]['MultiTarget'][_0x5c342f(0x693)]??_0x5c342f(0xac8),Window_BattleMultiTarget['ACTOR_OFFSET_X']=VisuMZ[_0x5c342f(0xca2)]['Settings'][_0x5c342f(0x91c)][_0x5c342f(0x5f1)]??0x0,Window_BattleMultiTarget[_0x5c342f(0x9dc)]=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)][_0x5c342f(0x91c)][_0x5c342f(0x35c)]??0x0,Window_BattleMultiTarget[_0x5c342f(0x9c7)]=VisuMZ[_0x5c342f(0xca2)]['Settings'][_0x5c342f(0x91c)][_0x5c342f(0xc60)]??0x0,Window_BattleMultiTarget[_0x5c342f(0x614)]=VisuMZ[_0x5c342f(0xca2)][_0x5c342f(0xc90)][_0x5c342f(0x91c)][_0x5c342f(0x6a4)]??0x0,Window_BattleMultiTarget[_0x5c342f(0xca4)][_0x5c342f(0xd5a)]=function(_0xa262f5,_0x4749b8){const _0x2fccb0=_0x5c342f;this[_0x2fccb0(0x525)]=_0x4749b8,Window_Command['prototype'][_0x2fccb0(0xd5a)][_0x2fccb0(0xded)](this,_0xa262f5),this[_0x2fccb0(0x623)](Window_BattleMultiTarget['BG_TYPE']),this['deactivate'](),this['hide'](),this[_0x2fccb0(0x287)]();},Window_BattleMultiTarget[_0x5c342f(0xca4)][_0x5c342f(0x237)]=function(){const _0x17786e=_0x5c342f;return this[_0x17786e(0x525)];},Window_BattleMultiTarget[_0x5c342f(0xca4)][_0x5c342f(0xc02)]=function(){const _0xf36e3e=_0x5c342f;let _0xe30ced=this[_0xf36e3e(0x237)]()?Window_BattleMultiTarget[_0xf36e3e(0x9d6)]:Window_BattleMultiTarget[_0xf36e3e(0xac0)];if(Imported[_0xf36e3e(0xad9)]&&Window_BattleMultiTarget[_0xf36e3e(0x850)]){if(_0xf36e3e(0xd6d)==='ABfmM')this['addChild'](this[_0xf36e3e(0x3bb)]);else{this[_0xf36e3e(0x5f5)]=this[_0xf36e3e(0x237)]()?_0xf36e3e(0xd33):'pageup',this[_0xf36e3e(0x703)]=TextManager[_0xf36e3e(0xd1e)](this[_0xf36e3e(0x5f5)]);const _0x1a9a6a=VisuMZ[_0xf36e3e(0x912)][_0xf36e3e(0xc90)][_0xf36e3e(0x476)][_0xf36e3e(0x7f0)];_0xe30ced=_0x1a9a6a[_0xf36e3e(0x266)](this[_0xf36e3e(0x703)],_0xe30ced);}}this[_0xf36e3e(0xb75)](_0xe30ced,'selectAll');},Window_BattleMultiTarget['prototype']['drawItem']=function(_0x31c199){const _0x543ded=_0x5c342f,_0x5a7964=this['itemLineRect'](_0x31c199);this[_0x543ded(0x7d0)](),this[_0x543ded(0x760)](this[_0x543ded(0xcb0)](_0x31c199));const _0x5df66b=this[_0x543ded(0x7a2)](_0x31c199),_0x47274a=this[_0x543ded(0x55e)](_0x5df66b)[_0x543ded(0x6e4)],_0x309d04=_0x5a7964['x']+Math[_0x543ded(0x9b3)]((_0x5a7964[_0x543ded(0x6e4)]-_0x47274a)/0x2);this[_0x543ded(0xb30)](_0x5df66b,_0x309d04,_0x5a7964['y'],_0x5a7964[_0x543ded(0x6e4)]);},Window_BattleMultiTarget['prototype']['update']=function(){const _0x388eba=_0x5c342f;Window_Command[_0x388eba(0xca4)]['update']['call'](this),this[_0x388eba(0x52e)](),this[_0x388eba(0x2fa)]();},Window_BattleMultiTarget[_0x5c342f(0xca4)][_0x5c342f(0x52e)]=function(){const _0x53aa07=_0x5c342f;this[_0x53aa07(0x747)]=this[_0x53aa07(0x89d)]();},Window_BattleMultiTarget[_0x5c342f(0xca4)][_0x5c342f(0x89d)]=function(){const _0x1db30e=_0x5c342f,_0x342811=BattleManager[_0x1db30e(0xc3f)](),_0x156d3d=_0x342811&&_0x342811[_0x1db30e(0xc05)]();if(!_0x156d3d)return![];const _0x55bc68=SceneManager[_0x1db30e(0x201)];if(this[_0x1db30e(0x237)]()){if(_0x55bc68[_0x1db30e(0x8f0)][_0x1db30e(0x344)]&&_0x55bc68[_0x1db30e(0x8f0)][_0x1db30e(0xdc2)][_0x1db30e(0xd33)])return!![];if(_0x55bc68[_0x1db30e(0x995)][_0x1db30e(0x344)]&&_0x55bc68[_0x1db30e(0x995)]['_handlers']['pagedown'])return!![];}else{if(_0x1db30e(0x247)===_0x1db30e(0x247)){if(_0x55bc68[_0x1db30e(0x995)][_0x1db30e(0x344)]&&_0x55bc68['_enemyWindow'][_0x1db30e(0xdc2)][_0x1db30e(0x31b)])return!![];}else this['requestMotion'](_0x1db30e(0x2eb));}return![];},Window_BattleMultiTarget['prototype'][_0x5c342f(0x2fa)]=function(){const _0x40cae5=_0x5c342f;if(!Imported['VisuMZ_0_CoreEngine'])return;this[_0x40cae5(0x703)]!==TextManager[_0x40cae5(0xd1e)](this['_buttonKey'])&&this[_0x40cae5(0x4af)]();},Window_BattleMultiTarget[_0x5c342f(0xca4)][_0x5c342f(0x1e8)]=function(){const _0xa83de8=_0x5c342f;if(this['visible']&&TouchInput['isClicked']()){const _0x7eb170=this[_0xa83de8(0xc40)]();if(_0x7eb170>=0x0){if('cueiP'==='fOcKH')return[this[_0xa83de8(0xe3d)]()];else{const _0x31436f=this[_0xa83de8(0x237)]()?_0xa83de8(0xd33):_0xa83de8(0x31b);Input[_0xa83de8(0x1ce)](_0x31436f);}}}};